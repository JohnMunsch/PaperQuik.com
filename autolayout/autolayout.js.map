{"version":3,"sources":["webpack://autolayout/webpack/universalModuleDefinition","webpack://autolayout/webpack/bootstrap","webpack://autolayout/./src/Attribute.js","webpack://autolayout/./src/Relation.js","webpack://autolayout/./src/Priority.js","webpack://autolayout/./src/parser/parser.js","webpack://autolayout/./src/parser/parserExt.js","webpack://autolayout/./src/VisualFormat.js","webpack://autolayout/./node_modules/kiwi.js/es/maptype.js","webpack://autolayout/./node_modules/kiwi.js/es/variable.js","webpack://autolayout/./node_modules/kiwi.js/es/expression.js","webpack://autolayout/./node_modules/kiwi.js/es/strength.js","webpack://autolayout/./node_modules/kiwi.js/es/constraint.js","webpack://autolayout/./node_modules/kiwi.js/es/solver.js","webpack://autolayout/./src/SubView.js","webpack://autolayout/./src/View.js","webpack://autolayout/./src/AutoLayout.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","src_Attribute","CONST","NOTANATTRIBUTE","VARIABLE","LEFT","RIGHT","TOP","BOTTOM","WIDTH","HEIGHT","CENTERX","CENTERY","ZINDEX","src_Relation","LEQ","EQU","GEQ","src_Priority","REQUIRED","DEFAULTHIGH","DEFAULTLOW","parser","SyntaxError","message","expected","found","offset","line","column","child","parent","ctor","constructor","peg$subclass","Error","parse","input","peg$result","options","arguments","length","peg$FAILED","peg$startRuleFunctions","visualFormatString","peg$parsevisualFormatString","peg$startRuleFunction","peg$c0","peg$c1","peg$c2","peg$c3","type","description","peg$c5","superto","view","views","tosuper","orientation","cascade","concat","apply","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","orient","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","predicates","extend","constraints","peg$c19","peg$c20","peg$c21","predicateList","peg$c22","relation","constant","$parserOffset","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","ps","map","peg$c33","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","digits","priority","parseInt","join","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","f","v","peg$c54","peg$c55","peg$c56","decimals","parseFloat","peg$c57","peg$currPos","peg$reportedPos","peg$cachedPos","peg$cachedPosDetails","seenCR","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","peg$computePosDetails","pos","details","startPos","endPos","ch","charAt","advance","peg$fail","push","peg$buildException","posDetails","sort","a","b","splice","cleanupExpected","expectedDescs","Array","slice","hex","charCodeAt","toString","toUpperCase","replace","stringEscape","buildMessage","s0","s1","s2","s3","s4","s5","s6","s7","peg$parseorientation","peg$parsesuperview","peg$parseconnection","peg$parseview","peg$parseviewName","peg$parsepredicateListWithParens","peg$parsenumber","peg$parsesimplePredicate","peg$parsepredicateList","peg$parsepredicate","substr","peg$parserelation","peg$parseconstant","peg$parseobjectOfPredicate","test","peg$parsepriority","substring","dst","k","parserExt","visualFormatStringExt","peg$parsevisualFormatStringExt","peg$c4","attribute","attributes","comments","attr","cascadedViews","connection","equalSpacing","multiplier","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","peg$c64","peg$c65","peg$c66","peg$c67","peg$c68","peg$c69","peg$c70","peg$c71","peg$c72","peg$c73","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","peg$c80","peg$c81","peg$c82","vn","undefined","peg$c83","peg$c84","peg$c85","peg$c86","peg$c87","peg$c88","peg$c89","peg$c90","peg$c91","peg$c92","peg$c93","peg$c94","peg$c95","peg$c96","peg$c97","peg$c98","peg$c99","peg$c100","peg$c101","peg$c102","peg$c103","peg$c104","peg$c105","peg$c106","peg$c107","peg$c108","peg$c109","peg$c110","peg$c111","peg$c112","peg$c113","peg$c114","peg$c115","peg$c116","peg$c117","peg$c118","peg$c119","peg$c120","peg$c121","peg$c122","peg$c123","peg$c124","peg$c125","peg$c126","peg$c127","range","peg$c128","peg$c129","peg$c130","peg$c131","peg$c132","peg$c133","peg$c134","peg$c135","peg$parseviewGroup","peg$parsecomments","peg$parseattributePredicate","peg$parsevisualFormatStringConstraintExpression","peg$parseattribute","peg$parserange","peg$parseviewNameRange","peg$parsecascadedViews","peg$parsepercentage","peg$parseequalSpacingPredicate","peg$parseequalSpacingPredicateList","peg$parsemultiplier","peg$parseconstantExpr","peg$parseviewPredicate","Orientation","HORIZONTAL","VERTICAL","_processEqualSpacer","context","stackView","equalSpacerIndex","lineIndex","view1","attr1","horizontal","view2","attr2","prevViews","prevView","prevAttr","curAttr","_processProportionalSpacer","proportionalSpacerIndex","_processStackView","subView","viewName","orientations","stack","processedOrientations","j","subViews","_getRange","match","start","res","_processCascade","parentItem","curViews","item","isArray","items","z","viewRange","curView","variable","err","metaInfoCategories","src_VisualFormat","[object Object]","visualFormat","extended","indexOf","outFormat","predicate","lineSeparator","parseLine","source","lines","parseOptions","strict","split","trim","prefix","metaInfo","category","prefixedCategory","names","viewport","aspectRatio","height","width","widths","isNaN","heights","spacing","JSON","sIdx","len","createMap","compare","IndexedMap","index","array","size","empty","itemAt","contains","id","find","setDefault","pair","Pair","insert","erase","last","pop","first","copy","second","variable_Variable","Variable","_value","_context","_id","VarId","_name","Compare","setName","setContext","setValue","plus","Expression","minus","multiply","coefficient","divide","toJSON","parsed","parseArgs","_terms","terms","_constant","result","isConstant","idx","args","terms2","termPair","value2","Operator","Strength","w","Math","max","min","clip","required","strong","medium","weak","SymbolType","constraint_Constraint","Constraint","expression","operator","rhs","strength","CnId","_operator","_strength","_expression","op","solver_Solver","Solver","_cnMap","_rowMap","_varMap","_editMap","_infeasibleRows","_objective","solver_Row","_artificial","_idTick","createConstraint","lhs","cn","addConstraint","constraint","data","_createRow","row","tag","subject","_chooseSubject","Invalid","allDummies","nearZero","marker","_addWithArtificialVariable","solveFor","_substitute","_optimize","removeConstraint","cnPair","_removeConstraintEffects","rowPair","leaving","_getMarkerLeavingSymbol","solveForEx","hasConstraint","addEditVariable","expr","Eq","info","removeEditVariable","editPair","hasEditVariable","suggestValue","rows","delta","add","_dualOptimize","other","rowPair_1","coeff","coefficientFor","External","updateVariables","vars","_getVarSymbol","_this","_makeSymbol","symbol","basicPair","insertRow","insertSymbol","objective","INVALID_SYMBOL","Le","Ge","slack","Slack","error","errplus","errminus","dummy","Dummy","reverseSign","cells","art","success","basicRow","entering","_anyPivotableSymbol","removeSymbol","substitute","_getEnteringSymbol","_getLeavingSymbol","infeasible","_getDualEnteringSymbol","ratio","Number","MAX_VALUE","temp","temp_ratio","dmax","r1","r2","invalid","third","_removeMarkerEffects","_type","Row","_cellMap","theCopy","src_SubView","_solver","solver","_attr","left","top","stringify","_getAttrValue","right","intrinsicWidth","_intrinsicWidth","_getAttr","intrinsicHeight","_intrinsicHeight","bottom","centerX","centerY","zIndex","defaultPriorityStrength","_getSubView","_subViews","_parentSubView","_addConstraint","_spacingVars","_spacingExpr","_spacing","vr","src_View","setSpacing","setSize","addConstraints","fittingWidth","fittingHeight","old","newz","_compareSpacing","__webpack_exports__"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,GAAAH,GACA,iBAAAC,QACAA,QAAA,WAAAD,IAEAD,EAAA,WAAAC,IARA,CASCK,KAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,yCC9EA,IAiBeC,EAjBf,CACAC,MAAA,QACAC,eAAA,QACAC,SAAA,MACAC,KAAA,OACAC,MAAA,QACAC,IAAA,MACAC,OAAA,SACAC,MAAA,QACAC,OAAA,SACAC,QAAA,UACAC,QAAA,UAIAC,OAAA,UCPeC,EARf,CAEAC,IAAA,MAEAC,IAAA,MAEAC,IAAA,OCAeC,EANf,CACAC,SAAA,IACAC,YAAA,IACAC,WAAA,KCPeC,EAAA,WAaf,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAhE,KAAA2D,UACA3D,KAAA4D,WACA5D,KAAA6D,QACA7D,KAAA8D,SACA9D,KAAA+D,OACA/D,KAAAgE,SAEAhE,KAAAW,KAAA,cAigCA,OA/gCA,SAAAsD,EAAAC,GACA,SAAAC,IAAqBnE,KAAAoE,YAAAH,EACrBE,EAAAnC,UAAAkC,EAAAlC,UACAiC,EAAAjC,UAAA,IAAAmC,EAcAE,CAAAX,EAAAY,OA8/BA,CACAZ,cACAa,MA9/BA,SAAAC,GACA,IAkFAC,EAlFAC,EAAAC,UAAAC,OAAA,EAAAD,UAAA,MAEAE,EAAA,GAEAC,EAAA,CAAkCC,mBAAAC,IAClCC,EAAAD,GAEAE,EAAAL,EACAM,EAAA,KACAC,EAAA,IACAC,EAAA,CAAkBC,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OAElBC,EAAA,SAAA3E,EAAA4E,EAAAC,EAAAC,EAAAC,GAA6D,OAC7DC,YAAAhF,IAAA,gBACAiF,SAAAL,GAAA,IAAAM,OACA,CAAAL,GACA,GAAAK,OAAAC,MAAA,GAAAL,GACAC,GAAA,MAIAK,EAAA,IACAC,EAAA,CAAkBZ,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OAClBY,EAAA,IACAC,EAAA,CAAkBd,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OAClBc,EAAA,SAAAC,GAAoC,WAAAA,EAAA,yBACpCC,EAAA,IACAC,EAAA,CAAmBlB,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBkB,EAAA,WAA8B,OAASf,KAAA,OACvCgB,EAAA,IACAC,EAAA,CAAmBrB,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBqB,EAAA,IACAC,EAAA,CAAmBvB,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBuB,EAAA,SAAApB,EAAAqB,GAA8C,OAAAC,GAAAtB,EAAAqB,EAAA,CAAmCE,YAAAF,GAA0B,KAC3GG,EAAA,IACAC,EAAA,CAAmB7B,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB6B,EAAA,SAAAC,GAA2C,OAAAA,GAC3CC,EAAA,WAA8B,QAAUC,SAAA,MAAAC,SAAA,UAAAC,cAAA3D,QACxC4D,EAAA,GACAC,EAAA,WAA8B,QAAUJ,SAAA,MAAAC,SAAA,EAAAC,cAAA3D,QACxC8D,EAAA,SAAA/F,GAA+B,QAAU0F,SAAA,MAAAC,SAAA3F,EAAA4F,cAAA3D,QACzC+D,EAAA,IACAC,EAAA,CAAmBxC,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBwC,EAAA,IACAC,EAAA,CAAmB1C,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB0C,EAAA,IACAC,EAAA,CAAmB5C,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB4C,EAAA,SAAAjG,EAAAkG,GAAmC,OAAAlG,GAAA6D,OAAAqC,EAAAC,IAAA,SAAAnG,GAAsC,OAAAA,EAAA,OACzEoG,EAAA,IACAC,EAAA,CAAmBjD,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBiD,EAAA,SAAAtH,EAAAL,EAAAqB,GAAqC,OAAA8E,GAAA,CAAgBO,SAAA,OAAkBrG,GAAA,GAAUL,EAAAqB,IAAA,QACjFuG,EAAA,KACAC,EAAA,CAAmBpD,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACnBoD,EAAA,WAA8B,OAASpB,SAAA,MAAAE,cAAA3D,OACvC8E,EAAA,KACAC,EAAA,CAAmBvD,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACnBuD,EAAA,WAA8B,OAASvB,SAAA,MAAAE,cAAA3D,OACvCiF,EAAA,KACAC,EAAA,CAAmB1D,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACnB0D,EAAA,WAA8B,OAAS1B,SAAA,MAAAE,cAAA3D,OACvCoF,EAAA,SACAC,EAAA,CAAmB7D,KAAA,QAAAjE,MAAA,QAAAkE,YAAA,SACnB6D,EAAA,SAAAC,GAAoC,OAASC,SAAAC,SAAAF,EAAAG,KAAA,UAC7CC,GAAA,SAAA5H,GAA+B,OAAS2F,SAAA3F,IACxC6H,GAAA,aACAC,GAAA,CAAmBrE,KAAA,QAAAjE,MAAA,YAAAkE,YAAA,aACnBqE,GAAA,gBACAC,GAAA,CAAmBvE,KAAA,QAAAjE,MAAA,eAAAkE,YAAA,gBACnBuE,GAAA,SAAAC,EAAAC,GAAkC,OAAStE,KAAAqE,EAAAC,IAC3CC,GAAA,IACAC,GAAA,CAAmB5E,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB4E,GAAA,SAAAd,EAAAe,GAA8C,OAAAC,WAAAhB,EAAAtD,OAAA,KAAAA,OAAAqE,GAAAZ,KAAA,SAC9Cc,GAAA,SAAAjB,GAAoC,OAAAE,SAAAF,EAAAG,KAAA,SAEpCe,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,CAAgC3G,KAAA,EAAAC,OAAA,EAAA2G,QAAA,GAChCC,GAAA,EACAC,GAAA,GACAC,GAAA,EAIA,iBAAApG,EAAA,CACA,KAAAA,EAAAqG,aAAAjG,GACA,UAAAR,MAAA,mCAAAI,EAAAqG,UAAA,MAGA9F,EAAAH,EAAAJ,EAAAqG,WAOA,SAAAjH,KACA,OAAA0G,GAuBA,SAAAQ,GAAAC,GA8BA,OATAR,KAAAQ,IACAR,GAAAQ,IACAR,GAAA,EACAC,GAAA,CAAkC3G,KAAA,EAAAC,OAAA,EAAA2G,QAAA,IAvBlC,SAAAO,EAAAC,EAAAC,GACA,IAAAlJ,EAAAmJ,EAEA,IAAAnJ,EAAAiJ,EAA0BjJ,EAAAkJ,EAAYlJ,IAEtC,QADAmJ,EAAA7G,EAAA8G,OAAApJ,KAEAgJ,EAAAP,QAAkCO,EAAAnH,OAClCmH,EAAAlH,OAAA,EACAkH,EAAAP,QAAA,GACW,OAAAU,GAAA,WAAAA,GAAA,WAAAA,GACXH,EAAAnH,OACAmH,EAAAlH,OAAA,EACAkH,EAAAP,QAAA,IAEAO,EAAAlH,SACAkH,EAAAP,QAAA,GAUAY,CAAAb,GAAAD,GAAAQ,GACAR,GAAAQ,GAGAP,GAGA,SAAAc,GAAA5H,GACA2G,GAAAK,KAEAL,GAAAK,KACAA,GAAAL,GACAM,GAAA,IAGAA,GAAAY,KAAA7H,IAGA,SAAA8H,GAAA/H,EAAAC,EAAAqH,GA2DA,IAAAU,EAAAX,GAAAC,GACApH,EAAAoH,EAAAzG,EAAAI,OAAAJ,EAAA8G,OAAAL,GAAA,KAMA,OAJA,OAAArH,GA7DA,SAAAA,GACA,IAAAxD,EAAA,EAYA,IAVAwD,EAAAgI,KAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAtG,YAAAuG,EAAAvG,aACA,EACWsG,EAAAtG,YAAAuG,EAAAvG,YACX,EAEA,IAIAnF,EAAAwD,EAAAgB,QACAhB,EAAAxD,EAAA,KAAAwD,EAAAxD,GACAwD,EAAAmI,OAAA3L,EAAA,GAEAA,IA6CA4L,CAAApI,GAGA,IAAAF,EACA,OAAAC,IA5CA,SAAAC,EAAAC,GAkBA,IACAzD,EADA6L,EAAA,IAAAC,MAAAtI,EAAAgB,QAGA,IAAAxE,EAAA,EAAmBA,EAAAwD,EAAAgB,OAAqBxE,IACxC6L,EAAA7L,GAAAwD,EAAAxD,GAAAmF,YAWA,mBARA3B,EAAAgB,OAAA,EACAqH,EAAAE,MAAA,MAAA3C,KAAA,MACA,OACAyC,EAAArI,EAAAgB,OAAA,GACAqH,EAAA,IAIA,SAFApI,EAAA,IA9BA,SAAA1B,GACA,SAAAiK,EAAAf,GAA4B,OAAAA,EAAAgB,WAAA,GAAAC,SAAA,IAAAC,cAE5B,OAAApK,EACAqK,QAAA,cACAA,QAAA,YACAA,QAAA,eACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,oCAAAnB,GAA+D,aAAAe,EAAAf,KAC/DmB,QAAA,iCAAAnB,GAA+D,YAAAe,EAAAf,KAC/DmB,QAAA,4BAAAnB,GAA+D,aAAAe,EAAAf,KAC/DmB,QAAA,4BAAAnB,GAA+D,YAAAe,EAAAf,KAgB/DoB,CAAA5I,GAAA,oBAEA,UAWA6I,CAAA9I,EAAAC,GACAD,EACAC,EACAoH,EACAU,EAAA5H,KACA4H,EAAA3H,QAIA,SAAAgB,KACA,IAAA2H,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA2BA,GAzBAP,EAAApC,GACAqC,EAAArC,IACAsC,EA8HA,WACA,IAAAF,EAAAC,EAyBA,OAvBAD,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA3G,EACAsE,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAAtF,IAEpC0G,IAAA/H,IACA,KAAAL,EAAA6H,WAAA9B,KACAqC,EAAAzG,EACAoE,OAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAApF,KAGtCwG,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAvG,EAAAuG,IAEAD,EAAAC,EAtJAO,MACAtI,GACA,KAAAL,EAAA6H,WAAA9B,KACAuC,EAAA1H,EACAmF,OAEAuC,EAAAjI,EACA,IAAAiG,IAAsCU,GAAAnG,IAEtCyH,IAAAjI,EAEA+H,EADAC,EAAA,CAAAA,EAAAC,IAGAvC,GAAAqC,EACAA,EAAA1H,KAGAqF,GAAAqC,EACAA,EAAA1H,GAEA0H,IAAA/H,IACA+H,EAAAzH,GAEAyH,IAAA/H,EAmBA,GAlBAgI,EAAAtC,IACAuC,EAAAM,QACAvI,IACAkI,EAAAM,QACAxI,EAEAgI,EADAC,EAAA,CAAAA,EAAAC,IAOAxC,GAAAsC,EACAA,EAAA3H,GAEA2H,IAAAhI,IACAgI,EAAA1H,GAEA0H,IAAAhI,EAEA,IADAiI,EAAAQ,QACAzI,EAAA,CAiBA,IAhBAkI,EAAA,GACAC,EAAAzC,IACA0C,EAAAI,QACAxI,IACAqI,EAAAI,QACAzI,EAEAmI,EADAC,EAAA,CAAAA,EAAAC,IAOA3C,GAAAyC,EACAA,EAAA9H,GAEA8H,IAAAnI,GACAkI,EAAAtB,KAAAuB,GACAA,EAAAzC,IACA0C,EAAAI,QACAxI,IACAqI,EAAAI,QACAzI,EAEAmI,EADAC,EAAA,CAAAA,EAAAC,IAOA3C,GAAAyC,EACAA,EAAA9H,GAGA6H,IAAAlI,GACAmI,EAAAzC,IACA0C,EAAAI,QACAxI,IACAqI,EAAAE,QACAvI,EAEAmI,EADAC,EAAA,CAAAA,EAAAC,IAOA3C,GAAAyC,EACAA,EAAA9H,GAEA8H,IAAAnI,IACAmI,EAAA7H,GAEA6H,IAAAnI,GACA2F,GAAAmC,EAEAA,EADAC,EAAApH,EAAAoH,EAAAC,EAAAC,EAAAC,EAAAC,KAGAzC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EAgCA,SAAAS,KACA,IAAAT,EAAAC,EAgBA,OAdAD,EAAApC,GACA,MAAA/F,EAAA6H,WAAA9B,KACAqC,EAAArG,EACAgE,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAAhF,IAEpCoG,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAnG,KAEAkG,EAAAC,EAKA,SAAAU,KACA,IAAAX,EAAAC,EAAAC,EAAAC,EAAAC,EA8CA,OA5CAJ,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAAlG,EACA6D,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAA7E,IAEpCiG,IAAA/H,IACAgI,EAAAU,QACA1I,IACAiI,EAAAU,QACA3I,IACAiI,EAAA3H,GAEA2H,IAAAjI,GACA,KAAAL,EAAA6H,WAAA9B,KACAwC,EAAAnG,EACA2D,OAEAwC,EAAAlI,EACA,IAAAiG,IAA0CU,GAAA3E,IAE1CkG,IAAAlI,GACA2F,GAAAmC,EAEAA,EADAC,EAAA9F,EAAA+F,EAAAC,KAGAvC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,KAOAqF,GAAAoC,EACAA,EAAAzH,GAGAyH,EAGA,SAAAU,KACA,IAAAV,EAAAC,EAAAC,EAAAC,EA6DA,OA3DAH,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA1F,EACAqD,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAArE,IAEpCyF,IAAA/H,IACAgI,EAqDA,WACA,IAAAF,EAOA,OALAA,EAQA,WACA,IAAAA,EAAAC,EAUA,OARAD,EAAApC,IACAqC,EAAAa,QACA5I,IACA2F,GAAAmC,EACAC,EAAAhF,EAAAgF,IAEAD,EAAAC,EAjBAc,MACA7I,IACA8H,EAAAa,MAGAb,EA7DAgB,MACA9I,GACA,KAAAL,EAAA6H,WAAA9B,KACAuC,EAAA5F,EACAqD,OAEAuC,EAAAjI,EACA,IAAAiG,IAAwCU,GAAArE,IAExC2F,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAAxF,EAAAyF,KAGAtC,GAAAoC,EACAA,EAAAzH,KAOAqF,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA1F,EACAqD,OAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAArE,IAEtCyF,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAtF,MAEAqF,EAAAC,KACA/H,IACA8H,EAAApC,IACAqC,EAAAlF,KACA7C,IACA2F,GAAAmC,EACAC,EAAAjF,KAEAgF,EAAAC,IAIAD,EA4BA,SAAAa,KACA,IAAAb,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAUA,GARAN,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA/E,EACA0C,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAA1D,IAEpC8E,IAAA/H,EAEA,IADAgI,EAAAe,QACA/I,EAAA,CAuBA,IAtBAiI,EAAA,GACAC,EAAAxC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAyC,EAAAjF,EACAwC,OAEAyC,EAAAnI,EACA,IAAAiG,IAAwCU,GAAAxD,IAExCgF,IAAAnI,IACAoI,EAAAW,QACA/I,EAEAkI,EADAC,EAAA,CAAAA,EAAAC,IAOA1C,GAAAwC,EACAA,EAAA7H,GAEA6H,IAAAlI,GACAiI,EAAArB,KAAAsB,GACAA,EAAAxC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAyC,EAAAjF,EACAwC,OAEAyC,EAAAnI,EACA,IAAAiG,IAA0CU,GAAAxD,IAE1CgF,IAAAnI,IACAoI,EAAAW,QACA/I,EAEAkI,EADAC,EAAA,CAAAA,EAAAC,IAOA1C,GAAAwC,EACAA,EAAA7H,GAGA4H,IAAAjI,GACA,KAAAL,EAAA6H,WAAA9B,KACAwC,EAAA9E,EACAsC,OAEAwC,EAAAlI,EACA,IAAAiG,IAA0CU,GAAAtD,IAE1C6E,IAAAlI,GACA2F,GAAAmC,EAEAA,EADAC,EAAAzE,EAAA0E,EAAAC,KAGAvC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EAGA,SAAAiB,KACA,IAAAjB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAmDA,OAjDAL,EAAApC,IACAqC,EAmDA,WACA,IAAAD,EAAAC,EA8CA,OA5CAD,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAA9B,GACAmE,EAAAnE,EACA8B,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAA9C,IAEpCkE,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAjE,MAEAgE,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAA3B,GACAgE,EAAAhE,EACA2B,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAA3C,IAEtC+D,IAAA/H,IACA2F,GAAAmC,EACAC,EAAA9D,MAEA6D,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAxB,GACA6D,EAAA7D,EACAwB,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAwCU,GAAAxC,IAExC4D,IAAA/H,IACA2F,GAAAmC,EACAC,EAAA3D,KAEA0D,EAAAC,IAIAD,EAlGAmB,MACAjJ,IACA+H,EAAAzH,GAEAyH,IAAA/H,IACAgI,EAgGA,WACA,IAAAF,EAOA,OALAA,EA2CA,WACA,IAAAA,EAAAC,EAUA,OARAD,EAAApC,IACAqC,EAAAa,QACA5I,IACA2F,GAAAmC,EACAC,EAAAnD,GAAAmD,IAEAD,EAAAC,EApDAmB,MACAlJ,IACA8H,EAAAY,MAGAZ,EAxGAqB,MACAnJ,GACAiI,EAAAvC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAwC,EAAAzE,EACAiC,OAEAwC,EAAAlI,EACA,IAAAiG,IAAwCU,GAAAjD,IAExCwE,IAAAlI,IACAmI,EAgGA,WACA,IAAAL,EAAAC,EAAAC,EAWA,GATAF,EAAApC,GACAqC,EAAA,GACA1D,EAAA+E,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAAoCU,GAAArC,IAEpC0D,IAAAhI,EACA,KAAAgI,IAAAhI,GACA+H,EAAAnB,KAAAoB,GACA3D,EAAA+E,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAAwCU,GAAArC,SAIxCyD,EAAA1H,EAQA,OANA0H,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAxD,EAAAwD,IAEAD,EAAAC,EA9HAsB,MACArJ,EAEAiI,EADAC,EAAA,CAAAA,EAAAC,IAOAzC,GAAAuC,EACAA,EAAA5H,GAEA4H,IAAAjI,IACAiI,EAAA3H,GAEA2H,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAApE,EAAAoE,EAAAC,EAAAC,KAGAvC,GAAAoC,EACAA,EAAAzH,KAOAqF,GAAAoC,EACAA,EAAAzH,GAGAyH,EAiHA,SAAAY,KACA,IAAAZ,EAAAC,EAAAC,EAAAC,EAAAC,EAYA,GAVAJ,EAAApC,GACAqC,EAAArC,GACAsC,EAAA,GACAnD,GAAAuE,KAAAzJ,EAAA8G,OAAAf,MACAuC,EAAAtI,EAAA8G,OAAAf,IACAA,OAEAuC,EAAAjI,EACA,IAAAiG,IAAoCU,GAAA7B,KAEpCmD,IAAAjI,EACA,KAAAiI,IAAAjI,GACAgI,EAAApB,KAAAqB,GACApD,GAAAuE,KAAAzJ,EAAA8G,OAAAf,MACAuC,EAAAtI,EAAA8G,OAAAf,IACAA,OAEAuC,EAAAjI,EACA,IAAAiG,IAAwCU,GAAA7B,UAIxCkD,EAAA3H,EAMA,GAJA2H,IAAAhI,IACAgI,EAAArI,EAAA2J,UAAAvB,EAAArC,MAEAqC,EAAAC,KACAhI,EAAA,CAUA,IATAgI,EAAAtC,GACAuC,EAAA,GACAlD,GAAAqE,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAAsCU,GAAA3B,KAEtCkD,IAAAlI,GACAiI,EAAArB,KAAAsB,GACAnD,GAAAqE,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAAwCU,GAAA3B,KAGxCiD,IAAAjI,IACAiI,EAAAtI,EAAA2J,UAAAtB,EAAAtC,MAEAsC,EAAAC,KACAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAA9C,GAAA8C,EAAAC,KAGAtC,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EAGA,SAAAc,KACA,IAAAd,EAAAC,EAAAC,EAAAC,EAAAC,EAWA,GATAJ,EAAApC,GACAqC,EAAA,GACA1D,EAAA+E,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAAoCU,GAAArC,IAEpC0D,IAAAhI,EACA,KAAAgI,IAAAhI,GACA+H,EAAAnB,KAAAoB,GACA3D,EAAA+E,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAAwCU,GAAArC,SAIxCyD,EAAA1H,EAEA,GAAA0H,IAAA/H,EAQA,GAPA,KAAAL,EAAA6H,WAAA9B,KACAsC,EAAA5C,GACAM,OAEAsC,EAAAhI,EACA,IAAAiG,IAAsCU,GAAAtB,KAEtC2C,IAAAhI,EAAA,CASA,GARAiI,EAAA,GACA5D,EAAA+E,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAAwCU,GAAArC,IAExC4D,IAAAlI,EACA,KAAAkI,IAAAlI,GACAiI,EAAArB,KAAAsB,GACA7D,EAAA+E,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAA4CU,GAAArC,SAI5C2D,EAAA5H,EAEA4H,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAAzC,GAAAyC,EAAAE,KAGAvC,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,EAEA,GAAAyH,IAAA9H,EAAA,CAUA,GATA8H,EAAApC,GACAqC,EAAA,GACA1D,EAAA+E,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAAsCU,GAAArC,IAEtC0D,IAAAhI,EACA,KAAAgI,IAAAhI,GACA+H,EAAAnB,KAAAoB,GACA3D,EAAA+E,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAA0CU,GAAArC,SAI1CyD,EAAA1H,EAEA0H,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAtC,GAAAsC,IAEAD,EAAAC,EAGA,OAAAD,EAIA,SAAA3F,GAAAoH,GACA,QAAAhO,EAAA,EAAuBA,EAAAuE,UAAAC,OAAsBxE,IAC7C,QAAAiO,KAAA1J,UAAAvE,GACAgO,EAAAC,GAAA1J,UAAAvE,GAAAiO,GAGA,OAAAD,EAMA,IAFA3J,EAAAQ,OAEAJ,GAAA0F,KAAA/F,EAAAI,OACA,OAAAH,EAMA,MAJAA,IAAAI,GAAA0F,GAAA/F,EAAAI,QACA4G,GAAA,CAAkBlG,KAAA,MAAAC,YAAA,iBAGlBmG,GAAA,KAAAb,GAAAD,MAlhCe,GCAA0D,EAAA,WAaf,SAAA5K,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAhE,KAAA2D,UACA3D,KAAA4D,WACA5D,KAAA6D,QACA7D,KAAA8D,SACA9D,KAAA+D,OACA/D,KAAAgE,SAEAhE,KAAAW,KAAA,cAg2EA,OA92EA,SAAAsD,EAAAC,GACA,SAAAC,IAAqBnE,KAAAoE,YAAAH,EACrBE,EAAAnC,UAAAkC,EAAAlC,UACAiC,EAAAjC,UAAA,IAAAmC,EAcAE,CAAAX,EAAAY,OA61EA,CACAZ,cACAa,MA71EA,SAAAC,GACA,IAwKAC,EAxKAC,EAAAC,UAAAC,OAAA,EAAAD,UAAA,MAEAE,EAAA,GAEAC,EAAA,CAAkCyJ,sBAAAC,IAClCvJ,EAAAuJ,GAEAtJ,EAAAL,EACAM,EAAA,KACAC,EAAA,CAAkBE,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QAElBkJ,EAAA,KACAjJ,EAAA,SAAAE,EAAAgJ,EAAAC,EAAAC,GAAkE,OAClEtJ,KAAA,YACAI,YACAiJ,WAAA,CAAAD,GAAA3I,OAAA4I,KAGA1I,EAAA,SAAA4I,EAAA9H,GAA6C,OAAS8H,OAAA9H,eACtDb,EAAA,IACAC,EAAA,CAAkBb,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OAClBa,EAAA,SAAAvF,EAAA4E,EAAAC,EAAAC,EAAAC,EAAAgJ,GAAuE,OACvEtJ,KAAA,MACAO,YAAAhF,IAAA,gBACAiF,SAAAL,GAAA,IAAAM,OACAL,EACA,GAAAK,OAAAC,MAAA,GAAAL,GACAC,GAAA,MAIAS,EAAA,KACAE,EAAA,CAAmBjB,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACnBiB,EAAA,WAA8B,kBAC9BC,EAAA,IACAC,EAAA,CAAmBpB,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBoB,EAAA,WAA8B,oBAC9BC,EAAA,IACAC,EAAA,CAAmBvB,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBuB,EAAA,WAA8B,kBAC9BI,EAAA,IACAC,EAAA,CAAmB7B,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB6B,EAAA,WAA8B,gBAC9BE,EAAA,IACAI,EAAA,CAAmBpC,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBoC,EAAA,KACAC,EAAA,CAAmBtC,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACnBsC,EAAA,CAAmBvC,KAAA,MAAAC,YAAA,iBACnBuC,EAAA,IACAC,EAAA,CAAmBzC,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnByC,EAAA,WAA8B,OAAStC,KAAA,OACvCuC,EAAA,IACAC,EAAA,CAAmB5C,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB4C,EAAA,IACAG,EAAA,CAAmBhD,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBgD,EAAA,IACAC,EAAA,CAAmBlD,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBkD,EAAA,SAAA/C,EAAAC,GAAyC,OAAAA,EAAAf,OAAA,CAAAc,GAAAK,OAAA,GAAAA,OAAAC,MAAA,GAAAL,IAAAD,GACzCgD,EAAA,SAAAhD,EAAAqB,EAAA+H,GAA6D,OAAA9H,MAAAtB,EAAAqB,EAAA,CAA0CE,YAAAF,GAA0B,IAAK+H,EAAA,CACtIhJ,QAAAgJ,GACW,KACXnG,EAAA,SAAAhD,EAAAoJ,GAA+C,SAAAhJ,OAAA,GAAAA,OAAAC,MAAA,GAAAL,GAAA,CAAAoJ,KAC/CnG,EAAA,KACAC,EAAA,CAAmBvD,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACnBuD,EAAA,WAA8B,QAAUvB,SAAA,UACxCwB,EAAA,IACAC,EAAA,CAAmB1D,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB0D,EAAA,SAAA5B,GAA2C,OAAAA,GAC3C6B,EAAA,WAA8B,QAAU3B,SAAA,MAAAC,SAAA,aACxC2B,EAAA,IACAC,EAAA,CAAmB9D,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBkE,GAAA,WAA8B,QAAUlC,SAAA,MAAAyH,cAAA,KACxCtF,GAAA,GACAC,GAAA,WAA8B,QAAUpC,SAAA,MAAAC,SAAA,KACxCoC,GAAA,SAAA1H,GAA+B,QAAUqF,SAAA,MAAA0H,WAAA/M,EAAA+M,cACzCpF,GAAA,SAAAhI,GAA+B,QAAU0F,SAAA,MAAAC,SAAA3F,KACzCiI,GAAA,IACAG,GAAA,CAAmB3E,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB2E,GAAA,IACAC,GAAA,CAAmB7E,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB+E,GAAA,SAAApI,EAAAkG,GAAmC,OAAAlG,GAAA6D,OAAAqC,EAAAC,IAAA,SAAAnG,GAAsC,OAAAA,EAAA,OACzEgN,GAAA,IACAC,GAAA,CAAmB7J,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB6J,GAAA,SAAAlO,EAAAL,EAAAqB,GAAqC,OAAA8E,GAAA,CAAgBO,SAAA,OAAkBrG,GAAA,GAAUL,EAAAqB,IAAA,QACjFmN,GAAA,SAAAnO,EAAAL,EAAAqB,GAAqC,OAAA8E,GAAA,CAAgBO,SAAA,MAAAyH,cAAA,GAAsC9N,GAAA,GAAUL,EAAAqB,IAAA,QACrGoN,GAAA,KACAC,GAAA,CAAmBjK,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACnBiK,GAAA,WAA8B,OAASjI,SAAA,QACvCkI,GAAA,KACAC,GAAA,CAAmBpK,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACnBoK,GAAA,WAA8B,OAASpI,SAAA,QACvCqI,GAAA,KACAC,GAAA,CAAmBvK,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACnBuK,GAAA,WAA8B,OAASvI,SAAA,QACvCwI,GAAA,SACAC,GAAA,CAAmB1K,KAAA,QAAAjE,MAAA,QAAAkE,YAAA,SACnB0K,GAAA,SAAA5G,GAAoC,OAASC,SAAAC,SAAAF,EAAAG,KAAA,UAC7C0G,GAAA,SAAArO,GAA+B,OAAS2F,SAAA3F,IACxCsO,GAAA,SAAAtO,GAA+B,OAAS2F,UAAA3F,IACxCuO,GAAA,IACAC,GAAA,CAAmB/K,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnB+K,GAAA,IACAC,GAAA,CAAmBjL,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACnBiL,GAAA,SAAA3O,GAA+B,OAAS6D,KAAA,KAAAuJ,WAAApN,EAAA,MACxC4O,GAAA,SAAA5O,GAA+B,OAAS6D,KAAA,KAAAuJ,WAAApN,GAAA,MACxC6O,GAAA,SAAAC,EAAA9E,EAAArL,EAAAC,GAAyC,OAASiF,KAAAiL,EAAAjL,KAAAgJ,UAAA7C,QAAA+E,EAAA3B,WAAAzO,GAAA,EAAAgH,SAAA/G,QAAAmQ,IAClDC,GAAA,QACAC,GAAA,CAAmBxL,KAAA,UAAAjE,MAAA,QAAAkE,YAAA,WACnBwL,GAAA,WAA8B,cAC9BC,GAAA,SACAC,GAAA,CAAmB3L,KAAA,UAAAjE,MAAA,SAAAkE,YAAA,YACnB2L,GAAA,WAA8B,eAC9BC,GAAA,OACAC,GAAA,CAAmB9L,KAAA,UAAAjE,MAAA,OAAAkE,YAAA,UACnB8L,GAAA,WAA8B,aAC9BC,GAAA,UACAC,GAAA,CAAmBjM,KAAA,UAAAjE,MAAA,UAAAkE,YAAA,aACnBiM,GAAA,WAA8B,gBAC9BC,GAAA,SACAC,GAAA,CAAmBpM,KAAA,UAAAjE,MAAA,SAAAkE,YAAA,YACnBoM,GAAA,WAA8B,eAC9BC,GAAA,UACAC,GAAA,CAAmBvM,KAAA,UAAAjE,MAAA,UAAAkE,YAAA,aACnBuM,GAAA,WAA+B,gBAC/BC,GAAA,WACAC,GAAA,CAAoB1M,KAAA,UAAAjE,MAAA,WAAAkE,YAAA,cACpB0M,GAAA,WAA+B,iBAC/BC,GAAA,WACAC,GAAA,CAAoB7M,KAAA,UAAAjE,MAAA,WAAAkE,YAAA,cACpB6M,GAAA,WAA+B,iBAC/BC,GAAA,IACAC,GAAA,CAAoBhN,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACpBgN,GAAA,SAAA1Q,GAAgC,SAAAA,GAChC2Q,GAAA,KACAC,GAAA,CAAoBnN,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACpBmN,GAAA,KACAC,GAAA,CAAoBrN,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACpBqN,GAAA,SAAA/Q,GAAgC,SAAAA,GAChCgR,GAAA,IACAC,GAAA,CAAoBxN,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACpBwN,GAAA,SAAAlR,GAAgC,OAAAA,GAChCmR,GAAA,KACAC,GAAA,CAAoB3N,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACpB2N,GAAA,KACAC,GAAA,CAAoB7N,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACpB6N,GAAA,SAAAvR,GAAgC,OAAAA,GAChCwR,GAAA,aACAC,GAAA,CAAoBhO,KAAA,QAAAjE,MAAA,YAAAkE,YAAA,aACpBgO,GAAA,gBACAC,GAAA,CAAoBlO,KAAA,QAAAjE,MAAA,eAAAkE,YAAA,gBACpBkO,GAAA,SAAA1J,EAAAC,EAAA9I,GAAsC,OAASwE,KAAAqE,EAAAC,EAAA0J,MAAAxS,EAAAuG,cAAA3D,OAC/C6P,GAAA,SAAA5J,EAAAC,GAAmC,OAAStE,KAAAqE,EAAAC,EAAAvC,cAAA3D,OAC5C8P,GAAA,KACAC,GAAA,CAAoBvO,KAAA,UAAAjE,MAAA,KAAAkE,YAAA,QACpBuO,GAAA,SAAApT,GAAgC,OAAA6I,SAAA7I,IAChCqT,GAAA,IACAC,GAAA,CAAoB1O,KAAA,UAAAjE,MAAA,IAAAkE,YAAA,OACpB0O,GAAA,SAAA5K,EAAAe,GAA+C,OAAAC,WAAAhB,EAAAtD,OAAA,KAAAA,OAAAqE,GAAAZ,KAAA,SAC/C0K,GAAA,SAAA7K,GAAqC,OAAAE,SAAAF,EAAAG,KAAA,SAErCe,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,CAAgC3G,KAAA,EAAAC,OAAA,EAAA2G,QAAA,GAChCC,GAAA,EACAC,GAAA,GACAC,GAAA,EAIA,iBAAApG,EAAA,CACA,KAAAA,EAAAqG,aAAAjG,GACA,UAAAR,MAAA,mCAAAI,EAAAqG,UAAA,MAGA9F,EAAAH,EAAAJ,EAAAqG,WAOA,SAAAjH,KACA,OAAA0G,GAuBA,SAAAQ,GAAAC,GA8BA,OATAR,KAAAQ,IACAR,GAAAQ,IACAR,GAAA,EACAC,GAAA,CAAkC3G,KAAA,EAAAC,OAAA,EAAA2G,QAAA,IAvBlC,SAAAO,EAAAC,EAAAC,GACA,IAAAlJ,EAAAmJ,EAEA,IAAAnJ,EAAAiJ,EAA0BjJ,EAAAkJ,EAAYlJ,IAEtC,QADAmJ,EAAA7G,EAAA8G,OAAApJ,KAEAgJ,EAAAP,QAAkCO,EAAAnH,OAClCmH,EAAAlH,OAAA,EACAkH,EAAAP,QAAA,GACW,OAAAU,GAAA,WAAAA,GAAA,WAAAA,GACXH,EAAAnH,OACAmH,EAAAlH,OAAA,EACAkH,EAAAP,QAAA,IAEAO,EAAAlH,SACAkH,EAAAP,QAAA,GAUAY,CAAAb,GAAAD,GAAAQ,GACAR,GAAAQ,GAGAP,GAGA,SAAAc,GAAA5H,GACA2G,GAAAK,KAEAL,GAAAK,KACAA,GAAAL,GACAM,GAAA,IAGAA,GAAAY,KAAA7H,IAGA,SAAA8H,GAAA/H,EAAAC,EAAAqH,GA2DA,IAAAU,EAAAX,GAAAC,GACApH,EAAAoH,EAAAzG,EAAAI,OAAAJ,EAAA8G,OAAAL,GAAA,KAMA,OAJA,OAAArH,GA7DA,SAAAA,GACA,IAAAxD,EAAA,EAYA,IAVAwD,EAAAgI,KAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAtG,YAAAuG,EAAAvG,aACA,EACWsG,EAAAtG,YAAAuG,EAAAvG,YACX,EAEA,IAIAnF,EAAAwD,EAAAgB,QACAhB,EAAAxD,EAAA,KAAAwD,EAAAxD,GACAwD,EAAAmI,OAAA3L,EAAA,GAEAA,IA6CA4L,CAAApI,GAGA,IAAAF,EACA,OAAAC,IA5CA,SAAAC,EAAAC,GAkBA,IACAzD,EADA6L,EAAA,IAAAC,MAAAtI,EAAAgB,QAGA,IAAAxE,EAAA,EAAmBA,EAAAwD,EAAAgB,OAAqBxE,IACxC6L,EAAA7L,GAAAwD,EAAAxD,GAAAmF,YAWA,mBARA3B,EAAAgB,OAAA,EACAqH,EAAAE,MAAA,MAAA3C,KAAA,MACA,OACAyC,EAAArI,EAAAgB,OAAA,GACAqH,EAAA,IAIA,SAFApI,EAAA,IA9BA,SAAA1B,GACA,SAAAiK,EAAAf,GAA4B,OAAAA,EAAAgB,WAAA,GAAAC,SAAA,IAAAC,cAE5B,OAAApK,EACAqK,QAAA,cACAA,QAAA,YACAA,QAAA,eACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,oCAAAnB,GAA+D,aAAAe,EAAAf,KAC/DmB,QAAA,iCAAAnB,GAA+D,YAAAe,EAAAf,KAC/DmB,QAAA,4BAAAnB,GAA+D,aAAAe,EAAAf,KAC/DmB,QAAA,4BAAAnB,GAA+D,YAAAe,EAAAf,KAgB/DoB,CAAA5I,GAAA,oBAEA,UAWA6I,CAAA9I,EAAAC,GACAD,EACAC,EACAoH,EACAU,EAAA5H,KACA4H,EAAA3H,QAIA,SAAAwK,KACA,IAAA7B,EAOA,OALAA,EAsFA,WACA,IAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA2BA,GAzBAP,EAAApC,GACAqC,EAAArC,IACAsC,EAuIA,WACA,IAAAF,EAAAC,EA6DA,OA3DAD,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAlE,GACAuG,EAAAvG,EACAkE,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAAjF,IAEpCqG,IAAA/H,IACA2F,GAAAmC,EACAC,EAAApG,MAEAmG,EAAAC,KACA/H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAAnG,EACA8D,OAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAA9E,IAEtCkG,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAjG,MAEAgG,EAAAC,KACA/H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAAhG,EACA2D,OAEAqC,EAAA/H,EACA,IAAAiG,IAAwCU,GAAA3E,IAExC+F,IAAA/H,IACA2F,GAAAmC,EACAC,EAAA9F,MAEA6F,EAAAC,KACA/H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA1F,EACAqD,OAEAqC,EAAA/H,EACA,IAAAiG,IAA0CU,GAAArE,IAE1CyF,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAxF,KAEAuF,EAAAC,KAKAD,EArMAQ,MACAtI,GACA,KAAAL,EAAA6H,WAAA9B,KACAuC,EAAA5G,EACAqE,OAEAuC,EAAAjI,EACA,IAAAiG,IAAsCU,GAAArF,IAEtC2G,IAAAjI,EAEA+H,EADAC,EAAA,CAAAA,EAAAC,IAGAvC,GAAAqC,EACAA,EAAA1H,KAGAqF,GAAAqC,EACAA,EAAA1H,GAEA0H,IAAA/H,IACA+H,EAAA6B,GAEA7B,IAAA/H,EAmBA,GAlBAgI,EAAAtC,IACAuC,EAAAM,QACAvI,IACAkI,EAAAM,QACAxI,EAEAgI,EADAC,EAAA,CAAAA,EAAAC,IAOAxC,GAAAsC,EACAA,EAAA3H,GAEA2H,IAAAhI,IACAgI,EAAA4B,GAEA5B,IAAAhI,EAEA,IADAiI,EAAAqH,QACAtP,EAAA,CAiBA,IAhBAkI,EAAA,GACAC,EAAAzC,IACA0C,EAAAI,QACAxI,IACAqI,EAAAiH,QACAtP,EAEAmI,EADAC,EAAA,CAAAA,EAAAC,IAOA3C,GAAAyC,EACAA,EAAA9H,GAEA8H,IAAAnI,GACAkI,EAAAtB,KAAAuB,GACAA,EAAAzC,IACA0C,EAAAI,QACAxI,IACAqI,EAAAiH,QACAtP,EAEAmI,EADAC,EAAA,CAAAA,EAAAC,IAOA3C,GAAAyC,EACAA,EAAA9H,GAGA6H,IAAAlI,GACAmI,EAAAzC,IACA0C,EAAAI,QACAxI,IACAqI,EAAAE,QACAvI,EAEAmI,EADAC,EAAA,CAAAA,EAAAC,IAOA3C,GAAAyC,EACAA,EAAA9H,GAEA8H,IAAAnI,IACAmI,EAAAyB,GAEAzB,IAAAnI,IACAoI,EAAAmH,QACAvP,IACAoI,EAAAwB,GAEAxB,IAAApI,GACA2F,GAAAmC,EACAC,EAAAxG,EAAAwG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAN,EAAAC,IAEArC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EA/NA3H,MACAH,IACA8H,EAMA,WACA,IAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAUA,GARAL,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAApF,GACAyH,EAAAzH,EACAoF,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAApG,IAEpCwH,IAAA/H,EAEA,IADAgI,EAAAU,QACA1I,EAEA,IADAiI,EAAAuH,QACAxP,EAAA,CAGA,IAFAkI,EAAA,GACAC,EAAAqH,KACArH,IAAAnI,GACAkI,EAAAtB,KAAAuB,GACAA,EAAAqH,KAEAtH,IAAAlI,IACAmI,EAAAoH,QACAvP,IACAmI,EAAAyB,GAEAzB,IAAAnI,GACA2F,GAAAmC,EACAC,EAAApH,EAAAqH,EAAAC,EAAAC,EAAAC,GACAL,EAAAC,IAEArC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EA1DA2H,IAGA3H,EA0DA,SAAA0H,KACA,IAAA1H,EAAAC,EAAAC,EAmBA,OAjBAF,EAAApC,IACAqC,EAAA2H,QACA1P,IACAgI,EAAAW,QACA3I,GACA2F,GAAAmC,EAEAA,EADAC,EAAA3G,EAAA2G,EAAAC,KAOAtC,GAAAoC,EACAA,EAAAzH,GAGAyH,EAgNA,SAAAyH,KACA,IAAAzH,EAAAC,EAAAC,EAAAC,EAAAC,EAWA,IATAJ,EAAApC,GACAqC,EAAA,GACA,KAAApI,EAAA6H,WAAA9B,KACAsC,EAAAvF,EACAiD,OAEAsC,EAAAhI,EACA,IAAAiG,IAAoCU,GAAA9D,IAEpCmF,IAAAhI,GACA+H,EAAAnB,KAAAoB,GACA,KAAArI,EAAA6H,WAAA9B,KACAsC,EAAAvF,EACAiD,OAEAsC,EAAAhI,EACA,IAAAiG,IAAsCU,GAAA9D,IAGtC,GAAAkF,IAAA/H,EAQA,GAPAL,EAAAqJ,OAAAtD,GAAA,KAAA5C,GACAkF,EAAAlF,EACA4C,IAAA,IAEAsC,EAAAhI,EACA,IAAAiG,IAAsCU,GAAA5D,IAEtCiF,IAAAhI,EAAA,CASA,IARAiI,EAAA,GACAtI,EAAAI,OAAA2F,IACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAAwCU,GAAA3D,IAExCkF,IAAAlI,GACAiI,EAAArB,KAAAsB,GACAvI,EAAAI,OAAA2F,IACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAA0CU,GAAA3D,IAG1CiF,IAAAjI,EAEA8H,EADAC,EAAA,CAAAA,EAAAC,EAAAC,IAGAvC,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EAGA,SAAAS,KACA,IAAAT,EAAAC,EAgBA,OAdAD,EAAApC,GACA,MAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA9E,EACAyC,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAAzD,IAEpC6E,IAAA/H,IACA2F,GAAAmC,EACAC,EAAA5E,KAEA2E,EAAAC,EAKA,SAAAuH,KACA,IAAAxH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAUA,GARAN,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA3E,EACAsC,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAAtD,IAEpC0E,IAAA/H,EAEA,IADAgI,EAAAS,QACAzI,EAAA,CAuBA,IAtBAiI,EAAA,GACAC,EAAAxC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAyC,EAAA7E,EACAoC,OAEAyC,EAAAnI,EACA,IAAAiG,IAAwCU,GAAAlD,IAExC0E,IAAAnI,IACAoI,EAAAK,QACAzI,EAEAkI,EADAC,EAAA,CAAAA,EAAAC,IAOA1C,GAAAwC,EACAA,EAAA7H,GAEA6H,IAAAlI,GACAiI,EAAArB,KAAAsB,GACAA,EAAAxC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAyC,EAAA7E,EACAoC,OAEAyC,EAAAnI,EACA,IAAAiG,IAA0CU,GAAAlD,IAE1C0E,IAAAnI,IACAoI,EAAAK,QACAzI,EAEAkI,EADAC,EAAA,CAAAA,EAAAC,IAOA1C,GAAAwC,EACAA,EAAA7H,GAGA4H,IAAAjI,GACA,KAAAL,EAAA6H,WAAA9B,KACAwC,EAAAxE,EACAgC,OAEAwC,EAAAlI,EACA,IAAAiG,IAA0CU,GAAAhD,IAE1CuE,IAAAlI,GACA2F,GAAAmC,EAEAA,EADAC,EAAAnE,EAAAoE,EAAAC,KAGAvC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EAGA,SAAAW,KACA,IAAAX,EAAAC,EAAAC,EAAAC,EA+BA,OA7BAH,EAAApC,IACAqC,EA2qCA,WACA,IAAAD,EAAAC,EAAAC,EAAAC,EAAAC,EAYA,GAVAJ,EAAApC,GACAqC,EAAArC,GACAsC,EAAA,GACAwG,GAAApF,KAAAzJ,EAAA8G,OAAAf,MACAuC,EAAAtI,EAAA8G,OAAAf,IACAA,OAEAuC,EAAAjI,EACA,IAAAiG,IAAoCU,GAAA8H,KAEpCxG,IAAAjI,EACA,KAAAiI,IAAAjI,GACAgI,EAAApB,KAAAqB,GACAuG,GAAApF,KAAAzJ,EAAA8G,OAAAf,MACAuC,EAAAtI,EAAA8G,OAAAf,IACAA,OAEAuC,EAAAjI,EACA,IAAAiG,IAAwCU,GAAA8H,UAIxCzG,EAAA3H,EAMA,GAJA2H,IAAAhI,IACAgI,EAAArI,EAAA2J,UAAAvB,EAAArC,MAEAqC,EAAAC,KACAhI,EAAA,CAUA,IATAgI,EAAAtC,GACAuC,EAAA,GACAyG,GAAAtF,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAAsCU,GAAAgI,KAEtCzG,IAAAlI,GACAiI,EAAArB,KAAAsB,GACAwG,GAAAtF,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAAwCU,GAAAgI,KAGxC1G,IAAAjI,IACAiI,EAAAtI,EAAA2J,UAAAtB,EAAAtC,MAEAsC,EAAAC,KACAjI,IACAiI,EA8JA,WACA,IAAAH,EAAAC,EAAAC,EAAAC,EAUA,GARAH,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAqJ,IACAhH,EAAAgH,GACArJ,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAAqI,KAEpCjH,IAAA/H,EAAA,CASA,GARAgI,EAAA,GACAkD,GAAA9B,KAAAzJ,EAAA8G,OAAAf,MACAuC,EAAAtI,EAAA8G,OAAAf,IACAA,OAEAuC,EAAAjI,EACA,IAAAiG,IAAsCU,GAAAwE,KAEtClD,IAAAjI,EACA,KAAAiI,IAAAjI,GACAgI,EAAApB,KAAAqB,GACAiD,GAAA9B,KAAAzJ,EAAA8G,OAAAf,MACAuC,EAAAtI,EAAA8G,OAAAf,IACAA,OAEAuC,EAAAjI,EACA,IAAAiG,IAA0CU,GAAAwE,UAI1CnD,EAAA3H,EAEA2H,IAAAhI,GACA2F,GAAAmC,EACAC,EAAAkH,GAAAjH,GACAF,EAAAC,IAEArC,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EA7MA6H,MACA3P,GACA2F,GAAAmC,EACAC,EAAA6G,GAAA7G,EAAAC,EAAAC,GACAH,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,EAEA,GAAAyH,IAAA9H,EAAA,CAWA,GAVA8H,EAAApC,GACAqC,EAAArC,GACAsC,EAAA,GACAwG,GAAApF,KAAAzJ,EAAA8G,OAAAf,MACAuC,EAAAtI,EAAA8G,OAAAf,IACAA,OAEAuC,EAAAjI,EACA,IAAAiG,IAAsCU,GAAA8H,KAEtCxG,IAAAjI,EACA,KAAAiI,IAAAjI,GACAgI,EAAApB,KAAAqB,GACAuG,GAAApF,KAAAzJ,EAAA8G,OAAAf,MACAuC,EAAAtI,EAAA8G,OAAAf,IACAA,OAEAuC,EAAAjI,EACA,IAAAiG,IAA0CU,GAAA8H,UAI1CzG,EAAA3H,EAMA,GAJA2H,IAAAhI,IACAgI,EAAArI,EAAA2J,UAAAvB,EAAArC,MAEAqC,EAAAC,KACAhI,EAAA,CAUA,IATAgI,EAAAtC,GACAuC,EAAA,GACAyG,GAAAtF,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAAwCU,GAAAgI,KAExCzG,IAAAlI,GACAiI,EAAArB,KAAAsB,GACAwG,GAAAtF,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAA0CU,GAAAgI,KAG1C1G,IAAAjI,IACAiI,EAAAtI,EAAA2J,UAAAtB,EAAAtC,MAEAsC,EAAAC,KACAjI,GACA2F,GAAAmC,EACAC,EAAA+G,GAAA/G,EAAAC,GACAF,EAAAC,IAEArC,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,EAIA,OAAAyH,EAvzCA8H,MACA5P,IACAgI,EAAAW,QACA3I,IACAgI,EAAA4B,GAEA5B,IAAAhI,IACAiI,EAwBA,WACA,IAAAH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAUA,GARAL,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA1G,EACAqE,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAArF,IAEpCyG,IAAA/H,EAAA,CAiBA,GAhBAgI,EAAA,GACAC,EAAAvC,IACAwC,EAAAM,QACAxI,IACAmI,EAAAmH,QACAtP,EAEAiI,EADAC,EAAA,CAAAA,EAAAC,IAOAzC,GAAAuC,EACAA,EAAA5H,GAEA4H,IAAAjI,EACA,KAAAiI,IAAAjI,GACAgI,EAAApB,KAAAqB,GACAA,EAAAvC,IACAwC,EAAAM,QACAxI,IACAmI,EAAAmH,QACAtP,EAEAiI,EADAC,EAAA,CAAAA,EAAAC,IAOAzC,GAAAuC,EACAA,EAAA5H,QAIA2H,EAAA3H,EAEA2H,IAAAhI,IACAiI,EAAAO,QACAxI,GACA2F,GAAAmC,EACAC,EAAAjE,EAAAkE,EAAAC,GACAH,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EA7FA+H,MACA7P,IACAiI,EAAA2B,GAEA3B,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAAlE,EAAAkE,EAAAC,EAAAC,KAGAvC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,GAGAyH,EA2EA,SAAAU,KACA,IAAAV,EAAAC,EAAAC,EAAAC,EA+HA,OA7HAH,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAA3B,GACAgE,EAAAhE,EACA2B,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAA3C,IAEpC+D,IAAA/H,IACA2F,GAAAmC,EACAC,EAAA9D,MAEA6D,EAAAC,KACA/H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA7D,EACAwB,OAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAAxC,IAEtC4D,IAAA/H,IACAgI,EAyGA,WACA,IAAAF,EAOA,OALAA,EAQA,WACA,IAAAA,EAAAC,EAmBA,OAjBAD,EAAApC,IACAqC,EAAA+H,QACA9P,IACA2F,GAAAmC,EACAC,EAAAhD,GAAAgD,KAEAD,EAAAC,KACA/H,IACA8H,EAAApC,IACAqC,EAAAa,QACA5I,IACA2F,GAAAmC,EACAC,EAAA/C,GAAA+C,IAEAD,EAAAC,GAGAD,EA5BAe,MACA7I,IACA8H,EAAAa,MAGAb,EAjHAgB,MACA9I,GACA,KAAAL,EAAA6H,WAAA9B,KACAuC,EAAA/D,EACAwB,OAEAuC,EAAAjI,EACA,IAAAiG,IAA0CU,GAAAxC,IAE1C8D,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAA3D,EAAA4D,KAGAtC,GAAAoC,EACAA,EAAAzH,KAOAqF,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA7D,EACAwB,OAEAqC,EAAA/H,EACA,IAAAiG,IAAwCU,GAAAxC,IAExC4D,IAAA/H,IACA2F,GAAAmC,EACAC,EAAA1D,MAEAyD,EAAAC,KACA/H,IACA8H,EAAApC,GACA,MAAA/F,EAAA6H,WAAA9B,KACAqC,EAAAzD,EACAoB,OAEAqC,EAAA/H,EACA,IAAAiG,IAA0CU,GAAApC,IAE1CwD,IAAA/H,IACAgI,EA6OA,WACA,IAAAF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAUA,GARAN,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA9C,GACAS,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAAvB,KAEpC2C,IAAA/H,EAEA,IADAgI,EAAA+H,QACA/P,EAAA,CAuBA,IAtBAiI,EAAA,GACAC,EAAAxC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAyC,EAAA7E,EACAoC,OAEAyC,EAAAnI,EACA,IAAAiG,IAAwCU,GAAAlD,IAExC0E,IAAAnI,IACAoI,EAAA2H,QACA/P,EAEAkI,EADAC,EAAA,CAAAA,EAAAC,IAOA1C,GAAAwC,EACAA,EAAA7H,GAEA6H,IAAAlI,GACAiI,EAAArB,KAAAsB,GACAA,EAAAxC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAyC,EAAA7E,EACAoC,OAEAyC,EAAAnI,EACA,IAAAiG,IAA0CU,GAAAlD,IAE1C0E,IAAAnI,IACAoI,EAAA2H,QACA/P,EAEAkI,EADAC,EAAA,CAAAA,EAAAC,IAOA1C,GAAAwC,EACAA,EAAA7H,GAGA4H,IAAAjI,GACA,KAAAL,EAAA6H,WAAA9B,KACAwC,EAAA7C,GACAK,OAEAwC,EAAAlI,EACA,IAAAiG,IAA0CU,GAAArB,KAE1C4C,IAAAlI,GACA2F,GAAAmC,EACAC,EAAAtC,GAAAuC,EAAAC,GACAH,EAAAC,IAEArC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EAtUAkI,MACAhQ,GACA,MAAAL,EAAA6H,WAAA9B,KACAuC,EAAA3D,EACAoB,OAEAuC,EAAAjI,EACA,IAAAiG,IAA8CU,GAAApC,IAE9C0D,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAA3D,EAAA4D,KAGAtC,GAAAoC,EACAA,EAAAzH,KAOAqF,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA,MAAA/F,EAAA6H,WAAA9B,KACAqC,EAAAzD,EACAoB,OAEAqC,EAAA/H,EACA,IAAAiG,IAA4CU,GAAApC,IAE5CwD,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAnD,OAEAkD,EAAAC,KACA/H,IACA8H,EAAApC,IACAqC,EAAAlD,MACA7E,IACA2F,GAAAmC,EACAC,EAAAjD,MAEAgD,EAAAC,OAOAD,EAqCA,SAAAa,KACA,IAAAb,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAUA,GARAN,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA9C,GACAS,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAAvB,KAEpC2C,IAAA/H,EAEA,IADAgI,EAAAe,QACA/I,EAAA,CAuBA,IAtBAiI,EAAA,GACAC,EAAAxC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAyC,EAAA7E,EACAoC,OAEAyC,EAAAnI,EACA,IAAAiG,IAAwCU,GAAAlD,IAExC0E,IAAAnI,IACAoI,EAAAW,QACA/I,EAEAkI,EADAC,EAAA,CAAAA,EAAAC,IAOA1C,GAAAwC,EACAA,EAAA7H,GAEA6H,IAAAlI,GACAiI,EAAArB,KAAAsB,GACAA,EAAAxC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAyC,EAAA7E,EACAoC,OAEAyC,EAAAnI,EACA,IAAAiG,IAA0CU,GAAAlD,IAE1C0E,IAAAnI,IACAoI,EAAAW,QACA/I,EAEAkI,EADAC,EAAA,CAAAA,EAAAC,IAOA1C,GAAAwC,EACAA,EAAA7H,GAGA4H,IAAAjI,GACA,KAAAL,EAAA6H,WAAA9B,KACAwC,EAAA7C,GACAK,OAEAwC,EAAAlI,EACA,IAAAiG,IAA0CU,GAAArB,KAE1C4C,IAAAlI,GACA2F,GAAAmC,EAEAA,EADAC,EAAAtC,GAAAuC,EAAAC,KAGAvC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EAGA,SAAAiB,KACA,IAAAjB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAmDA,OAjDAL,EAAApC,IACAqC,EAAAkB,QACAjJ,IACA+H,EAAA6B,GAEA7B,IAAA/H,IACAgI,EAAAmB,QACAnJ,GACAiI,EAAAvC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAwC,EAAAmC,GACA3E,OAEAwC,EAAAlI,EACA,IAAAiG,IAAwCU,GAAA2D,KAExCpC,IAAAlI,IACAmI,EAAAkB,QACArJ,EAEAiI,EADAC,EAAA,CAAAA,EAAAC,IAOAzC,GAAAuC,EACAA,EAAA5H,GAEA4H,IAAAjI,IACAiI,EAAA2B,GAEA3B,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAAwC,GAAAxC,EAAAC,EAAAC,KAGAvC,GAAAoC,EACAA,EAAAzH,KAOAqF,GAAAoC,EACAA,EAAAzH,GAGAyH,EA+FA,SAAAiI,KACA,IAAAjI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAmDA,OAjDAL,EAAApC,IACAqC,EAAAkB,QACAjJ,IACA+H,EAAA6B,GAEA7B,IAAA/H,IACAgI,EAAAmB,QACAnJ,GACAiI,EAAAvC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAwC,EAAAmC,GACA3E,OAEAwC,EAAAlI,EACA,IAAAiG,IAAwCU,GAAA2D,KAExCpC,IAAAlI,IACAmI,EAAAkB,QACArJ,EAEAiI,EADAC,EAAA,CAAAA,EAAAC,IAOAzC,GAAAuC,EACAA,EAAA5H,GAEA4H,IAAAjI,IACAiI,EAAA2B,GAEA3B,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAAyC,GAAAzC,EAAAC,EAAAC,KAGAvC,GAAAoC,EACAA,EAAAzH,KAOAqF,GAAAoC,EACAA,EAAAzH,GAGAyH,EAGA,SAAAmB,KACA,IAAAnB,EAAAC,EA8CA,OA5CAD,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAA+E,IACA1C,EAAA0C,GACA/E,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAA+D,KAEpC3C,IAAA/H,IACA2F,GAAAmC,EACAC,EAAA4C,OAEA7C,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAkF,IACA7C,EAAA6C,GACAlF,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAAkE,KAEtC9C,IAAA/H,IACA2F,GAAAmC,EACAC,EAAA+C,OAEAhD,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAqF,IACAhD,EAAAgD,GACArF,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAwCU,GAAAqE,KAExCjD,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAkD,MAEAnD,EAAAC,IAIAD,EAGA,SAAAqB,KACA,IAAArB,EAUA,OARAA,EAAAgI,QACA9P,IACA8H,EA4CA,WACA,IAAAA,EAAAC,EAAAC,EA0DA,OAxDAF,EAAApC,IACAqC,EAAAa,QACA5I,IACA2F,GAAAmC,EACAC,EAAAsD,GAAAtD,KAEAD,EAAAC,KACA/H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA7D,EACAwB,OAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAAxC,IAEtC4D,IAAA/H,IACAgI,EAAAY,QACA5I,GACA2F,GAAAmC,EACAC,EAAAuD,GAAAtD,GACAF,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAAwD,GACA7F,OAEAqC,EAAA/H,EACA,IAAAiG,IAAwCU,GAAA6E,KAExCzD,IAAA/H,IACAgI,EAAAY,QACA5I,GACA2F,GAAAmC,EACAC,EAAAsD,GAAArD,GACAF,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,KAKAyH,EAvGAoB,MACAlJ,IACA8H,EA6MA,WACA,IAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAwCA,OAtCAJ,EAAApC,IACAqC,EAAAW,QACA1I,IACAgI,EAAA0H,QACA1P,IACAgI,EAAA4B,GAEA5B,IAAAhI,IACAiI,EA8JA,WACA,IAAAH,EAAAC,EAAAC,EAiJA,OA/IAF,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAAyF,GACA9H,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAA8G,KAEpC1F,IAAA/H,IACAgI,EAAAY,QACA5I,GACA2F,GAAAmC,EACAC,EAAA2F,GAAA1F,GACAF,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAiI,IACA5F,EAAA4F,GACAjI,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAAiH,KAEtC7F,IAAA/H,IACAgI,EAAAY,QACA5I,GACA2F,GAAAmC,EACAC,EAAA2F,GAAA1F,GACAF,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAmI,IACA9F,EAAA8F,GACAnI,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAwCU,GAAAmH,KAExC/F,IAAA/H,IACAgI,EAAAY,QACA5I,GACA2F,GAAAmC,EACAC,EAAAgG,GAAA/F,GACAF,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAAiG,GACAtI,OAEAqC,EAAA/H,EACA,IAAAiG,IAA0CU,GAAAsH,KAE1ClG,IAAA/H,IACAgI,EAAAY,QACA5I,GACA2F,GAAAmC,EACAC,EAAAmG,GAAAlG,GACAF,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAyI,IACApG,EAAAoG,GACAzI,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAA4CU,GAAAyH,KAE5CrG,IAAA/H,IACAgI,EAAAY,QACA5I,GACA2F,GAAAmC,EACAC,EAAAmG,GAAAlG,GACAF,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAA2I,IACAtG,EAAAsG,GACA3I,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAA8CU,GAAA2H,KAE9CvG,IAAA/H,IACAgI,EAAAY,QACA5I,GACA2F,GAAAmC,EACAC,EAAAwG,GAAAvG,GACAF,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,QAQAyH,EAhTAmI,MACAjQ,IACAiI,EAAA2B,GAEA3B,IAAAjI,IACAkI,EA8SA,WACA,IAAAJ,EAAAC,EAAAC,EAiDA,OA/CAF,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA7D,EACAwB,OAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAAxC,IAEpC4D,IAAA/H,IACAgI,EAAAY,QACA5I,GACA2F,GAAAmC,EACAC,EAAAwG,GAAAvG,GACAF,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAAwD,GACA7F,OAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAA6E,KAEtCzD,IAAA/H,IACAgI,EAAAY,QACA5I,GACA2F,GAAAmC,EACAC,EAAAmG,GAAAlG,GACAF,EAAAC,IAMArC,GAAAoC,EACAA,EAAAzH,IAIAyH,EAhWAoI,MACAlQ,IACAkI,EAAA0B,GAEA1B,IAAAlI,GACA2F,GAAAmC,EACAC,EAAA8D,GAAA9D,EAAAC,EAAAC,EAAAC,GACAJ,EAAAC,IAEArC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,GAGAyH,EAtPAqI,IAIArI,EAGA,SAAAuB,KACA,IAAAvB,EAAAC,EAAAC,EAWA,GATAF,EAAApC,GACAqC,EAAA,GACAmD,GAAA9B,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAAoCU,GAAAwE,KAEpCnD,IAAAhI,EACA,KAAAgI,IAAAhI,GACA+H,EAAAnB,KAAAoB,GACAkD,GAAA9B,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAAwCU,GAAAwE,UAIxCpD,EAAA1H,EAQA,OANA0H,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAqD,GAAArD,IAEAD,EAAAC,EAmEA,SAAA+H,KACA,IAAAhI,EAAAC,EAAAC,EAAAC,EAiGA,OA/FAH,EAAApC,IACAqC,EAAAa,QACA5I,GACA,KAAAL,EAAA6H,WAAA9B,KACAsC,EAAAyD,GACA/F,OAEAsC,EAAAhI,EACA,IAAAiG,IAAsCU,GAAA+E,KAEtC1D,IAAAhI,GACA2F,GAAAmC,EAEAA,EADAC,EAAA4D,GAAA5D,KAGArC,GAAAoC,EACAA,EAAAzH,KAGAqF,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAA7D,EACAwB,OAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAAxC,IAEtC4D,IAAA/H,IACAgI,EAAAY,QACA5I,GACA,KAAAL,EAAA6H,WAAA9B,KACAuC,EAAAwD,GACA/F,OAEAuC,EAAAjI,EACA,IAAAiG,IAA0CU,GAAA+E,KAE1CzD,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAA6D,GAAA5D,KAGAtC,GAAAoC,EACAA,EAAAzH,KAOAqF,GAAAoC,EACAA,EAAAzH,GAEAyH,IAAA9H,IACA8H,EAAApC,GACA,KAAA/F,EAAA6H,WAAA9B,KACAqC,EAAAwD,GACA7F,OAEAqC,EAAA/H,EACA,IAAAiG,IAAwCU,GAAA6E,KAExCzD,IAAA/H,IACAgI,EAAAY,QACA5I,GACA,KAAAL,EAAA6H,WAAA9B,KACAuC,EAAAwD,GACA/F,OAEAuC,EAAAjI,EACA,IAAAiG,IAA4CU,GAAA+E,KAE5CzD,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAA4D,GAAA3D,KAGAtC,GAAAoC,EACAA,EAAAzH,KAOAqF,GAAAoC,EACAA,EAAAzH,KAKAyH,EA+CA,SAAA4H,KACA,IAAA5H,EAAAC,EAyHA,OAvHAD,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAsG,IACAjE,EAAAiE,GACAtG,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAoCU,GAAAsF,KAEpClE,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAmE,OAEApE,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAyG,IACApE,EAAAoE,GACAzG,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAsCU,GAAAyF,KAEtCrE,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAsE,OAEAvE,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAA4G,IACAvE,EAAAuE,GACA5G,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAwCU,GAAA4F,KAExCxE,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAyE,OAEA1E,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAA+G,IACA1E,EAAA0E,GACA/G,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAA0CU,GAAA+F,KAE1C3E,IAAA/H,IACA2F,GAAAmC,EACAC,EAAA4E,OAEA7E,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAkH,IACA7E,EAAA6E,GACAlH,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAA4CU,GAAAkG,KAE5C9E,IAAA/H,IACA2F,GAAAmC,EACAC,EAAA+E,OAEAhF,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAqH,IACAhF,EAAAgF,GACArH,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAA8CU,GAAAqG,KAE9CjF,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAkF,OAEAnF,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAAwH,IACAnF,EAAAmF,GACAxH,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAgDU,GAAAwG,KAEhDpF,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAqF,OAEAtF,EAAAC,KACA/H,IACA8H,EAAApC,GACA/F,EAAAqJ,OAAAtD,GAAA,KAAA2H,IACAtF,EAAAsF,GACA3H,IAAA,IAEAqC,EAAA/H,EACA,IAAAiG,IAAkDU,GAAA2G,KAElDvF,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAwF,MAEAzF,EAAAC,SASAD,EA4VA,SAAAY,KACA,IAAAZ,EAAAC,EAAAC,EAAAC,EAAAC,EAYA,GAVAJ,EAAApC,GACAqC,EAAArC,GACAsC,EAAA,GACAwG,GAAApF,KAAAzJ,EAAA8G,OAAAf,MACAuC,EAAAtI,EAAA8G,OAAAf,IACAA,OAEAuC,EAAAjI,EACA,IAAAiG,IAAoCU,GAAA8H,KAEpCxG,IAAAjI,EACA,KAAAiI,IAAAjI,GACAgI,EAAApB,KAAAqB,GACAuG,GAAApF,KAAAzJ,EAAA8G,OAAAf,MACAuC,EAAAtI,EAAA8G,OAAAf,IACAA,OAEAuC,EAAAjI,EACA,IAAAiG,IAAwCU,GAAA8H,UAIxCzG,EAAA3H,EAMA,GAJA2H,IAAAhI,IACAgI,EAAArI,EAAA2J,UAAAvB,EAAArC,MAEAqC,EAAAC,KACAhI,EAAA,CAUA,IATAgI,EAAAtC,GACAuC,EAAA,GACAyG,GAAAtF,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAAsCU,GAAAgI,KAEtCzG,IAAAlI,GACAiI,EAAArB,KAAAsB,GACAwG,GAAAtF,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAAwCU,GAAAgI,KAGxC1G,IAAAjI,IACAiI,EAAAtI,EAAA2J,UAAAtB,EAAAtC,MAEAsC,EAAAC,KACAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAA+G,GAAA/G,EAAAC,KAGAtC,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,EAGA,OAAAyH,EAqDA,SAAAc,KACA,IAAAd,EAAAC,EAAAC,EAAAC,EAAAC,EAWA,GATAJ,EAAApC,GACAqC,EAAA,GACAmD,GAAA9B,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAAoCU,GAAAwE,KAEpCnD,IAAAhI,EACA,KAAAgI,IAAAhI,GACA+H,EAAAnB,KAAAoB,GACAkD,GAAA9B,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAAwCU,GAAAwE,UAIxCpD,EAAA1H,EAEA,GAAA0H,IAAA/H,EAQA,GAPA,KAAAL,EAAA6H,WAAA9B,KACAsC,EAAAkH,GACAxJ,OAEAsC,EAAAhI,EACA,IAAAiG,IAAsCU,GAAAwI,KAEtCnH,IAAAhI,EAAA,CASA,GARAiI,EAAA,GACAiD,GAAA9B,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAAwCU,GAAAwE,KAExCjD,IAAAlI,EACA,KAAAkI,IAAAlI,GACAiI,EAAArB,KAAAsB,GACAgD,GAAA9B,KAAAzJ,EAAA8G,OAAAf,MACAwC,EAAAvI,EAAA8G,OAAAf,IACAA,OAEAwC,EAAAlI,EACA,IAAAiG,IAA4CU,GAAAwE,UAI5ClD,EAAA5H,EAEA4H,IAAAjI,GACA2F,GAAAmC,EAEAA,EADAC,EAAAqH,GAAArH,EAAAE,KAGAvC,GAAAoC,EACAA,EAAAzH,QAGAqF,GAAAoC,EACAA,EAAAzH,OAGAqF,GAAAoC,EACAA,EAAAzH,EAEA,GAAAyH,IAAA9H,EAAA,CAUA,GATA8H,EAAApC,GACAqC,EAAA,GACAmD,GAAA9B,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAAsCU,GAAAwE,KAEtCnD,IAAAhI,EACA,KAAAgI,IAAAhI,GACA+H,EAAAnB,KAAAoB,GACAkD,GAAA9B,KAAAzJ,EAAA8G,OAAAf,MACAsC,EAAArI,EAAA8G,OAAAf,IACAA,OAEAsC,EAAAhI,EACA,IAAAiG,IAA0CU,GAAAwE,UAI1CpD,EAAA1H,EAEA0H,IAAA/H,IACA2F,GAAAmC,EACAC,EAAAsH,GAAAtH,IAEAD,EAAAC,EAGA,OAAAD,EAIA,SAAA3F,GAAAoH,GACA,QAAAhO,EAAA,EAAuBA,EAAAuE,UAAAC,OAAsBxE,IAC7C,QAAAiO,KAAA1J,UAAAvE,GACAgO,EAAAC,GAAA1J,UAAAvE,GAAAiO,GAGA,OAAAD,EAMA,IAFA3J,EAAAQ,OAEAJ,GAAA0F,KAAA/F,EAAAI,OACA,OAAAH,EAMA,MAJAA,IAAAI,GAAA0F,GAAA/F,EAAAI,QACA4G,GAAA,CAAkBlG,KAAA,MAAAC,YAAA,iBAGlBmG,GAAA,KAAAb,GAAAD,MAj3Ee,GCKf,MAAAqK,EAAA,CACAC,WAAA,EACAC,SAAA,EACAnS,OAAA,GAOA,SAAAoS,EAAAC,EAAAC,GAGAD,EAAAE,iBAAAF,EAAAE,kBAAA,EACA,MAAA5U,EAAA,KAAA0U,EAAAG,UAAA,IAAAH,EAAAE,iBAAA,IACAF,EAAAE,iBAAA,GAGAF,EAAApO,YAAAwE,KAAA,CACAgK,MAAA,KAAAJ,EAAAG,UAAA,MACAE,MAAAL,EAAAM,WAAwCvT,EAASQ,MAASR,EAASS,OACnE0E,SAAA8N,EAAA9N,mBAAmDtE,EAAQE,IAC3DyS,MAAAjV,EACAkV,MAAAR,EAAAM,WAAwCvT,EAASQ,MAASR,EAASS,OACnEyG,SAAA+L,EAAA9N,SAAA+B,WAGA+L,EAAAE,mBAGAF,EAAA9N,SAAA7B,MAAA2P,EAAA9N,SAAA0H,YAAA,IAAAoG,EAAA9N,SAAA0H,YACAoG,EAAApO,YAAAwE,KAAA,CACAgK,MAAA9U,EACA+U,MAAAL,EAAAM,WAAwCvT,EAASQ,MAASR,EAASS,OACnE0E,SAAA8N,EAAA9N,mBAAmDtE,EAAQE,IAC3DyS,MAAAP,EAAA9N,SAAA7B,KACAmQ,MAAAR,EAAAM,WAAwCvT,EAASQ,MAASR,EAASS,OACnEyG,SAAA+L,EAAA9N,SAAA+B,SACA2F,WAAAoG,EAAA9N,SAAA0H,aAEAoG,EAAA9N,SAAA0H,gBAAA2B,GAEAyE,EAAA9N,SAAAC,WACA6N,EAAApO,YAAAwE,KAAA,CACAgK,MAAA9U,EACA+U,MAAAL,EAAAM,WAAwCvT,EAASQ,MAASR,EAASS,OACnE0E,SAAsBtE,EAAQE,IAC9ByS,MAAA,KACAC,MAAmBzT,EAASC,MAC5BiH,SAAA+L,EAAA9N,SAAA+B,SACA9B,SAAA6N,EAAA9N,SAAAC,WAEA6N,EAAA9N,SAAAC,cAAAoJ,GAIA,QAAAxQ,EAAA,EAAmBA,EAAAiV,EAAAS,UAAAlR,OAA8BxE,IAAA,CACjD,MAAA2V,EAAAV,EAAAS,UAAA1V,GACA,OAAAiV,EAAAxP,aACA,KAAAoP,EAAAC,WACAG,EAAAW,SAAAD,IAAAT,EAA8DlT,EAASK,MAASL,EAASI,KACzF6S,EAAAY,QAAkC7T,EAASI,KAC3C,MACA,KAAAyS,EAAAE,SACAE,EAAAW,SAAAD,IAAAT,EAA8DlT,EAASO,OAAUP,EAASM,IAC1F2S,EAAAY,QAAkC7T,EAASM,IAC3C,MACA,KAAAuS,EAAAjS,OACAqS,EAAAW,SAAmC5T,EAASY,OAC5CqS,EAAAY,QAAkC7T,EAASY,OAC3CqS,EAAA9N,SAAAC,SAAAuO,IAAAT,EAAA,YAGAD,EAAApO,YAAAwE,KAAA,CACAgK,MAAAM,EACAL,MAAAL,EAAAW,SACAzO,SAAA8N,EAAA9N,kBACAqO,MAAAjV,EACAkV,MAAAR,EAAAY,QACA3M,SAAA+L,EAAA9N,SAAA+B,WAGA+L,EAAAS,UAAA,CAAAnV,GAOA,SAAAuV,EAAAb,EAAAC,GACAD,EAAAc,wBAAAd,EAAAc,yBAAA,EACA,MAAAxV,EAAA,KAAA0U,EAAAG,UAAA,IAAAH,EAAAc,wBAAA,IACAd,EAAAc,0BACAd,EAAApO,YAAAwE,KAAA,CACAgK,MAAA9U,EACA+U,MAAAL,EAAAM,WAAoCvT,EAASQ,MAASR,EAASS,OAC/D0E,SAAA8N,EAAA9N,mBAA+CtE,EAAQE,IACvDyS,MAAAP,EAAA9N,SAAA7B,KACAmQ,MAAAR,EAAAM,WAAoCvT,EAASQ,MAASR,EAASS,OAC/DyG,SAAA+L,EAAA9N,SAAA+B,SACA2F,WAAAoG,EAAA9N,SAAA0H,aAEAoG,EAAA9N,SAAA0H,gBAAA2B,EAGA,QAAAxQ,EAAA,EAAmBA,EAAAiV,EAAAS,UAAAlR,OAA8BxE,IAAA,CACjD,MAAA2V,EAAAV,EAAAS,UAAA1V,GACA,OAAAiV,EAAAxP,aACA,KAAAoP,EAAAC,WACAG,EAAAW,SAAAD,IAAAT,EAA8DlT,EAASK,MAASL,EAASI,KACzF6S,EAAAY,QAAkC7T,EAASI,KAC3C,MACA,KAAAyS,EAAAE,SACAE,EAAAW,SAAAD,IAAAT,EAA8DlT,EAASO,OAAUP,EAASM,IAC1F2S,EAAAY,QAAkC7T,EAASM,IAC3C,MACA,KAAAuS,EAAAjS,OACAqS,EAAAW,SAAmC5T,EAASY,OAC5CqS,EAAAY,QAAkC7T,EAASY,OAC3CqS,EAAA9N,SAAAC,SAAAuO,IAAAT,EAAA,YAGAD,EAAApO,YAAAwE,KAAA,CACAgK,MAAAM,EACAL,MAAAL,EAAAW,SACAzO,SAAA8N,EAAA9N,kBACAqO,MAAAjV,EACAkV,MAAAR,EAAAY,QACA3M,SAAA+L,EAAA9N,SAAA+B,WAGA+L,EAAAS,UAAA,CAAAnV,GAOA,SAAAyV,EAAAf,EAAA1U,EAAA0V,GACA,IAAAC,EACA,QAAAzQ,EAAA,EAA6BA,GAAA,EAAkBA,GAAA,EAC/C,GAAAwQ,EAAAE,aAAA1Q,GACAwQ,EAAAG,MAAA3Q,mBACAwQ,EAAAG,MAAAC,sBAAA5Q,GAAA,CACAwQ,EAAAG,MAAAC,sBAAAJ,EAAAG,MAAAC,sBAAA5Q,EACAyQ,KAAA,CACA3V,OACA2E,KAAA,SAEA,QAAAlF,EAAA,EAAAsW,EAAAL,EAAAG,MAAAG,SAAA/R,OAA8DxE,EAAAsW,EAAOtW,IACrEyF,IAAAoP,EAAAjS,OACAqS,EAAApO,YAAAwE,KAAA,CACAgK,MAAAa,EACAZ,MAA+BtT,EAASY,OACxCuE,SAAkCtE,EAAQE,IAC1CyS,MAAAS,EAAAG,MAAAG,SAAAvW,GACAyV,MAA+BzT,EAASY,UAIxCqS,EAAApO,YAAAwE,KAAA,CACAgK,MAAAa,EACAZ,MAAA7P,IAAAoP,EAAAE,SAAwE/S,EAASS,OAAUT,EAASQ,MACpG2E,SAAkCtE,EAAQE,IAC1CyS,MAAAS,EAAAG,MAAAG,SAAAvW,GACAyV,MAAAhQ,IAAAoP,EAAAE,SAAwE/S,EAASS,OAAUT,EAASQ,QAEpGyS,EAAApO,YAAAwE,KAAA,CACAgK,MAAAa,EACAZ,MAAA7P,IAAAoP,EAAAE,SAAwE/S,EAASM,IAAON,EAASI,KACjG+E,SAAkCtE,EAAQE,IAC1CyS,MAAAS,EAAAG,MAAAG,SAAAvW,GACAyV,MAAAhQ,IAAAoP,EAAAE,SAAwE/S,EAASM,IAAON,EAASI,SAajG,SAAAoU,EAAAjW,EAAA+S,GAQA,IAPA,IAAAA,IACAA,EAAA/S,EAAAkW,MAAA,eAEAlW,IAAAwN,UAAA,EAAAxN,EAAAiE,OAAA8O,EAAA,GAAA9O,QACA8O,EAAAnK,SAAAmK,EAAA,GAAAvF,UAAA,MAGAuF,EACA,OAAA/S,GAEA,IAEAP,EAFA0W,EAAAnW,EAAAkW,MAAA,QACAE,EAAA,GAEA,GAAAD,EAEA,IADAnW,IAAAwN,UAAA,EAAAxN,EAAAiE,OAAAkS,EAAA,GAAAlS,QACAxE,EAAAmJ,SAAAuN,GAAiC1W,GAAAsT,EAAYtT,IAC7C2W,EAAAtL,KAAA9K,EAAAP,QAKA,IADA2W,EAAAtL,KAAA9K,GACAP,EAAA,EAAmBA,GAAAsT,EAAYtT,IAC/B2W,EAAAtL,KAAA9K,EAAAP,GAGA,OAAA2W,EAOA,SAAAC,EAAA3B,EAAAvP,EAAAmR,GACA,MAAA3B,EAAA2B,IAAAvR,KAAA,KACAiR,EAAA,GACA,IACAN,EADAa,EAAA,GAEA5B,IACAxP,EAAA2F,KAAA,CAAsB/F,KAAA4P,IACtB4B,EAAAzL,KAAA6J,IAEA,QAAAlV,EAAA,EAAmBA,EAAA0F,EAAAlB,OAAoBxE,IAAA,CACvC,IAAA+W,EAAArR,EAAA1F,GACA,IAAA8L,MAAAkL,QAAAD,MAAAlV,eAAA,SACAiK,MAAAkL,QAAAD,MAAA,GAAAzR,OAAAyR,EAAA,GAAA5P,SAAA,CACA,MAAA8P,EAAAnL,MAAAkL,QAAAD,KAAA,CAAAA,GACA,QAAAG,EAAA,EAA2BA,EAAAD,EAAAzS,OAAkB0S,IAAA,CAE7C,MAAAC,EAAA,OADAJ,EAAAE,EAAAC,IACA,GAAAH,EAAAzR,KAAAkR,EAAAO,EAAAzR,KAAAyR,EAAAzD,OAAA,OACA,QAAAxS,EAAA,EAA+BA,EAAAqW,EAAA3S,OAAsB1D,IAAA,CACrD,MAAAsW,EAAAD,EAAArW,GAsBA,GArBAgW,EAAAzL,KAAA+L,GAKAA,IAAAlC,IACAqB,EAAAlL,KAAA+L,IACAnB,EAAAhB,EAAAsB,SAAAa,MAEAnB,EAAA,CAAuCE,aAAA,GACvClB,EAAAsB,SAAAa,GAAAnB,GAEAA,EAAAE,aAAAF,EAAAE,aAAAlB,EAAAxP,YACAwQ,EAAAG,OACAJ,EAAAf,EAAAmC,EAAAnB,SAOAzF,IAAAyE,EAAAS,gBAAAlF,IAAA4G,GAAAnC,EAAA9N,UACA,SAAA8N,EAAA9N,kBACA,QAAArF,EAAA,EAA2CA,EAAAmT,EAAAS,UAAAlR,OAA8B1C,IAAA,CACzE,MAAA6T,EAAAV,EAAAS,UAAA5T,GACA,OAAAmT,EAAAxP,aACA,KAAAoP,EAAAC,WACAG,EAAAW,SAAAD,IAAAT,EAAsFlT,EAASK,MAASL,EAASI,KACjH6S,EAAAY,QAAAuB,IAAAlC,EAAoFlT,EAASI,KAAQJ,EAASK,MAC9G,MACA,KAAAwS,EAAAE,SACAE,EAAAW,SAAAD,IAAAT,EAAsFlT,EAASO,OAAUP,EAASM,IAClH2S,EAAAY,QAAAuB,IAAAlC,EAAoFlT,EAASM,IAAON,EAASO,OAC7G,MACA,KAAAsS,EAAAjS,OACAqS,EAAAW,SAA2D5T,EAASY,OACpEqS,EAAAY,QAA0D7T,EAASY,OACnEqS,EAAA9N,SAAAC,SAAAuO,EAAAV,EAAA9N,SAAAC,UAAA,YAGA6N,EAAApO,YAAAwE,KAAA,CACAgK,MAAAM,EACAL,MAAAL,EAAAW,SACAzO,SAAA8N,EAAA9N,kBACAqO,MAAA4B,EACA3B,MAAAR,EAAAY,QACAhH,WAAAoG,EAAA9N,SAAA0H,WACAzH,SAAA,YAAA6N,EAAA9N,SAAAC,UAAA6N,EAAA9N,SAAAC,UAAA6N,EAAA9N,SAAAC,SAAA6N,EAAA9N,SAAAC,SACA8B,SAAA+L,EAAA9N,SAAA+B,WASA,MAAArC,EAAAkQ,EAAAlQ,YACA,GAAAA,EACA,QAAApF,EAAA,EAAuCA,EAAAoF,EAAArC,OAAwB/C,IAC/DwT,EAAAW,SAAAX,EAAAM,WAAoEvT,EAASQ,MAASR,EAASS,OAC/FwS,EAAAY,QAAAhP,EAAApF,GAAA6D,MAAAuB,EAAApF,GAAAoN,WACAhI,EAAApF,GAAA6M,WAAA2G,EAAAW,SACA/O,EAAApF,GAAA4V,SAA+DrV,EAASG,SAAYH,EAASC,MAC7FgT,EAAApO,YAAAwE,KAAA,CACAgK,MAAA+B,EACA9B,MAAAL,EAAAW,SACAzO,SAAAN,EAAApF,GAAA0F,SACAqO,MAAA3O,EAAApF,GAAA6D,KACAmQ,MAAAR,EAAAY,QACAhH,WAAAhI,EAAApF,GAAAoN,WACAzH,SAAAP,EAAApF,GAAA2F,SACA8B,SAAArC,EAAApF,GAAAyH,WAQA6N,EAAArR,SACAkR,EAAA3B,EAAA8B,EAAArR,QAAAqR,SAKA,MAAAA,IACA9B,EAAAS,UAAAoB,EACAA,EAAA,GACA7B,EAAA9N,SAAA4P,EAAA,QACAvG,IAAAyE,EAAAS,YACAT,EAAA9N,SAAAyH,cACAoG,EAAAC,EAAAC,GAEAD,EAAA9N,SAAA0H,YACAiH,EAAAb,EAAAC,KAMA,GAAAA,EAAA,CAEA,GADAe,EAAAhB,EAAAsB,SAAArB,IAKA,GAAAe,EAAAG,MAAA,CACA,MAAAkB,EAAA,IAAApT,MAAA,kBAAAgR,EAAA,8BAEA,MADAoC,EAAA1T,OAAAiT,EAAAxP,cAAA,EACAiQ,QANArB,EAAA,CAAuBE,aAAAlB,EAAAxP,aACvBwP,EAAAsB,SAAArB,GAAAe,EAOAA,EAAAG,MAAA,CACA3Q,YAAAwP,EAAAxP,YACA4Q,sBAAApB,EAAAxP,YACA8Q,YAEAP,EAAAf,EAAAC,EAAAe,IAIA,MAAAsB,EAAA,CACA,WACA,UACA,SACA,SACA,SACA,WA2Re,IAAAC,EAnRf,MAeAC,iBAAAC,EAAApT,GACA,OAAAoT,EAAAlT,QACAF,KAAAqT,UAAA,IAAAD,EAAAE,QAAA,MACA,SAEA,MAAAjB,EAAArS,KAAAqT,SAAoDzJ,EAAS/J,MAAAuT,GAAuBrU,EAAMc,MAAAuT,GAC1F,GAAApT,GAAA,QAAAA,EAAAuT,UACA,OAAAlB,GAEA,IAAA1B,EAAA,CACApO,YAAA,GACAuO,WAAA9Q,IAAA8Q,eAAA5E,IAAA,EACA+F,UAAAjS,IAAAiS,cAAA/F,IAAA,IAEA,iBAAAmG,EAAAzR,KACA,QAAAzD,EAAA,EAA2BA,EAAAkV,EAAApI,WAAA/J,OAA2B/C,IAAA,CACtD,MAAAgN,EAAAkI,EAAApI,WAAA9M,GACA,QAAArB,EAAA,EAA+BA,EAAAqO,EAAA9H,WAAAnC,OAA4BpE,IAAA,CAC3D,MAAA0X,EAAArJ,EAAA9H,WAAAvG,GACA6U,EAAApO,YAAAwE,KAAA,CACAgK,MAAAsB,EAAArR,KACAgQ,MAAA7G,OACAtH,SAAA2Q,EAAA3Q,SACAqO,MAAAsC,EAAAxS,KACAmQ,MAAAqC,EAAAxJ,WAAAG,OACAI,WAAAiJ,EAAAjJ,WACAzH,SAAA0Q,EAAA1Q,SACA8B,SAAA4O,EAAA5O,iBAKA,OAAAyN,EAAAlR,aACA,iBACAwP,EAAAxP,YAAAoP,EAAAC,WACAG,EAAAM,YAAA,EACAqB,EAAA3B,EAAA0B,EAAAjR,QAAA,MACA,MACA,eACAuP,EAAAxP,YAAAoP,EAAAE,SACA6B,EAAA3B,EAAA0B,EAAAjR,QAAA,MACA,MACA,eACAuP,EAAAxP,YAAAoP,EAAAC,WACAG,EAAAM,YAAA,EACAqB,EAAA3B,EAAA0B,EAAAjR,QAAA,MAOAkR,EANA3B,EAAA,CACApO,YAAAoO,EAAApO,YACAuO,UAAAH,EAAAG,UACAmB,SAAAtB,EAAAsB,SACA9Q,YAAAoP,EAAAE,UAEA4B,EAAAjR,QAAA,MACA,MACA,aACAuP,EAAAxP,YAAAoP,EAAAjS,OACAgU,EAAA3B,EAAA0B,EAAAjR,QAAA,MAIA,OAAAuP,EAAApO,YAiBA4Q,aAAAC,EAAApT,GACA,MAAAyT,EAAAzT,KAAAyT,cAAAzT,EAAAyT,cAAA,KACA,IAAAjM,MAAAkL,QAAAU,MAAAE,QAAAG,GAAA,EACA,IACA,OAAAnY,KAAAoY,UAAAN,EAAApT,GAEA,MAAAgT,GAEA,MADAA,EAAAW,OAAAP,EACAJ,EAOA,IAAAY,EADAR,EAAA5L,MAAAkL,QAAAU,KAAA,CAAAA,GAEA,IAEA/T,EAFAkD,EAAA,GACAuO,EAAA,EAEA,MAAA+C,EAAA,CACA/C,YACAuC,SAAArT,KAAAqT,SACAS,QAAA9T,QAAAkM,IAAAlM,EAAA8T,QAAA9T,EAAA8T,OACAP,UAAAvT,IAAAuT,eAAArH,EACA+F,SAAA,IAEA,IACA,QAAAvW,EAAA,EAA2BA,EAAA0X,EAAAlT,OAAyBxE,IAAA,CACpDkY,EAAAR,EAAA1X,GAAAqY,MAAAN,GACA,QAAAzB,EAAA,EAA+BA,EAAA4B,EAAA1T,OAAkB8R,IACjD3S,EAAAuU,EAAA5B,GACAlB,IACA+C,EAAA/C,YACA+C,EAAAC,SACAzU,IAAA2U,SAEAH,EAAAC,QAAAzU,EAAAa,UACAqC,IAAAlB,OAAA/F,KAAAoY,UAAArU,EAAAwU,MAKA,MAAAb,GAGA,MAFAA,EAAAW,OAAAtU,EACA2T,EAAA3T,KAAAyR,EACAkC,EAEA,OAAAzQ,EA0CA4Q,qBAAAC,EAAApT,GACA,MAAAyT,EAAAzT,KAAAyT,cAAAzT,EAAAyT,cAAA,KACAQ,EAAAjU,IAAAiU,YAAA/H,EACAkH,EAAA5L,MAAAkL,QAAAU,KAAA,CAAAA,GACA,MAAAc,EAAA,GAEA,IADA,IAAAjX,EACA0M,EAAA,EAAuBA,EAAAyJ,EAAAlT,OAAyByJ,IAAA,CAChD,MAAAiK,EAAAR,EAAAzJ,GAAAoK,MAAAN,GACA,QAAA/X,EAAA,EAA2BA,EAAAkY,EAAA1T,OAAkBxE,IAAA,CAC7C,MAAA2D,EAAAuU,EAAAlY,GACA,QAAAK,EAAA,EAA+BA,EAAAkX,EAAA/S,OAA+BnE,IAC9D,QAAA0B,EAAA,EAAmCA,GAAAwW,EAAA,KAAsBxW,IAAA,CACzD,MAAA0W,EAAAlB,EAAAlX,GACAqY,GAAA,IAAA3W,EAAA,GAAAwW,GAAAE,EACA,OAAA9U,EAAAiU,QAAA,KAAAc,EAAA,MACA,MAAAzB,EAAAtT,EAAAoK,UAAA,EAAA2K,EAAAlU,QAAA6T,MAAA,KACA,QAAA/B,EAAA,EAA2CA,EAAAW,EAAAzS,OAAkB8R,IAAA,CAC7DkC,EAAAC,GAAAD,EAAAC,IAAA,GACA,MAAA1B,EAAAE,EAAAX,GAAA+B,MAAA,KACAM,EAAAnC,EAAAO,EAAA,OACA,QAAAjW,EAAA,EAA+CA,EAAA6X,EAAAnU,OAAkB1D,IACjE0X,EAAAC,GAAAE,EAAA7X,IAAAiW,EAAAvS,OAAA,EAAAuS,EAAA,YAIA,IAAApT,EAAAiU,QAAA,KAAAc,EAAA,OACAF,EAAAC,GAAA9U,EAAAoK,UAAA,EAAA2K,EAAAlU,WAMA,GAAAgU,EAAAI,SAAA,CACA,MAAAA,EAAAJ,EAAAI,SACA,IAAAC,EAAAD,EAAA,gBACAC,IACAA,IAAAR,MAAA,KACAO,EAAA,gBAAAzP,SAAA0P,EAAA,IAAA1P,SAAA0P,EAAA,UAEArI,IAAAoI,EAAAE,SACAF,EAAAE,OAAA,cAAAF,EAAAE,QAAA3P,SAAAyP,EAAAE,cAEAtI,IAAAoI,EAAAG,QACAH,EAAAG,MAAA,cAAAH,EAAAG,OAAA5P,SAAAyP,EAAAG,aAEAvI,IAAAoI,EAAA,gBACAA,EAAA,cAAAzP,SAAAyP,EAAA,qBAEApI,IAAAoI,EAAA,eACAA,EAAA,aAAAzP,SAAAyP,EAAA,oBAEApI,IAAAoI,EAAA,gBACAA,EAAA,cAAAzP,SAAAyP,EAAA,qBAEApI,IAAAoI,EAAA,eACAA,EAAA,aAAAzP,SAAAyP,EAAA,eAGA,GAAAJ,EAAAQ,OACA,IAAAzX,KAAAiX,EAAAQ,OAAA,CACA,MAAAD,EAAA,cAAAP,EAAAQ,OAAAzX,IAAA4H,SAAAqP,EAAAQ,OAAAzX,IACAiX,EAAAQ,OAAAzX,GAAAwX,QACAvI,IAAAuI,GAAAE,MAAAF,YACAP,EAAAQ,OAAAzX,GAIA,GAAAiX,EAAAU,QACA,IAAA3X,KAAAiX,EAAAU,QAAA,CACA,MAAAJ,EAAA,cAAAN,EAAAU,QAAA3X,IAAA4H,SAAAqP,EAAAU,QAAA3X,IACAiX,EAAAU,QAAA3X,GAAAuX,QACAtI,IAAAsI,GAAAG,MAAAH,YACAN,EAAAU,QAAA3X,GAIA,GAAAiX,EAAAW,QAAA,CACA,MAAAlY,EAAAmY,KAAAjV,MAAAqU,EAAAW,SAEA,GADAX,EAAAW,QAAAlY,EACA6K,MAAAkL,QAAA/V,IACA,QAAAoY,EAAA,EAAAC,EAAArY,EAAAuD,OAAoD6U,EAAAC,EAAYD,IAChE,GAAAJ,MAAAhY,EAAAoY,IAAA,QACAb,EAAAW,QACA,iBAGa3I,IAAAvP,GAAAgY,MAAAhY,YACbuX,EAAAW,QAGA,OAAAX,ICjoBO,SAAAe,EAAAC,GACP,WAAAC,EAEA,IAAAA,EAAA,WACA,SAAAA,IACA7Z,KAAA8Z,MAAA,GACA9Z,KAAA+Z,MAAA,GA+GA,OA1GAF,EAAA7X,UAAAgY,KAAA,WACA,OAAAha,KAAA+Z,MAAAnV,QAKAiV,EAAA7X,UAAAiY,MAAA,WACA,WAAAja,KAAA+Z,MAAAnV,QAOAiV,EAAA7X,UAAAkY,OAAA,SAAAJ,GACA,OAAA9Z,KAAA+Z,MAAAD,IAOAD,EAAA7X,UAAAmY,SAAA,SAAAxY,GACA,YAAAiP,IAAA5Q,KAAA8Z,MAAAnY,EAAAyY,OAOAP,EAAA7X,UAAAqY,KAAA,SAAA1Y,GACA,IAAAvB,EAAAJ,KAAA8Z,MAAAnY,EAAAyY,MACA,YAAAxJ,IAAAxQ,OAAAwQ,EAAA5Q,KAAA+Z,MAAA3Z,IAWAyZ,EAAA7X,UAAAsY,WAAA,SAAA3Y,EAAAhC,GACA,IAAAS,EAAAJ,KAAA8Z,MAAAnY,EAAAyY,MACA,QAAAxJ,IAAAxQ,EAAA,CACA,IAAAma,EAAA,IAAAC,EAAA7Y,EAAAhC,KAGA,OAFAK,KAAA8Z,MAAAnY,EAAAyY,MAAApa,KAAA+Z,MAAAnV,OACA5E,KAAA+Z,MAAAtO,KAAA8O,GACAA,EAGA,OAAAva,KAAA+Z,MAAA3Z,IAWAyZ,EAAA7X,UAAAyY,OAAA,SAAA9Y,EAAAN,GACA,IAAAkZ,EAAA,IAAAC,EAAA7Y,EAAAN,GACAjB,EAAAJ,KAAA8Z,MAAAnY,EAAAyY,MAQA,YAPAxJ,IAAAxQ,GACAJ,KAAA8Z,MAAAnY,EAAAyY,MAAApa,KAAA+Z,MAAAnV,OACA5E,KAAA+Z,MAAAtO,KAAA8O,IAGAva,KAAA+Z,MAAA3Z,GAAAma,EAEAA,GAOAV,EAAA7X,UAAA0Y,MAAA,SAAA/Y,GACA,IAAAvB,EAAAJ,KAAA8Z,MAAAnY,EAAAyY,MACA,QAAAxJ,IAAAxQ,EAAA,CAGAJ,KAAA8Z,MAAAnY,EAAAyY,WAAAxJ,EACA,IAAA2J,EAAAva,KAAA+Z,MAAA3Z,GACAua,EAAA3a,KAAA+Z,MAAAa,MAKA,OAJAL,IAAAI,IACA3a,KAAA+Z,MAAA3Z,GAAAua,EACA3a,KAAA8Z,MAAAa,EAAAE,MAAAT,MAAAha,GAEAma,IAKAV,EAAA7X,UAAA8Y,KAAA,WAEA,IADA,IAAAA,EAAA,IAAAjB,EACAzZ,EAAA,EAAuBA,EAAAJ,KAAA+Z,MAAAnV,OAAuBxE,IAAA,CAC9C,IAAAma,EAAAva,KAAA+Z,MAAA3Z,GAAA0a,OACAA,EAAAf,MAAA3Z,GAAAma,EACAO,EAAAhB,MAAAS,EAAAM,MAAAT,MAAAha,EAEA,OAAA0a,GAEAjB,EAlHA,GAyHAW,EAAA,WAOA,SAAAA,EAAAK,EAAAE,GACA/a,KAAA6a,QACA7a,KAAA+a,SAMA,OADAP,EAAAxY,UAAA8Y,KAAA,WAAuC,WAAAN,EAAAxa,KAAA6a,MAAA7a,KAAA+a,SACvCP,EAfA,GCrHIQ,EAAQ,WACZ,SAAAC,EAAAta,QACA,IAAAA,IAA8BA,EAAA,IAC9BX,KAAAkb,OAAA,EACAlb,KAAAmb,SAAA,KACAnb,KAAAob,IAAAC,IACArb,KAAAsb,MAAA3a,EAgHA,OA1GAsa,EAAAM,QAAA,SAAA1P,EAAAC,GACA,OAAAD,EAAAuO,KAAAtO,EAAAsO,MAMAa,EAAAjZ,UAAAoY,GAAA,WACA,OAAApa,KAAAob,KAOAH,EAAAjZ,UAAArB,KAAA,WACA,OAAAX,KAAAsb,OAOAL,EAAAjZ,UAAAwZ,QAAA,SAAA7a,GACAX,KAAAsb,MAAA3a,GAMAsa,EAAAjZ,UAAAqT,QAAA,WACA,OAAArV,KAAAmb,UAMAF,EAAAjZ,UAAAyZ,WAAA,SAAApG,GACArV,KAAAmb,SAAA9F,GAOA4F,EAAAjZ,UAAAX,MAAA,WACA,OAAArB,KAAAkb,QAMAD,EAAAjZ,UAAA0Z,SAAA,SAAAra,GACArB,KAAAkb,OAAA7Z,GASA4Z,EAAAjZ,UAAA2Z,KAAA,SAAAta,GACA,WAAmBua,EAAU5b,KAAAqB,IAS7B4Z,EAAAjZ,UAAA6Z,MAAA,SAAAxa,GACA,WAAmBua,EAAU5b,KAAA,iBAAAqB,KAAA,IAAAA,KAQ7B4Z,EAAAjZ,UAAA8Z,SAAA,SAAAC,GACA,WAAmBH,EAAU,CAAAG,EAAA/b,QAQ7Bib,EAAAjZ,UAAAga,OAAA,SAAAD,GACA,WAAmBH,EAAU,GAAAG,EAAA/b,QAM7Bib,EAAAjZ,UAAAia,OAAA,WACA,OACAtb,KAAAX,KAAAsb,MACAja,MAAArB,KAAAkb,SAGAD,EAAAjZ,UAAAsK,SAAA,WACA,OAAAtM,KAAAmb,SAAA,IAAAnb,KAAAsb,MAAA,IAAAtb,KAAAkb,OAAA,KAEAD,EAtHY,GA6HZI,EAAA,ECnHAO,EAAA,WACA,SAAAA,IACA,IAAAM,EAAAC,EAAAxX,WACA3E,KAAAoc,OAAAF,EAAAG,MACArc,KAAAsc,UAAAJ,EAAA1U,SAmFA,OA3EAoU,EAAA5Z,UAAAqa,MAAA,WACA,OAAArc,KAAAoc,QAMAR,EAAA5Z,UAAAwF,SAAA,WACA,OAAAxH,KAAAsc,WAQAV,EAAA5Z,UAAAX,MAAA,WAEA,IADA,IAAAkb,EAAAvc,KAAAsc,UACAlc,EAAA,EAAAyB,EAAA7B,KAAAoc,OAAApC,OAA+C5Z,EAAAyB,EAAOzB,IAAA,CACtD,IAAAma,EAAAva,KAAAoc,OAAAlC,OAAA9Z,GACAmc,GAAAhC,EAAAM,MAAAxZ,QAAAkZ,EAAAQ,OAEA,OAAAwB,GASAX,EAAA5Z,UAAA2Z,KAAA,SAAAta,GACA,WAAAua,EAAA5b,KAAAqB,IASAua,EAAA5Z,UAAA6Z,MAAA,SAAAxa,GACA,WAAAua,EAAA5b,KAAA,iBAAAqB,KAAA,IAAAA,KAQAua,EAAA5Z,UAAA8Z,SAAA,SAAAC,GACA,WAAAH,EAAA,CAAAG,EAAA/b,QAQA4b,EAAA5Z,UAAAga,OAAA,SAAAD,GACA,WAAAH,EAAA,GAAAG,EAAA/b,QAEA4b,EAAA5Z,UAAAwa,WAAA,WACA,UAAAxc,KAAAoc,OAAApC,QAEA4B,EAAA5Z,UAAAsK,SAAA,WACA,IAAAiQ,EAAAvc,KAAAoc,OAAArC,MAAA1R,IAAA,SAAAkS,EAAAkC,GACA,OAAAlC,EAAAQ,OAAA,IAAAR,EAAAM,MAAAvO,aACS9C,KAAA,OAKT,OAJAxJ,KAAAwc,cAAA,IAAAxc,KAAAsc,YACAC,GAAA,OAEAA,GAAAvc,KAAAsc,WAGAV,EAvFA,GA8FA,SAAAO,EAAAO,GAIA,IAHA,IAAAlV,EAAA,EACA7H,EAAA,WAA+B,UAC/B0c,EAAgB1C,EAAUqB,EAAQO,SAClCnb,EAAA,EAAAyB,EAAA6a,EAAA9X,OAAoCxE,EAAAyB,IAAOzB,EAAA,CAC3C,IAAA+W,EAAAuF,EAAAtc,GACA,oBAAA+W,EACA3P,GAAA2P,OAEA,GAAAA,aAAiC6D,EACjCqB,EAAA/B,WAAAnD,EAAAxX,GAAAob,QAAA,OAEA,GAAA5D,aAAAyE,EAAA,CACApU,GAAA2P,EAAA3P,WAEA,IADA,IACAkP,EAAA,EAAArI,GADAsO,EAAAxF,EAAAkF,SACArC,OAA8CtD,EAAArI,EAAOqI,IAAA,CACrD,IAAAkG,EAAAD,EAAAzC,OAAAxD,GACA2F,EAAA/B,WAAAsC,EAAA/B,MAAAlb,GAAAob,QAAA6B,EAAA7B,YAGA,MAAA5D,aAAAjL,OAyBA,UAAA5H,MAAA,gCAAA6S,GAxBA,OAAAA,EAAAvS,OACA,UAAAN,MAAA,4BAEA,IAAAjD,EAAA8V,EAAA,GACA0F,EAAA1F,EAAA,GACA,oBAAA9V,EACA,UAAAiD,MAAA,iCAEA,GAAAuY,aAAkC7B,EAClCqB,EAAA/B,WAAAuC,EAAAld,GAAAob,QAAA1Z,MAEA,MAAAwb,aAAAjB,GASA,UAAAtX,MAAA,iDARAkD,GAAAqV,EAAArV,WAAAnG,EACA,IAAAsb,EACA,IAAAjG,EAAA,EAAArI,GADAsO,EAAAE,EAAAR,SACArC,OAAkDtD,EAAArI,EAAOqI,IAAA,CACzDkG,EAAAD,EAAAzC,OAAAxD,GACA2F,EAAA/B,WAAAsC,EAAA/B,MAAAlb,GAAAob,QAAA6B,EAAA7B,OAAA1Z,KAWA,OAAYgb,QAAA7U,YC5JZ,ICUOsV,EDVPC,EAAA,WACA,SAAAA,KA0CA,OA/BAA,EAAArb,OAAA,SAAAmK,EAAAC,EAAArL,EAAAuc,QACA,IAAAA,IAA2BA,EAAA,GAC3B,IAAAT,EAAA,EAIA,OAHAA,GAAA,IAAAU,KAAAC,IAAA,EAAAD,KAAAE,IAAA,IAAAtR,EAAAmR,IACAT,GAAA,IAAAU,KAAAC,IAAA,EAAAD,KAAAE,IAAA,IAAArR,EAAAkR,IACAT,GAAAU,KAAAC,IAAA,EAAAD,KAAAE,IAAA,IAAA1c,EAAAuc,KAOAD,EAAAK,KAAA,SAAA/b,GACA,OAAA4b,KAAAC,IAAA,EAAAD,KAAAE,IAAAJ,EAAAM,SAAAhc,KAKA0b,EAAAM,SAAAN,EAAArb,OAAA,aAIAqb,EAAAO,OAAAP,EAAArb,OAAA,OAIAqb,EAAAQ,OAAAR,EAAArb,OAAA,OAIAqb,EAAAS,KAAAT,EAAArb,OAAA,OACAqb,EA3CA,ICWA,SAAAD,GACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAHA,CAICA,MAAA,KAaD,IC2rBAW,ED3rBIC,EAAU,WACd,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,QACA,IAAAA,IAAkCA,EAAYhB,EAAQM,UACtDrd,KAAAob,IAAA4C,IACAhe,KAAAie,UAAAJ,EACA7d,KAAAke,UAAyBnB,EAAQK,KAAAW,GAEjC/d,KAAAme,iBADAvN,IAAAkN,GAAAF,aAA0DhC,EAC1DgC,EAGAA,EAAA/B,MAAAiC,GA4CA,OArCAH,EAAApC,QAAA,SAAA1P,EAAAC,GACA,OAAAD,EAAAuO,KAAAtO,EAAAsO,MAMAuD,EAAA3b,UAAAoY,GAAA,WACA,OAAApa,KAAAob,KAOAuC,EAAA3b,UAAA4b,WAAA,WACA,OAAA5d,KAAAme,aAOAR,EAAA3b,UAAAoc,GAAA,WACA,OAAApe,KAAAie,WAOAN,EAAA3b,UAAA+b,SAAA,WACA,OAAA/d,KAAAke,WAEAP,EAAA3b,UAAAsK,SAAA,WACA,OAAAtM,KAAAme,YAAA7R,WAAA,oBAAAtM,KAAAie,WAAA,OAAAje,KAAAke,UAAA5R,WAAA,KAEAqR,EAtDc,GA6DdK,EAAA,EClFIK,EAAM,WAIV,SAAAC,IACAte,KAAAue,OAgrBW5E,EAAU+D,EAAUnC,SA/qB/Bvb,KAAAwe,QAsrBW7E,EAASxY,EAAAoa,SArrBpBvb,KAAAye,QA4rBW9E,EAAUqB,EAAQO,SA3rB7Bvb,KAAA0e,SAksBW/E,EAAUqB,EAAQO,SAjsB7Bvb,KAAA2e,gBAAA,GACA3e,KAAA4e,WAAA,IAA8BC,EAC9B7e,KAAA8e,YAAA,KACA9e,KAAA+e,QAAA,EAypBA,OA/oBAT,EAAAtc,UAAAgd,iBAAA,SAAAC,EAAApB,EAAAC,EAAAC,QACA,IAAAA,IAAkCA,EAAYhB,EAAQM,UACtD,IAAA6B,EAAA,IAAqBxB,EAAUuB,EAAApB,EAAAC,EAAAC,GAE/B,OADA/d,KAAAmf,cAAAD,GACAA,GAOAZ,EAAAtc,UAAAmd,cAAA,SAAAC,GAEA,QAAAxO,IADA5Q,KAAAue,OAAAlE,KAAA+E,GAEA,UAAA9a,MAAA,wBAQA,IAAA+a,EAAArf,KAAAsf,WAAAF,GACAG,EAAAF,EAAAE,IACAC,EAAAH,EAAAG,IACAC,EAAAzf,KAAA0f,eAAAH,EAAAC,GAOA,GAAAC,EAAAna,SAAAmY,EAAAkC,SAAAJ,EAAAK,aAAA,CACA,IAAAC,EAAAN,EAAA/X,YACA,UAAAlD,MAAA,4BAGAmb,EAAAD,EAAAM,OAMA,GAAAL,EAAAna,SAAAmY,EAAAkC,SACA,IAAA3f,KAAA+f,2BAAAR,GACA,UAAAjb,MAAA,iCAIAib,EAAAS,SAAAP,GACAzf,KAAAigB,YAAAR,EAAAF,GACAvf,KAAAwe,QAAA/D,OAAAgF,EAAAF,GAEAvf,KAAAue,OAAA9D,OAAA2E,EAAAI,GAIAxf,KAAAkgB,UAAAlgB,KAAA4e,aAOAN,EAAAtc,UAAAme,iBAAA,SAAAf,GACA,IAAAgB,EAAApgB,KAAAue,OAAA7D,MAAA0E,GACA,QAAAxO,IAAAwP,EACA,UAAA9b,MAAA,sBAKAtE,KAAAqgB,yBAAAjB,EAAAgB,EAAArF,QAGA,IAAA+E,EAAAM,EAAArF,OAAA+E,OACAQ,EAAAtgB,KAAAwe,QAAA9D,MAAAoF,GACA,QAAAlP,IAAA0P,EAAA,CACA,IAAAC,EAAAvgB,KAAAwgB,wBAAAV,GACA,GAAAS,EAAAjb,SAAAmY,EAAAkC,QACA,UAAArb,MAAA,+BAEAgc,EAAAtgB,KAAAwe,QAAA9D,MAAA6F,IACAxF,OAAA0F,WAAAF,EAAAT,GACA9f,KAAAigB,YAAAH,EAAAQ,EAAAvF,QAKA/a,KAAAkgB,UAAAlgB,KAAA4e,aAQAN,EAAAtc,UAAA0e,cAAA,SAAAtB,GACA,OAAApf,KAAAue,OAAApE,SAAAiF,IAQAd,EAAAtc,UAAA2e,gBAAA,SAAAlJ,EAAAsG,GAEA,QAAAnN,IADA5Q,KAAA0e,SAAArE,KAAA5C,GAEA,UAAAnT,MAAA,2BAGA,IADAyZ,EAAmBhB,EAAQK,KAAAW,MACFhB,EAAQM,SACjC,UAAA/Y,MAAA,yBAEA,IAAAsc,EAAA,IAAuBhF,EAAUnE,GACjCyH,EAAA,IAAqBxB,EAAUkD,EAAO9D,EAAQ+D,QAAAjQ,EAAAmN,GAC9C/d,KAAAmf,cAAAD,GACA,IACA4B,EAAA,CAAoBtB,IADpBxf,KAAAue,OAAAlE,KAAA6E,GAAAnE,OACoBqE,WAAAF,EAAA1X,SAAA,GACpBxH,KAAA0e,SAAAjE,OAAAhD,EAAAqJ,IAOAxC,EAAAtc,UAAA+e,mBAAA,SAAAtJ,GACA,IAAAuJ,EAAAhhB,KAAA0e,SAAAhE,MAAAjD,GACA,QAAA7G,IAAAoQ,EACA,UAAA1c,MAAA,yBAEAtE,KAAAmgB,iBAAAa,EAAAjG,OAAAqE,aAQAd,EAAAtc,UAAAif,gBAAA,SAAAxJ,GACA,OAAAzX,KAAA0e,SAAAvE,SAAA1C,IAQA6G,EAAAtc,UAAAkf,aAAA,SAAAzJ,EAAApW,GACA,IAAA2f,EAAAhhB,KAAA0e,SAAArE,KAAA5C,GACA,QAAA7G,IAAAoQ,EACA,UAAA1c,MAAA,yBAEA,IAAA6c,EAAAnhB,KAAAwe,QACAsC,EAAAE,EAAAjG,OACAqG,EAAA/f,EAAAyf,EAAAtZ,SACAsZ,EAAAtZ,SAAAnG,EAEA,IAAAye,EAAAgB,EAAAtB,IAAAM,OACAQ,EAAAa,EAAA9G,KAAAyF,GACA,QAAAlP,IAAA0P,EAKA,OAJAA,EAAAvF,OAAAsG,KAAAD,GAAA,GACAphB,KAAA2e,gBAAAlT,KAAAqU,QAEA9f,KAAAshB,gBAIA,IAAAC,EAAAT,EAAAtB,IAAA+B,MAEA,QAAA3Q,KADA0P,EAAAa,EAAA9G,KAAAkH,IAMA,OAJAjB,EAAAvF,OAAAsG,IAAAD,GAAA,GACAphB,KAAA2e,gBAAAlT,KAAA8V,QAEAvhB,KAAAshB,gBAIA,QAAAlhB,EAAA,EAAAyB,EAAAsf,EAAAnH,OAAwC5Z,EAAAyB,IAAOzB,EAAA,CAC/C,IAAAohB,EAAAL,EAAAjH,OAAA9Z,GACAmf,EAAAiC,EAAAzG,OACA0G,EAAAlC,EAAAmC,eAAA5B,GACA,IAAA2B,GAAAlC,EAAA8B,IAAAD,EAAAK,GAAA,GACAD,EAAA3G,MAAAvV,SAAAmY,EAAAkE,UACA3hB,KAAA2e,gBAAAlT,KAAA+V,EAAA3G,OAGA7a,KAAAshB,iBAKAhD,EAAAtc,UAAA4f,gBAAA,WAGA,IAFA,IAAAC,EAAA7hB,KAAAye,QACA0C,EAAAnhB,KAAAwe,QACApe,EAAA,EAAAyB,EAAAggB,EAAA7H,OAAwC5Z,EAAAyB,IAAOzB,EAAA,CAC/C,IAAAma,EAAAsH,EAAA3H,OAAA9Z,GACAkgB,EAAAa,EAAA9G,KAAAE,EAAAQ,aACAnK,IAAA0P,EACA/F,EAAAM,MAAAa,SAAA4E,EAAAvF,OAAAvT,YAGA+S,EAAAM,MAAAa,SAAA,KAUA4C,EAAAtc,UAAA8f,cAAA,SAAArK,GACA,IAAAsK,EAAA/hB,KAEA,OAAAA,KAAAye,QAAAnE,WAAA7C,EADA,WAAmC,OAAAsK,EAAAC,YAAAvE,EAAAkE,YACnC5G,QAmBAuD,EAAAtc,UAAAsd,WAAA,SAAAF,GAKA,IAJA,IAAAwB,EAAAxB,EAAAxB,aACA2B,EAAA,IAAsBV,EAAG+B,EAAApZ,YAEzB6U,EAAAuE,EAAAvE,QACAjc,EAAA,EAAAyB,EAAAwa,EAAArC,OAAyC5Z,EAAAyB,IAAOzB,EAAA,CAChD,IAAAwc,EAAAP,EAAAnC,OAAA9Z,GACA,IAAAyf,EAAAjD,EAAA7B,QAAA,CACA,IAAAkH,EAAAjiB,KAAA8hB,cAAAlF,EAAA/B,OACAqH,EAAAliB,KAAAwe,QAAAnE,KAAA4H,QACArR,IAAAsR,EACA3C,EAAA4C,UAAAD,EAAAnH,OAAA6B,EAAA7B,QAGAwE,EAAA6C,aAAAH,EAAArF,EAAA7B,SAKA,IAAAsH,EAAAriB,KAAA4e,WACAb,EAAAqB,EAAArB,WACAyB,EAAA,CAAmBM,OAAAwC,EAAAf,MAAAe,GACnB,OAAAlD,EAAAhB,MACA,KAAiBtB,EAAQyF,GACzB,KAAiBzF,EAAQ0F,GAEzB,IAAAf,EAAArC,EAAAhB,OAAoDtB,EAAQyF,GAAA,KAC5DE,EAAAziB,KAAAgiB,YAAAvE,EAAAiF,OAGA,GAFAlD,EAAAM,OAAA2C,EACAlD,EAAA6C,aAAAK,EAAAhB,GACA1D,EAAmChB,EAAQM,SAAA,CAC3C,IAAAsF,EAAA3iB,KAAAgiB,YAAAvE,EAAAnZ,OACAkb,EAAA+B,MAAAoB,EACApD,EAAA6C,aAAAO,GAAAlB,GACAY,EAAAD,aAAAO,EAAA5E,GAEA,MAEA,KAAiBjB,EAAQ+D,GAEzB,GAAA9C,EAAmChB,EAAQM,SAAA,CAC3C,IAAAuF,EAAA5iB,KAAAgiB,YAAAvE,EAAAnZ,OACAue,EAAA7iB,KAAAgiB,YAAAvE,EAAAnZ,OACAkb,EAAAM,OAAA8C,EACApD,EAAA+B,MAAAsB,EACAtD,EAAA6C,aAAAQ,GAAA,GACArD,EAAA6C,aAAAS,EAAA,GACAR,EAAAD,aAAAQ,EAAA7E,GACAsE,EAAAD,aAAAS,EAAA9E,OAEA,CACA,IAAA+E,EAAA9iB,KAAAgiB,YAAAvE,EAAAsF,OACAvD,EAAAM,OAAAgD,EACAvD,EAAA6C,aAAAU,IASA,OAHAvD,EAAA/X,WAAA,GACA+X,EAAAyD,cAEA,CAAgBzD,MAAAC,QAkBhBlB,EAAAtc,UAAA0d,eAAA,SAAAH,EAAAC,GAEA,IADA,IAAAyD,EAAA1D,EAAA0D,QACA7iB,EAAA,EAAAyB,EAAAohB,EAAAjJ,OAAyC5Z,EAAAyB,IAAOzB,EAAA,CAChD,IAAAma,EAAA0I,EAAA/I,OAAA9Z,GACA,GAAAma,EAAAM,MAAAvV,SAAAmY,EAAAkE,SACA,OAAApH,EAAAM,MAGA,IAAAvV,EAAAka,EAAAM,OAAAxa,OACA,OAAAA,IAAAmY,EAAAiF,OAAApd,IAAAmY,EAAAnZ,QACAib,EAAAmC,eAAAlC,EAAAM,QAAA,EACAN,EAAAM,SAGAxa,EAAAka,EAAA+B,MAAAjc,UACAmY,EAAAiF,OAAApd,IAAAmY,EAAAnZ,QACAib,EAAAmC,eAAAlC,EAAA+B,OAAA,EACA/B,EAAA+B,MAGAe,GASAhE,EAAAtc,UAAA+d,2BAAA,SAAAR,GAEA,IAAA2D,EAAAljB,KAAAgiB,YAAAvE,EAAAiF,OACA1iB,KAAAwe,QAAA/D,OAAAyI,EAAA3D,EAAAzE,QACA9a,KAAA8e,YAAAS,EAAAzE,OAGA9a,KAAAkgB,UAAAlgB,KAAA8e,aACA,IAAAqE,EAAAtD,EAAA7f,KAAA8e,YAAAtX,YACAxH,KAAA8e,YAAA,KAGA,IAAAvE,EAAAva,KAAAwe,QAAA9D,MAAAwI,GACA,QAAAtS,IAAA2J,EAAA,CACA,IAAA6I,EAAA7I,EAAAQ,OACA,GAAAqI,EAAA5G,aACA,OAAA2G,EAEA,IAAAE,EAAArjB,KAAAsjB,oBAAAF,GACA,GAAAC,EAAA/d,SAAAmY,EAAAkC,QACA,SAEAyD,EAAA3C,WAAAyC,EAAAG,GACArjB,KAAAigB,YAAAoD,EAAAD,GACApjB,KAAAwe,QAAA/D,OAAA4I,EAAAD,GAIA,IADA,IAAAjC,EAAAnhB,KAAAwe,QACApe,EAAA,EAAAyB,EAAAsf,EAAAnH,OAAwC5Z,EAAAyB,IAAOzB,EAC/C+gB,EAAAjH,OAAA9Z,GAAA2a,OAAAwI,aAAAL,GAGA,OADAljB,KAAA4e,WAAA2E,aAAAL,GACAC,GAUA7E,EAAAtc,UAAAie,YAAA,SAAAgC,EAAA1C,GAEA,IADA,IAAA4B,EAAAnhB,KAAAwe,QACApe,EAAA,EAAAyB,EAAAsf,EAAAnH,OAAwC5Z,EAAAyB,IAAOzB,EAAA,CAC/C,IAAAma,EAAA4G,EAAAjH,OAAA9Z,GACAma,EAAAQ,OAAAyI,WAAAvB,EAAA1C,GACAhF,EAAAQ,OAAAvT,WAAA,GACA+S,EAAAM,MAAAvV,SAAAmY,EAAAkE,UACA3hB,KAAA2e,gBAAAlT,KAAA8O,EAAAM,OAGA7a,KAAA4e,WAAA4E,WAAAvB,EAAA1C,GACAvf,KAAA8e,aACA9e,KAAA8e,YAAA0E,WAAAvB,EAAA1C,IAWAjB,EAAAtc,UAAAke,UAAA,SAAAmC,GACA,QACA,IAAAgB,EAAArjB,KAAAyjB,mBAAApB,GACA,GAAAgB,EAAA/d,SAAAmY,EAAAkC,QACA,OAEA,IAAAY,EAAAvgB,KAAA0jB,kBAAAL,GACA,GAAA9C,EAAAjb,SAAAmY,EAAAkC,QACA,UAAArb,MAAA,8BAGA,IAAAib,EAAAvf,KAAAwe,QAAA9D,MAAA6F,GAAAxF,OACAwE,EAAAkB,WAAAF,EAAA8C,GACArjB,KAAAigB,YAAAoD,EAAA9D,GACAvf,KAAAwe,QAAA/D,OAAA4I,EAAA9D,KAaAjB,EAAAtc,UAAAsf,cAAA,WAGA,IAFA,IAAAH,EAAAnhB,KAAAwe,QACAmF,EAAA3jB,KAAA2e,gBACA,IAAAgF,EAAA/e,QAAA,CACA,IAAA2b,EAAAoD,EAAA/I,MACAL,EAAA4G,EAAA9G,KAAAkG,GACA,QAAA3P,IAAA2J,KAAAQ,OAAAvT,WAAA,GACA,IAAA6b,EAAArjB,KAAA4jB,uBAAArJ,EAAAQ,QACA,GAAAsI,EAAA/d,SAAAmY,EAAAkC,QACA,UAAArb,MAAA,wBAGA,IAAAib,EAAAhF,EAAAQ,OACAoG,EAAAzG,MAAA6F,GACAhB,EAAAkB,WAAAF,EAAA8C,GACArjB,KAAAigB,YAAAoD,EAAA9D,GACA4B,EAAA1G,OAAA4I,EAAA9D,MAcAjB,EAAAtc,UAAAyhB,mBAAA,SAAApB,GAEA,IADA,IAAAY,EAAAZ,EAAAY,QACA7iB,EAAA,EAAAyB,EAAAohB,EAAAjJ,OAAyC5Z,EAAAyB,IAAOzB,EAAA,CAChD,IAAAma,EAAA0I,EAAA/I,OAAA9Z,GACA6hB,EAAA1H,EAAAM,MACA,GAAAN,EAAAQ,OAAA,GAAAkH,EAAA3c,SAAAmY,EAAAsF,MACA,OAAAd,EAGA,OAAAK,GAaAhE,EAAAtc,UAAA4hB,uBAAA,SAAArE,GAIA,IAHA,IAAAsE,EAAAC,OAAAC,UACAV,EAAAf,EACAW,EAAA1D,EAAA0D,QACA7iB,EAAA,EAAAyB,EAAAohB,EAAAjJ,OAAyC5Z,EAAAyB,IAAOzB,EAAA,CAChD,IAAAma,EAAA0I,EAAA/I,OAAA9Z,GACA6hB,EAAA1H,EAAAM,MACApa,EAAA8Z,EAAAQ,OACA,GAAAta,EAAA,GAAAwhB,EAAA3c,SAAAmY,EAAAsF,MAAA,CACA,IACA7hB,EADAlB,KAAA4e,WAAA8C,eAAAO,GACAxhB,EACAS,EAAA2iB,IACAA,EAAA3iB,EACAmiB,EAAApB,IAIA,OAAAoB,GAYA/E,EAAAtc,UAAA0hB,kBAAA,SAAAL,GAIA,IAHA,IAAAQ,EAAAC,OAAAC,UACAlgB,EAAAye,EACAnB,EAAAnhB,KAAAwe,QACApe,EAAA,EAAAyB,EAAAsf,EAAAnH,OAAwC5Z,EAAAyB,IAAOzB,EAAA,CAC/C,IAAAma,EAAA4G,EAAAjH,OAAA9Z,GACA6hB,EAAA1H,EAAAM,MACA,GAAAoH,EAAA3c,SAAAmY,EAAAkE,SAAA,CACA,IAAApC,EAAAhF,EAAAQ,OACAiJ,EAAAzE,EAAAmC,eAAA2B,GACA,GAAAW,EAAA,GACA,IAAAC,GAAA1E,EAAA/X,WAAAwc,EACAC,EAAAJ,IACAA,EAAAI,EACApgB,EAAAoe,KAKA,OAAApe,GAuBAya,EAAAtc,UAAAwe,wBAAA,SAAAV,GASA,IARA,IAAAoE,EAAAJ,OAAAC,UACAI,EAAAD,EACAE,EAAAF,EACAG,EAAA/B,EACAzH,EAAAwJ,EACAtJ,EAAAsJ,EACAC,EAAAD,EACAlD,EAAAnhB,KAAAwe,QACApe,EAAA,EAAAyB,EAAAsf,EAAAnH,OAAwC5Z,EAAAyB,IAAOzB,EAAA,CAC/C,IAAAma,EAAA4G,EAAAjH,OAAA9Z,GACAmf,EAAAhF,EAAAQ,OACAta,EAAA8e,EAAAmC,eAAA5B,GACA,OAAArf,EAAA,CAGA,IAAAwhB,EAAA1H,EAAAM,MACA,GAAAoH,EAAA3c,SAAAmY,EAAAkE,SACA2C,EAAArC,OAEA,GAAAxhB,EAAA,IACAS,GAAAqe,EAAA/X,WAAA/G,GACA0jB,IACAA,EAAAjjB,EACA2Z,EAAAoH,OAGA,CACA,IAAA/gB,KAAAqe,EAAA/X,WAAA/G,GACA2jB,IACAA,EAAAljB,EACA6Z,EAAAkH,KAIA,OAAApH,IAAAwJ,EACAxJ,EAEAE,IAAAsJ,EACAtJ,EAEAuJ,GAOAhG,EAAAtc,UAAAqe,yBAAA,SAAAnB,EAAAM,GACAA,EAAAM,OAAAxa,SAAAmY,EAAAnZ,OACAtE,KAAAukB,qBAAA/E,EAAAM,OAAAZ,EAAAnB,YAEAyB,EAAA+B,MAAAjc,SAAAmY,EAAAnZ,OACAtE,KAAAukB,qBAAA/E,EAAA+B,MAAArC,EAAAnB,aAQAO,EAAAtc,UAAAuiB,qBAAA,SAAAzE,EAAA/B,GACA,IAAAxD,EAAAva,KAAAwe,QAAAnE,KAAAyF,QACAlP,IAAA2J,EACAva,KAAA4e,WAAAuD,UAAA5H,EAAAQ,QAAAgD,GAGA/d,KAAA4e,WAAAwD,aAAAtC,GAAA/B,IAUAO,EAAAtc,UAAAshB,oBAAA,SAAA/D,GAEA,IADA,IAAA0D,EAAA1D,EAAA0D,QACA7iB,EAAA,EAAAyB,EAAAohB,EAAAjJ,OAAyC5Z,EAAAyB,IAAOzB,EAAA,CAChD,IAAAma,EAAA0I,EAAA/I,OAAA9Z,GACAkF,EAAAiV,EAAAM,MAAAvV,OACA,GAAAA,IAAAmY,EAAAiF,OAAApd,IAAAmY,EAAAnZ,MACA,OAAAiW,EAAAM,MAGA,OAAAyH,GAOAhE,EAAAtc,UAAAggB,YAAA,SAAA1c,GACA,WAAAnE,EAAAmE,EAAAtF,KAAA+e,YAEAT,EArqBU,GA4qBV,SAAAuB,EAAAxe,GAEA,OAAAA,EAAA,GAAAA,EADA,KACAA,EADA,MAoCA,SAAAoc,GACAA,IAAA,qBACAA,IAAA,uBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBALA,CAMCA,MAAA,KAKD,IAAAtc,EAAA,WAOA,SAAAA,EAAAmE,EAAA8U,GACApa,KAAAob,IAAAhB,EACApa,KAAAwkB,MAAAlf,EAoBA,OAfAnE,EAAAoa,QAAA,SAAA1P,EAAAC,GACA,OAAAD,EAAAuO,KAAAtO,EAAAsO,MAKAjZ,EAAAa,UAAAoY,GAAA,WACA,OAAApa,KAAAob,KAKAja,EAAAa,UAAAsD,KAAA,WACA,OAAAtF,KAAAwkB,OAEArjB,EA7BA,GAmCAmhB,EAAA,IAAAnhB,EAAAsc,EAAAkC,SAAA,GAKId,EAAG,WAIP,SAAA4F,EAAAjd,QACA,IAAAA,IAAkCA,EAAA,GAClCxH,KAAA0kB,SAAwB/K,EAASxY,EAAAoa,SACjCvb,KAAAsc,UAAA9U,EA4JA,OAvJAid,EAAAziB,UAAAihB,MAAA,WACA,OAAAjjB,KAAA0kB,UAKAD,EAAAziB,UAAAwF,SAAA,WACA,OAAAxH,KAAAsc,WAKAmI,EAAAziB,UAAAwa,WAAA,WACA,OAAAxc,KAAA0kB,SAAAzK,SAKAwK,EAAAziB,UAAA4d,WAAA,WAEA,IADA,IAAAqD,EAAAjjB,KAAA0kB,SACAtkB,EAAA,EAAAyB,EAAAohB,EAAAjJ,OAAyC5Z,EAAAyB,IAAOzB,EAAA,CAEhD,GADA6iB,EAAA/I,OAAA9Z,GACAya,MAAAvV,SAAAmY,EAAAsF,MACA,SAGA,UAKA0B,EAAAziB,UAAA8Y,KAAA,WACA,IAAA6J,EAAA,IAAAF,EAAAzkB,KAAAsc,WAEA,OADAqI,EAAAD,SAAA1kB,KAAA0kB,SAAA5J,OACA6J,GAOAF,EAAAziB,UAAAqf,IAAA,SAAAhgB,GACA,OAAArB,KAAAsc,WAAAjb,GASAojB,EAAAziB,UAAAogB,aAAA,SAAAH,EAAAlG,QACA,IAAAA,IAAqCA,EAAA,GAErC8D,EADA7f,KAAA0kB,SAAApK,WAAA2H,EAAA,WAAiE,WACjElH,QAAAgB,IACA/b,KAAA0kB,SAAAhK,MAAAuH,IAWAwC,EAAAziB,UAAAmgB,UAAA,SAAAZ,EAAAxF,QACA,IAAAA,IAAqCA,EAAA,GACrC/b,KAAAsc,WAAAiF,EAAAjF,UAAAP,EAEA,IADA,IAAAkH,EAAA1B,EAAAmD,SACAtkB,EAAA,EAAAyB,EAAAohB,EAAAjJ,OAAyC5Z,EAAAyB,IAAOzB,EAAA,CAChD,IAAAma,EAAA0I,EAAA/I,OAAA9Z,GACAJ,KAAAoiB,aAAA7H,EAAAM,MAAAN,EAAAQ,OAAAgB,KAMA0I,EAAAziB,UAAAuhB,aAAA,SAAAtB,GACAjiB,KAAA0kB,SAAAhK,MAAAuH,IAKAwC,EAAAziB,UAAAghB,YAAA,WACAhjB,KAAAsc,WAAAtc,KAAAsc,UAEA,IADA,IAAA2G,EAAAjjB,KAAA0kB,SACAtkB,EAAA,EAAAyB,EAAAohB,EAAAjJ,OAAyC5Z,EAAAyB,IAAOzB,EAAA,CAChD,IAAAma,EAAA0I,EAAA/I,OAAA9Z,GACAma,EAAAQ,QAAAR,EAAAQ,SAeA0J,EAAAziB,UAAAge,SAAA,SAAAiC,GACA,IAAAgB,EAAAjjB,KAAA0kB,SAEAjD,GAAA,EADAwB,EAAAvI,MAAAuH,GACAlH,OACA/a,KAAAsc,WAAAmF,EACA,QAAArhB,EAAA,EAAAyB,EAAAohB,EAAAjJ,OAAyC5Z,EAAAyB,IAAOzB,EAChD6iB,EAAA/I,OAAA9Z,GAAA2a,QAAA0G,GAeAgD,EAAAziB,UAAAye,WAAA,SAAAxB,EAAAnB,GACA9d,KAAAoiB,aAAAnD,GAAA,GACAjf,KAAAggB,SAAAlC,IAKA2G,EAAAziB,UAAA0f,eAAA,SAAAO,GACA,IAAA1H,EAAAva,KAAA0kB,SAAArK,KAAA4H,GACA,YAAArR,IAAA2J,IAAAQ,OAAA,GAWA0J,EAAAziB,UAAAwhB,WAAA,SAAAvB,EAAA1C,GACA,IAAAhF,EAAAva,KAAA0kB,SAAAhK,MAAAuH,QACArR,IAAA2J,GACAva,KAAAmiB,UAAA5C,EAAAhF,EAAAQ,SAGA0J,EAnKO,GCndQ,IAAAG,EApTf,MACA/M,YAAAnT,GACA1E,KAAAsb,MAAA5W,EAAA/D,KACAX,KAAAwkB,MAAA9f,EAAAY,KACAtF,KAAA6kB,QAAAngB,EAAAogB,OACA9kB,KAAA+kB,MAAA,GACArgB,EAAA/D,OAWAX,KAAA+kB,MAA2B3iB,EAASI,MAAA,IAAawY,EACjDhb,KAAA6kB,QAAA1F,cAAA,IAA+CzB,EAAe1d,KAAA+kB,MAAY3iB,EAASI,MAAQsa,EAAa+D,GAAA,IACxG7gB,KAAA+kB,MAA2B3iB,EAASM,KAAA,IAAYsY,EAChDhb,KAAA6kB,QAAA1F,cAAA,IAA+CzB,EAAe1d,KAAA+kB,MAAY3iB,EAASM,KAAOoa,EAAa+D,GAAA,IACvG7gB,KAAA+kB,MAA2B3iB,EAASY,QAAA,IAAegY,EACnDhb,KAAA6kB,QAAA1F,cAAA,IAA+CzB,EAAe1d,KAAA+kB,MAAY3iB,EAASY,QAAU8Z,EAAa+D,GAAA,KAI1GhJ,SACA,OACAlX,KAAAX,KAAAW,KACAqkB,KAAAhlB,KAAAglB,KACAC,IAAAjlB,KAAAilB,IACA9L,MAAAnZ,KAAAmZ,MACAD,OAAAlZ,KAAAkZ,QAGArB,WACA2B,KAAA0L,UAAAllB,KAAAic,cAAArL,EAAA,GAQAjQ,WACA,OAAAX,KAAAsb,MAQA0J,WACA,OAAAhlB,KAAAmlB,cAAkC/iB,EAASI,MAQ3C4iB,YACA,OAAAplB,KAAAmlB,cAAkC/iB,EAASK,OAO3C0W,YACA,OAAAnZ,KAAAmlB,cAAkC/iB,EAASQ,OAQ3CsW,aACA,OAAAlZ,KAAAmlB,cAAkC/iB,EAASS,QAiB3CwiB,qBACA,OAAArlB,KAAAslB,gBAEAD,mBAAAhkB,GACA,QAAAuP,IAAAvP,OAAArB,KAAAslB,gBAAA,CACA,MAAAzW,EAAA7O,KAAAulB,SAAuCnjB,EAASQ,YAChDgO,IAAA5Q,KAAAslB,iBAMAtlB,KAAA6kB,QAAAlE,gBAAA9R,EAAuDkO,EAAarb,OAAA1B,KAAAsb,MAAA,kBAGpEtb,KAAAslB,gBAAAjkB,EACArB,KAAA6kB,QAAA3D,aAAArS,EAAAxN,GAMArB,KAAA6kB,QAAAjD,mBAYA4D,sBACA,OAAAxlB,KAAAylB,iBAEAD,oBAAAnkB,GACA,QAAAuP,IAAAvP,OAAArB,KAAAylB,iBAAA,CACA,MAAA5W,EAAA7O,KAAAulB,SAAuCnjB,EAASS,aAChD+N,IAAA5Q,KAAAylB,kBAMAzlB,KAAA6kB,QAAAlE,gBAAA9R,EAAuDkO,EAAarb,OAAA1B,KAAAsb,MAAA,kBAGpEtb,KAAAylB,iBAAApkB,EACArB,KAAA6kB,QAAA3D,aAAArS,EAAAxN,GAOArB,KAAA6kB,QAAAjD,mBAUAqD,UACA,OAAAjlB,KAAAmlB,cAAkC/iB,EAASM,KAQ3CgjB,aACA,OAAA1lB,KAAAmlB,cAAkC/iB,EAASO,QAQ3CgjB,cACA,OAAA3lB,KAAAmlB,cAAkC/iB,EAASU,SAQ3C8iB,cACA,OAAA5lB,KAAAmlB,cAAkC/iB,EAASW,SAQ3C8iB,aACA,OAAA7lB,KAAAmlB,cAAkC/iB,EAASY,QAQ3CsC,WACA,OAAAtF,KAAAwkB,MASA3M,SAAAhJ,GACA,OAAA7O,KAAA+kB,MAAAlW,GAAA7O,KAAA+kB,MAAAlW,GAAAxN,aAAAuP,EAMAiH,SAAAhJ,GACA,GAAA7O,KAAA+kB,MAAAlW,GACA,OAAA7O,KAAA+kB,MAAAlW,GAUA,OAHA7O,KAAA+kB,MAAAlW,GAAA,IAAmCmM,EAGnCnM,GACA,KAAiBzM,EAASK,MAC1BzC,KAAAulB,SAA8BnjB,EAASI,MACvCxC,KAAAulB,SAA8BnjB,EAASQ,OAMvC5C,KAAA6kB,QAAA1F,cAAA,IAAmDzB,EAAe1d,KAAA+kB,MAAAlW,GAAmBiO,EAAa+D,GAAA7gB,KAAA+kB,MAAgB3iB,EAASI,MAAAmZ,KAAA3b,KAAA+kB,MAAuB3iB,EAASQ,UAE3J,MACA,KAAiBR,EAASO,OAC1B3C,KAAAulB,SAA8BnjB,EAASM,KACvC1C,KAAAulB,SAA8BnjB,EAASS,QAMvC7C,KAAA6kB,QAAA1F,cAAA,IAAmDzB,EAAe1d,KAAA+kB,MAAAlW,GAAmBiO,EAAa+D,GAAA7gB,KAAA+kB,MAAgB3iB,EAASM,KAAAiZ,KAAA3b,KAAA+kB,MAAsB3iB,EAASS,WAE1J,MACA,KAAiBT,EAASU,QAC1B9C,KAAAulB,SAA8BnjB,EAASI,MACvCxC,KAAAulB,SAA8BnjB,EAASQ,OAMvC5C,KAAA6kB,QAAA1F,cAAA,IAAmDzB,EAAe1d,KAAA+kB,MAAAlW,GAAmBiO,EAAa+D,GAAA7gB,KAAA+kB,MAAgB3iB,EAASI,MAAAmZ,KAAA3b,KAAA+kB,MAAuB3iB,EAASQ,OAAAoZ,OAAA,MAE3J,MACA,KAAiB5Z,EAASW,QAC1B/C,KAAAulB,SAA8BnjB,EAASM,KACvC1C,KAAAulB,SAA8BnjB,EAASS,QAMvC7C,KAAA6kB,QAAA1F,cAAA,IAAmDzB,EAAe1d,KAAA+kB,MAAAlW,GAAmBiO,EAAa+D,GAAA7gB,KAAA+kB,MAAgB3iB,EAASM,KAAAiZ,KAAA3b,KAAA+kB,MAAsB3iB,EAASS,QAAAmZ,OAAA,MAQ1J,OAHAhc,KAAA6kB,QAAAjD,kBAGA5hB,KAAA+kB,MAAAlW,GAMAgJ,cAAAhJ,GACA,IAAAxN,EASA,OAHAA,EAAArB,KAAAulB,SAAA1W,GAAAxN,UChTA,IAAAykB,EAuBA,SAAAC,EAAAzP,GACA,OAAAA,EAGAA,EAAA3V,MACAX,KAAAgmB,UAAA1P,EAAA3V,MAAAX,KAAAgmB,UAAA1P,EAAA3V,OAAA,IAA6EikB,EAAO,CACpFjkB,KAAA2V,EAAA3V,KACAmkB,OAAA9kB,KAAA6kB,UAEA7kB,KAAAgmB,UAAA1P,EAAA3V,MAAA6jB,MAAAxkB,KAAAgmB,UAAA1P,EAAA3V,MAAA6jB,OAAAlO,EAAAhR,KACAtF,KAAAgmB,UAAA1P,EAAA3V,QAGAX,KAAAgmB,UAAA1P,GAAAtW,KAAAgmB,UAAA1P,IAAA,IAAmEsO,EAAO,CAC1EjkB,KAAA2V,EACAwO,OAAA9kB,KAAA6kB,UAEA7kB,KAAAgmB,UAAA1P,IAfAtW,KAAAimB,eAoEA,SAAAC,EAAA9G,GAEA,IAAA7X,EACA,MAAA0H,OAAA2B,IAAAwO,EAAAnQ,WAAAmQ,EAAAnQ,WAAA,EACA,IAAAzH,OAAAoJ,IAAAwO,EAAA5X,SAAA4X,EAAA5X,SAAA,EACA,YAAAA,IACAA,EAvDA,SAAA4X,GACA,IAAAtF,EAAA,EACA,GAAAsF,EAAA3J,OAAA,SAAA2J,EAAA1J,MAGA,GAAA0J,EAAA3J,OAAA,QAAA2J,EAAA1J,MAGA,GAAA0J,EAAAxJ,OAAA,UAAAwJ,EAAAvJ,MAGA,GAAAuJ,EAAAxJ,OAAA,WAAAwJ,EAAAvJ,MAIA,OAAAuJ,EAAA1J,OACA,WACA,YACA,cACA,cACA,eACAoE,EAAA,EACA,MACA,aACAA,EAAA,EACA,MACA,QACAA,EAAA,OAfAA,EAAA,OAHAA,EAAA,OAHAA,EAAA,OAHAA,EAAA,EA2CA,OAhBA9Z,KAAAmmB,aAAAnmB,KAAAmmB,cAAA,IAAAja,MAAA,GACAlM,KAAAomB,aAAApmB,KAAAomB,cAAA,IAAAla,MAAA,GACAlM,KAAAmmB,aAAArM,KAQA9Z,KAAAmmB,aAAArM,GAAA,IAA2CkB,EAC3Chb,KAAA6kB,QAAAlE,gBAAA3gB,KAAAmmB,aAAArM,GAAmEiD,EAAarb,OAAA,cAChF1B,KAAAomB,aAAAtM,GAAA9Z,KAAAmmB,aAAArM,GAAAgC,UAAA,GAEA9b,KAAA6kB,QAAA3D,aAAAlhB,KAAAmmB,aAAArM,GAAA9Z,KAAAqmB,SAAAvM,KAEA9Z,KAAAomB,aAAAtM,IASAvZ,KAAAP,KAAAof,IAEA,MAAA1J,EAAAqQ,EAAAxlB,KAAAP,KAAAof,EAAA3J,OAAA8P,SAAAnG,EAAA1J,OACA,IAAAG,EAAAkI,EAkDA,OAhBAqB,EAAAvJ,QAAiCzT,EAASC,MAC1CwT,EAjIA,SAAAlV,EAAAU,GACA,IAAAilB,EAWA,OAJAA,EAAA,IAAiBtL,EACjBhb,KAAA6kB,QAAA1F,cAAA,IAAuCzB,EAAe4I,EAAKxJ,EAAa+D,GAAAxf,IAGxEilB,GAqHA/lB,KAAAP,UAAA4Q,EAAAwO,EAAA5X,WAGAqO,EAAAkQ,EAAAxlB,KAAAP,KAAAof,EAAAxJ,OAAA2P,SAAAnG,EAAAvJ,OACA,IAAA5G,GAAAzH,EACAqO,IAAAiG,SAAA7M,GAAA0M,KAAAnU,GAEAA,EACAqO,IAAA8F,KAAAnU,GAEA,IAAAyH,IACA4G,IAAAiG,SAAA7M,KAGA8O,OAAAnN,IAAAwO,EAAA9V,UAAA8V,EAAA9V,SAAA,IAA2FyT,EAAarb,OAAA,EAAA0d,EAAA9V,SAAA,KAAAwc,EACxG1G,EAAA7X,UACA,KAAiBtE,EAAQE,IACzBoE,EAAA,IAA+BmW,EAAehI,EAAQoH,EAAa+D,GAAAhL,EAAAkI,GACnE,MACA,KAAiB9a,EAAQG,IACzBmE,EAAA,IAA+BmW,EAAehI,EAAQoH,EAAa0F,GAAA3M,EAAAkI,GACnE,MACA,KAAiB9a,EAAQC,IACzBqE,EAAA,IAA+BmW,EAAehI,EAAQoH,EAAayF,GAAA1M,EAAAkI,GACnE,MACA,QACA,oCAAAqB,EAAA7X,SAGAvH,KAAA6kB,QAAA1F,cAAA5X,GAjKAue,EAA8B/I,EAAarb,OAAA,WAyb5B,IAAA6kB,EAnPf,MAUA1O,YAAAnT,GAMA1E,KAAA6kB,QAAA,IAA+BxG,EAG/Bre,KAAAgmB,UAAA,GAEAhmB,KAAAimB,eAAA,IAAkCrB,EAAO,CACzCE,OAAA9kB,KAAA6kB,UAEA7kB,KAAAwmB,WAAA9hB,QAAAkM,IAAAlM,EAAA6U,QAAA7U,EAAA6U,QAAA,GAEA7U,SACAkM,IAAAlM,EAAAyU,YAAAvI,IAAAlM,EAAAwU,QACAlZ,KAAAymB,QAAA/hB,EAAAyU,MAAAzU,EAAAwU,QAEAxU,EAAAuC,aACAjH,KAAA0mB,eAAAhiB,EAAAuC,cAYA4Q,QAAAsB,EAAAD,GAGA,OAFAlZ,KAAAimB,eAAAZ,eAAAlM,EACAnZ,KAAAimB,eAAAT,gBAAAtM,EACAlZ,KAQAmZ,YACA,OAAAnZ,KAAAimB,eAAAZ,eAQAnM,aACA,OAAAlZ,KAAAimB,eAAAT,gBAuBAmB,mBACA,OAAA3mB,KAAAimB,eAAA9M,MAYAyN,oBACA,OAAA5mB,KAAAimB,eAAA/M,OAiCArB,WAAA0B,GAEA,OAAArN,MAAAkL,QAAAmC,KAAA3U,QAAA,GACA,OAAA2U,EAAA,CAAAA,YAAA,GAAyF,MACzF,OAAAA,EAAA,CAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAA0G,MAC1G,OAAAA,EAAA,CAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAA0G,MAC1G,OAAAA,EAAA,CAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAmH,MACnH,OAAAA,EAAA,CAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAA0G,MAC1G,aACA,sCAEA,IAnLA,SAAAsN,EAAAC,GACA,GAAAD,IAAAC,EACA,SAEA,IAAAD,IAAAC,EACA,SAEA,QAAA1mB,EAAA,EAAmBA,EAAA,EAAOA,IAC1B,GAAAymB,EAAAzmB,KAAA0mB,EAAA1mB,GACA,SAGA,SAuKA2mB,CAAA/mB,KAAAqmB,SAAA9M,KACAvZ,KAAAqmB,SAAA9M,EAEAvZ,KAAAmmB,cAAA,CACA,QAAA/lB,EAAA,EAA+BA,EAAAJ,KAAAmmB,aAAAvhB,OAA8BxE,IAC7DJ,KAAAmmB,aAAA/lB,IACAJ,KAAA6kB,QAAA3D,aAAAlhB,KAAAmmB,aAAA/lB,GAAAJ,KAAAqmB,SAAAjmB,IAQAJ,KAAA6kB,QAAAjD,kBAIA,OAAA5hB,KAuBA6X,cAAAuH,GAKA,OAJA8G,EAAA3lB,KAAAP,KAAAof,GAEApf,KAAA6kB,QAAAjD,kBAEA5hB,KAuBA6X,eAAA5Q,GACA,QAAAyP,EAAA,EAAuBA,EAAAzP,EAAArC,OAAwB8R,IAC/CwP,EAAA3lB,KAAAP,KAAAiH,EAAAyP,IAKA,OAFA1W,KAAA6kB,QAAAjD,kBAEA5hB,KAQA2W,eACA,OAAA3W,KAAAgmB,YC5bA9lB,EAAAQ,EAAAsmB,EAAA,8BAAA5kB,IAAAlC,EAAAQ,EAAAsmB,EAAA,6BAAA/jB,IAAA/C,EAAAQ,EAAAsmB,EAAA,6BAAA3jB,IAAAnD,EAAAQ,EAAAsmB,EAAA,iCAAApP,IAAA1X,EAAAQ,EAAAsmB,EAAA,yBAAAT,IAAArmB,EAAAQ,EAAAsmB,EAAA,4BAAApC","file":"autolayout.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"autolayout\"] = factory();\n\telse\n\t\troot[\"autolayout\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Layout attributes.\n * @enum {String}\n */\nvar Attribute = {\n    CONST: 'const',\n    NOTANATTRIBUTE: 'const',\n    VARIABLE: 'var',\n    LEFT: 'left',\n    RIGHT: 'right',\n    TOP: 'top',\n    BOTTOM: 'bottom',\n    WIDTH: 'width',\n    HEIGHT: 'height',\n    CENTERX: 'centerX',\n    CENTERY: 'centerY',\n    /*LEADING: 'leading',\n    TRAILING: 'trailing'*/\n    /** Used by the extended VFL syntax. */\n    ZINDEX: 'zIndex'\n};\nexport default Attribute;\n","/**\n * Relation types.\n * @enum {String}\n */\nvar Relation = {\n    /** Less than or equal */\n    LEQ: 'leq',\n    /** Equal */\n    EQU: 'equ',\n    /** Greater than or equal */\n    GEQ: 'geq'\n};\nexport default Relation;\n","/**\n * Layout priorities.\n * @enum {String}\n */\nvar Priority = {\n    REQUIRED: 1000,\n    DEFAULTHIGH: 750,\n    DEFAULTLOW: 250\n    //FITTINGSIZELEVEL: 50,\n};\nexport default Priority;\n","export default (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { visualFormatString: peg$parsevisualFormatString },\n        peg$startRuleFunction  = peg$parsevisualFormatString,\n\n        peg$c0 = peg$FAILED,\n        peg$c1 = null,\n        peg$c2 = \":\",\n        peg$c3 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n        peg$c4 = [],\n        peg$c5 = function(o, superto, view, views, tosuper) { return {\n              orientation: o ? o[0] : 'horizontal',\n              cascade: (superto || []).concat(\n                [view],\n                [].concat.apply([], views),\n                (tosuper || [])\n              )\n            }\n          },\n        peg$c6 = \"H\",\n        peg$c7 = { type: \"literal\", value: \"H\", description: \"\\\"H\\\"\" },\n        peg$c8 = \"V\",\n        peg$c9 = { type: \"literal\", value: \"V\", description: \"\\\"V\\\"\" },\n        peg$c10 = function(orient) { return orient == 'H' ? 'horizontal' : 'vertical' },\n        peg$c11 = \"|\",\n        peg$c12 = { type: \"literal\", value: \"|\", description: \"\\\"|\\\"\" },\n        peg$c13 = function() { return { view: null } },\n        peg$c14 = \"[\",\n        peg$c15 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n        peg$c16 = \"]\",\n        peg$c17 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n        peg$c18 = function(view, predicates) { return extend(view, predicates ? { constraints: predicates } : {}) },\n        peg$c19 = \"-\",\n        peg$c20 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c21 = function(predicateList) { return predicateList },\n        peg$c22 = function() { return [{ relation: 'equ', constant: 'default', $parserOffset: offset() }] },\n        peg$c23 = \"\",\n        peg$c24 = function() { return [{ relation: 'equ', constant: 0, $parserOffset: offset() }] },\n        peg$c25 = function(n) { return [{ relation: 'equ', constant: n, $parserOffset: offset() }] },\n        peg$c26 = \"(\",\n        peg$c27 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c28 = \",\",\n        peg$c29 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c30 = \")\",\n        peg$c31 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c32 = function(p, ps) { return [p].concat(ps.map(function(p){ return p[1] })) },\n        peg$c33 = \"@\",\n        peg$c34 = { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n        peg$c35 = function(r, o, p) { return extend({ relation: 'equ' }, (r || {}), o, (p ? p[1]: {})) },\n        peg$c36 = \"==\",\n        peg$c37 = { type: \"literal\", value: \"==\", description: \"\\\"==\\\"\" },\n        peg$c38 = function() { return { relation: 'equ', $parserOffset: offset() } },\n        peg$c39 = \"<=\",\n        peg$c40 = { type: \"literal\", value: \"<=\", description: \"\\\"<=\\\"\" },\n        peg$c41 = function() { return { relation: 'leq', $parserOffset: offset() } },\n        peg$c42 = \">=\",\n        peg$c43 = { type: \"literal\", value: \">=\", description: \"\\\">=\\\"\" },\n        peg$c44 = function() { return { relation: 'geq', $parserOffset: offset() } },\n        peg$c45 = /^[0-9]/,\n        peg$c46 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c47 = function(digits) { return { priority: parseInt(digits.join(\"\"), 10) } },\n        peg$c48 = function(n) { return { constant: n } },\n        peg$c49 = /^[a-zA-Z_]/,\n        peg$c50 = { type: \"class\", value: \"[a-zA-Z_]\", description: \"[a-zA-Z_]\" },\n        peg$c51 = /^[a-zA-Z0-9_]/,\n        peg$c52 = { type: \"class\", value: \"[a-zA-Z0-9_]\", description: \"[a-zA-Z0-9_]\" },\n        peg$c53 = function(f, v) { return { view: f + v } },\n        peg$c54 = \".\",\n        peg$c55 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n        peg$c56 = function(digits, decimals) { return parseFloat(digits.concat(\".\").concat(decimals).join(\"\"), 10); },\n        peg$c57 = function(digits) { return parseInt(digits.join(\"\"), 10); },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsevisualFormatString() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseorientation();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s3 = peg$c2;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c3); }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsesuperview();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseconnection();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseview();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = peg$parseconnection();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseview();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$c0;\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$parseconnection();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseview();\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseconnection();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesuperview();\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$c1;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c5(s1, s2, s3, s4, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseorientation() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 72) {\n        s1 = peg$c6;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c7); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 86) {\n          s1 = peg$c8;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c9); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c10(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsesuperview() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 124) {\n        s1 = peg$c11;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c13();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseview() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c14;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c15); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseviewName();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsepredicateListWithParens();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s4 = peg$c16;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c17); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c18(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseconnection() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c19;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c20); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepredicateList();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s3 = peg$c19;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c20); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c21(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c19;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c20); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c22();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$c23;\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c24();\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicateList() {\n      var s0;\n\n      s0 = peg$parsesimplePredicate();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepredicateListWithParens();\n      }\n\n      return s0;\n    }\n\n    function peg$parsesimplePredicate() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c25(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsepredicateListWithParens() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c26;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c28;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c29); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsepredicate();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c28;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c29); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsepredicate();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c30;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c31); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c32(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicate() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parserelation();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseobjectOfPredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 64) {\n            s4 = peg$c33;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepriority();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c35(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parserelation() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c36) {\n        s1 = peg$c36;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c38();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c39) {\n          s1 = peg$c39;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c41();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c42) {\n            s1 = peg$c42;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c43); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c44();\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseobjectOfPredicate() {\n      var s0;\n\n      s0 = peg$parseconstant();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseviewName();\n      }\n\n      return s0;\n    }\n\n    function peg$parsepriority() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c45.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c46); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c45.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c47(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseconstant() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c48(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseviewName() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      if (peg$c49.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c50); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c49.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c50); }\n          }\n        }\n      } else {\n        s2 = peg$c0;\n      }\n      if (s2 !== peg$FAILED) {\n        s2 = input.substring(s1, peg$currPos);\n      }\n      s1 = s2;\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = [];\n        if (peg$c51.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c52); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c51.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c52); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s3 = input.substring(s2, peg$currPos);\n        }\n        s2 = s3;\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c53(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c45.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c46); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c45.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c54;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c55); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (peg$c45.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              if (peg$c45.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c46); }\n              }\n            }\n          } else {\n            s3 = peg$c0;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c56(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c45.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c45.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c46); }\n            }\n          }\n        } else {\n          s1 = peg$c0;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c57(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n\n      function extend(dst) {\n        for (var i = 1; i < arguments.length; i++) {\n          for (var k in arguments[i]) {\n            dst[k] = arguments[i][k];\n          }\n        }\n        return dst;\n      }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();","export default (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { visualFormatStringExt: peg$parsevisualFormatStringExt },\n        peg$startRuleFunction  = peg$parsevisualFormatStringExt,\n\n        peg$c0 = peg$FAILED,\n        peg$c1 = \"C:\",\n        peg$c2 = { type: \"literal\", value: \"C:\", description: \"\\\"C:\\\"\" },\n        peg$c3 = [],\n        peg$c4 = null,\n        peg$c5 = function(view, attribute, attributes, comments) { return {\n              type: 'attribute',\n              view: view.view,\n              attributes: [attribute].concat(attributes)\n            }\n          },\n        peg$c6 = function(attr, predicates) { return { attr: attr, predicates:predicates } },\n        peg$c7 = \":\",\n        peg$c8 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n        peg$c9 = function(o, superto, view, views, tosuper, comments) { return {\n              type: 'vfl',\n              orientation: o ? o[0] : 'horizontal',\n              cascade: (superto || []).concat(\n                view,\n                [].concat.apply([], views),\n                (tosuper || [])\n              )\n            }\n          },\n        peg$c10 = \"HV\",\n        peg$c11 = { type: \"literal\", value: \"HV\", description: \"\\\"HV\\\"\" },\n        peg$c12 = function() { return 'horzvert' },\n        peg$c13 = \"H\",\n        peg$c14 = { type: \"literal\", value: \"H\", description: \"\\\"H\\\"\" },\n        peg$c15 = function() { return 'horizontal' },\n        peg$c16 = \"V\",\n        peg$c17 = { type: \"literal\", value: \"V\", description: \"\\\"V\\\"\" },\n        peg$c18 = function() { return 'vertical' },\n        peg$c19 = \"Z\",\n        peg$c20 = { type: \"literal\", value: \"Z\", description: \"\\\"Z\\\"\" },\n        peg$c21 = function() { return 'zIndex' },\n        peg$c22 = \" \",\n        peg$c23 = { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n        peg$c24 = \"//\",\n        peg$c25 = { type: \"literal\", value: \"//\", description: \"\\\"//\\\"\" },\n        peg$c26 = { type: \"any\", description: \"any character\" },\n        peg$c27 = \"|\",\n        peg$c28 = { type: \"literal\", value: \"|\", description: \"\\\"|\\\"\" },\n        peg$c29 = function() { return { view: null } },\n        peg$c30 = \"[\",\n        peg$c31 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n        peg$c32 = \",\",\n        peg$c33 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c34 = \"]\",\n        peg$c35 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n        peg$c36 = function(view, views) { return views.length ? [view].concat([].concat.apply([], views)) : view },\n        peg$c37 = function(view, predicates, cascadedViews) { return extend(extend(view, predicates ? { constraints: predicates } : {}), cascadedViews ? {\n            cascade: cascadedViews\n          } : {}) },\n        peg$c38 = function(views, connection) { return [].concat([].concat.apply([], views),[connection]); },\n        peg$c39 = \"->\",\n        peg$c40 = { type: \"literal\", value: \"->\", description: \"\\\"->\\\"\" },\n        peg$c41 = function() { return [{ relation: 'none' }] },\n        peg$c42 = \"-\",\n        peg$c43 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c44 = function(predicateList) { return predicateList },\n        peg$c45 = function() { return [{ relation: 'equ', constant: 'default' }] },\n        peg$c46 = \"~\",\n        peg$c47 = { type: \"literal\", value: \"~\", description: \"\\\"~\\\"\" },\n        peg$c48 = function() { return [{ relation: 'equ', equalSpacing: true }] },\n        peg$c49 = \"\",\n        peg$c50 = function() { return [{ relation: 'equ', constant: 0 }] },\n        peg$c51 = function(p) { return [{ relation: 'equ', multiplier: p.multiplier }] },\n        peg$c52 = function(n) { return [{ relation: 'equ', constant: n }] },\n        peg$c53 = \"(\",\n        peg$c54 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c55 = \")\",\n        peg$c56 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c57 = function(p, ps) { return [p].concat(ps.map(function(p){ return p[1] })) },\n        peg$c58 = \"@\",\n        peg$c59 = { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n        peg$c60 = function(r, o, p) { return extend({ relation: 'equ' }, (r || {}), o, (p ? p[1]: {})) },\n        peg$c61 = function(r, o, p) { return extend({ relation: 'equ', equalSpacing: true }, (r || {}), o, (p ? p[1]: {})) },\n        peg$c62 = \"==\",\n        peg$c63 = { type: \"literal\", value: \"==\", description: \"\\\"==\\\"\" },\n        peg$c64 = function() { return { relation: 'equ' } },\n        peg$c65 = \"<=\",\n        peg$c66 = { type: \"literal\", value: \"<=\", description: \"\\\"<=\\\"\" },\n        peg$c67 = function() { return { relation: 'leq' } },\n        peg$c68 = \">=\",\n        peg$c69 = { type: \"literal\", value: \">=\", description: \"\\\">=\\\"\" },\n        peg$c70 = function() { return { relation: 'geq' } },\n        peg$c71 = /^[0-9]/,\n        peg$c72 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c73 = function(digits) { return { priority: parseInt(digits.join(\"\"), 10) } },\n        peg$c74 = function(n) { return { constant: n } },\n        peg$c75 = function(n) { return { constant: -n } },\n        peg$c76 = \"+\",\n        peg$c77 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c78 = \"%\",\n        peg$c79 = { type: \"literal\", value: \"%\", description: \"\\\"%\\\"\" },\n        peg$c80 = function(n) { return { view: null, multiplier: n / 100 } },\n        peg$c81 = function(n) { return { view: null, multiplier: n / -100 } },\n        peg$c82 = function(vn, a, m, c) { return { view: vn.view, attribute: a ? a : undefined, multiplier: m ? m : 1, constant: c ? c : undefined } },\n        peg$c83 = \".left\",\n        peg$c84 = { type: \"literal\", value: \".left\", description: \"\\\".left\\\"\" },\n        peg$c85 = function() { return 'left'},\n        peg$c86 = \".right\",\n        peg$c87 = { type: \"literal\", value: \".right\", description: \"\\\".right\\\"\" },\n        peg$c88 = function() { return 'right'},\n        peg$c89 = \".top\",\n        peg$c90 = { type: \"literal\", value: \".top\", description: \"\\\".top\\\"\" },\n        peg$c91 = function() { return 'top'},\n        peg$c92 = \".bottom\",\n        peg$c93 = { type: \"literal\", value: \".bottom\", description: \"\\\".bottom\\\"\" },\n        peg$c94 = function() { return 'bottom'},\n        peg$c95 = \".width\",\n        peg$c96 = { type: \"literal\", value: \".width\", description: \"\\\".width\\\"\" },\n        peg$c97 = function() { return 'width'},\n        peg$c98 = \".height\",\n        peg$c99 = { type: \"literal\", value: \".height\", description: \"\\\".height\\\"\" },\n        peg$c100 = function() { return 'height'},\n        peg$c101 = \".centerX\",\n        peg$c102 = { type: \"literal\", value: \".centerX\", description: \"\\\".centerX\\\"\" },\n        peg$c103 = function() { return 'centerX'},\n        peg$c104 = \".centerY\",\n        peg$c105 = { type: \"literal\", value: \".centerY\", description: \"\\\".centerY\\\"\" },\n        peg$c106 = function() { return 'centerY'},\n        peg$c107 = \"/\",\n        peg$c108 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c109 = function(n) { return 1 / n; },\n        peg$c110 = \"/+\",\n        peg$c111 = { type: \"literal\", value: \"/+\", description: \"\\\"/+\\\"\" },\n        peg$c112 = \"/-\",\n        peg$c113 = { type: \"literal\", value: \"/-\", description: \"\\\"/-\\\"\" },\n        peg$c114 = function(n) { return -1 / n; },\n        peg$c115 = \"*\",\n        peg$c116 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c117 = function(n) { return n; },\n        peg$c118 = \"*+\",\n        peg$c119 = { type: \"literal\", value: \"*+\", description: \"\\\"*+\\\"\" },\n        peg$c120 = \"*-\",\n        peg$c121 = { type: \"literal\", value: \"*-\", description: \"\\\"*-\\\"\" },\n        peg$c122 = function(n) { return -n; },\n        peg$c123 = /^[a-zA-Z_]/,\n        peg$c124 = { type: \"class\", value: \"[a-zA-Z_]\", description: \"[a-zA-Z_]\" },\n        peg$c125 = /^[a-zA-Z0-9_]/,\n        peg$c126 = { type: \"class\", value: \"[a-zA-Z0-9_]\", description: \"[a-zA-Z0-9_]\" },\n        peg$c127 = function(f, v, r) { return { view: f + v, range: r, $parserOffset: offset() } },\n        peg$c128 = function(f, v) { return { view: f + v, $parserOffset: offset() } },\n        peg$c129 = \"..\",\n        peg$c130 = { type: \"literal\", value: \"..\", description: \"\\\"..\\\"\" },\n        peg$c131 = function(d) { return parseInt(d) },\n        peg$c132 = \".\",\n        peg$c133 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n        peg$c134 = function(digits, decimals) { return parseFloat(digits.concat(\".\").concat(decimals).join(\"\"), 10); },\n        peg$c135 = function(digits) { return parseInt(digits.join(\"\"), 10); },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsevisualFormatStringExt() {\n      var s0;\n\n      s0 = peg$parsevisualFormatString();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsevisualFormatStringConstraintExpression();\n      }\n\n      return s0;\n    }\n\n    function peg$parsevisualFormatStringConstraintExpression() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c1) {\n        s1 = peg$c1;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c2); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseviewName();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseattributePredicate();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parseattributePredicate();\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parseattributePredicate();\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecomments();\n              if (s5 === peg$FAILED) {\n                s5 = peg$c4;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c5(s2, s3, s4, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseattributePredicate() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseattribute();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepredicateListWithParens();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c6(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsevisualFormatString() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseorientation();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s3 = peg$c7;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c4;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsesuperview();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseconnection();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$c4;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseviewGroup();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = peg$parseconnection();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseviewGroup();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$c0;\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$parseconnection();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseviewGroup();\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseconnection();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesuperview();\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$c4;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsecomments();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c4;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c9(s1, s2, s3, s4, s5, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseorientation() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c10) {\n        s1 = peg$c10;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c11); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c12();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 72) {\n          s1 = peg$c13;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c15();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 86) {\n            s1 = peg$c16;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c17); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c18();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 90) {\n              s1 = peg$c19;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c20); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c21();\n            }\n            s0 = s1;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomments() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s2 = peg$c22;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s2 = peg$c22;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c24) {\n          s2 = peg$c24;\n          peg$currPos += 2;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c25); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c26); }\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (input.length > peg$currPos) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c26); }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesuperview() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 124) {\n        s1 = peg$c27;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c29();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseviewGroup() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c30;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c31); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseview();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c32;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c33); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseview();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c32;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c33); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseview();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s4 = peg$c34;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c35); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c36(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseview() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseviewNameRange();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepredicateListWithParens();\n        if (s2 === peg$FAILED) {\n          s2 = peg$c4;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecascadedViews();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c4;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c37(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecascadedViews() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 58) {\n        s1 = peg$c7;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parseconnection();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseviewGroup();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$parseconnection();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseviewGroup();\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseconnection();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c38(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseconnection() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c39) {\n        s1 = peg$c39;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c40); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c41();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c42;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c43); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsepredicateList();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s3 = peg$c42;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c43); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c44(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c42;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c43); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c45();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 126) {\n              s1 = peg$c46;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c47); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parseequalSpacingPredicateList();\n              if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 126) {\n                  s3 = peg$c46;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c47); }\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c44(s2);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 126) {\n                s1 = peg$c46;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c47); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c48();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$c49;\n                if (s1 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c50();\n                }\n                s0 = s1;\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicateList() {\n      var s0;\n\n      s0 = peg$parsesimplePredicate();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepredicateListWithParens();\n      }\n\n      return s0;\n    }\n\n    function peg$parsesimplePredicate() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsepercentage();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c51(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsenumber();\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c52(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicateListWithParens() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c53;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c54); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c32;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c33); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsepredicate();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c32;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c33); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsepredicate();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c55;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c56); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c57(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicate() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parserelation();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c4;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseobjectOfPredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 64) {\n            s4 = peg$c58;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c59); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepriority();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c4;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c60(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseequalSpacingPredicateList() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c53;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c54); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseequalSpacingPredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c32;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c33); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseequalSpacingPredicate();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c32;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c33); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseequalSpacingPredicate();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c55;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c56); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c57(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseequalSpacingPredicate() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parserelation();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c4;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseobjectOfPredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 64) {\n            s4 = peg$c58;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c59); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepriority();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c4;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c61(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parserelation() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c62) {\n        s1 = peg$c62;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c63); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c64();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c65) {\n          s1 = peg$c65;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c66); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c67();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c68) {\n            s1 = peg$c68;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c69); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c70();\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseobjectOfPredicate() {\n      var s0;\n\n      s0 = peg$parsepercentage();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseconstant();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseviewPredicate();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepriority() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c71.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c72); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c71.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c72); }\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c73(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseconstant() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c74(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c42;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c43); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c75(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c76;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c77); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumber();\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c74(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepercentage() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s2 = peg$c78;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c79); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c80(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c42;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c43); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 37) {\n              s3 = peg$c78;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c79); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c81(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c76;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c77); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumber();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 37) {\n                s3 = peg$c78;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c79); }\n              }\n              if (s3 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c80(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseviewPredicate() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parseviewName();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseattribute();\n        if (s2 === peg$FAILED) {\n          s2 = peg$c4;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsemultiplier();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c4;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseconstantExpr();\n            if (s4 === peg$FAILED) {\n              s4 = peg$c4;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c82(s1, s2, s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseattribute() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c83) {\n        s1 = peg$c83;\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c84); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c85();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 6) === peg$c86) {\n          s1 = peg$c86;\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c87); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c88();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 4) === peg$c89) {\n            s1 = peg$c89;\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c90); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c91();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7) === peg$c92) {\n              s1 = peg$c92;\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c93); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c94();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 6) === peg$c95) {\n                s1 = peg$c95;\n                peg$currPos += 6;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c96); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c97();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 7) === peg$c98) {\n                  s1 = peg$c98;\n                  peg$currPos += 7;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c99); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c100();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 8) === peg$c101) {\n                    s1 = peg$c101;\n                    peg$currPos += 8;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c102); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c103();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 8) === peg$c104) {\n                      s1 = peg$c104;\n                      peg$currPos += 8;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c105); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c106();\n                    }\n                    s0 = s1;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemultiplier() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s1 = peg$c107;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c108); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenumber();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c109(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c110) {\n          s1 = peg$c110;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c111); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c109(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c112) {\n            s1 = peg$c112;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c113); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumber();\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c114(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 42) {\n              s1 = peg$c115;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c116); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parsenumber();\n              if (s2 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c117(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c118) {\n                s1 = peg$c118;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c119); }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parsenumber();\n                if (s2 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c117(s2);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c120) {\n                  s1 = peg$c120;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c121); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parsenumber();\n                  if (s2 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c122(s2);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseconstantExpr() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c42;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c43); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenumber();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c122(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c76;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c77); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c117(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseviewNameRange() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      if (peg$c123.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c124); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c123.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c124); }\n          }\n        }\n      } else {\n        s2 = peg$c0;\n      }\n      if (s2 !== peg$FAILED) {\n        s2 = input.substring(s1, peg$currPos);\n      }\n      s1 = s2;\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = [];\n        if (peg$c125.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c126); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c125.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c126); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s3 = input.substring(s2, peg$currPos);\n        }\n        s2 = s3;\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parserange();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c127(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        if (peg$c123.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c124); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c123.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c124); }\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s2 = input.substring(s1, peg$currPos);\n        }\n        s1 = s2;\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = [];\n          if (peg$c125.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c126); }\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (peg$c125.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c126); }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s3 = input.substring(s2, peg$currPos);\n          }\n          s2 = s3;\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c128(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseviewName() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      if (peg$c123.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c124); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c123.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c124); }\n          }\n        }\n      } else {\n        s2 = peg$c0;\n      }\n      if (s2 !== peg$FAILED) {\n        s2 = input.substring(s1, peg$currPos);\n      }\n      s1 = s2;\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = [];\n        if (peg$c125.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c126); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c125.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c126); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s3 = input.substring(s2, peg$currPos);\n        }\n        s2 = s3;\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c128(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parserange() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c129) {\n        s1 = peg$c129;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c130); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c71.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c72); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c71.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c72); }\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c131(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c71.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c72); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c71.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c72); }\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c132;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c133); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (peg$c71.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c72); }\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              if (peg$c71.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c72); }\n              }\n            }\n          } else {\n            s3 = peg$c0;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c134(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c71.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c72); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c71.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c72); }\n            }\n          }\n        } else {\n          s1 = peg$c0;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c135(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n\n      function extend(dst) {\n        for (var i = 1; i < arguments.length; i++) {\n          for (var k in arguments[i]) {\n            dst[k] = arguments[i][k];\n          }\n        }\n        return dst;\n      }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();","import parser from './parser/parser';\nimport parserExt from './parser/parserExt';\nimport Attribute from './Attribute';\nimport Relation from './Relation';\n\nconst Orientation = {\n    HORIZONTAL: 1,\n    VERTICAL: 2,\n    ZINDEX: 4\n};\n\n/**\n * Helper function that inserts equal spacers (~).\n * @private\n */\nfunction _processEqualSpacer(context, stackView) {\n\n    // Determine unique name for the spacer\n    context.equalSpacerIndex = context.equalSpacerIndex || 1;\n    const name = '_~' + context.lineIndex + ':' + context.equalSpacerIndex + '~';\n    if (context.equalSpacerIndex > 1) {\n\n        // Ensure that all spacers have the same width/height\n        context.constraints.push({\n            view1: '_~' + context.lineIndex + ':1~',\n            attr1: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n            relation: context.relation.relation || Relation.EQU,\n            view2: name,\n            attr2: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n            priority: context.relation.priority\n        });\n    }\n    context.equalSpacerIndex++;\n\n    // Enforce view/proportional width/height\n    if (context.relation.view || (context.relation.multiplier && (context.relation.multiplier !== 1))) {\n        context.constraints.push({\n            view1: name,\n            attr1: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n            relation: context.relation.relation || Relation.EQU,\n            view2: context.relation.view,\n            attr2: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n            priority: context.relation.priority,\n            multiplier: context.relation.multiplier\n        });\n        context.relation.multiplier = undefined;\n    }\n    else if (context.relation.constant) {\n        context.constraints.push({\n            view1: name,\n            attr1: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n            relation: Relation.EQU,\n            view2: null,\n            attr2: Attribute.CONST,\n            priority: context.relation.priority,\n            constant: context.relation.constant\n        });\n        context.relation.constant = undefined;\n    }\n\n    // Add constraint\n    for (var i = 0; i < context.prevViews.length; i++) {\n        const prevView = context.prevViews[i];\n        switch (context.orientation) {\n            case Orientation.HORIZONTAL:\n                context.prevAttr = (prevView !== stackView) ? Attribute.RIGHT : Attribute.LEFT;\n                context.curAttr = Attribute.LEFT;\n                break;\n            case Orientation.VERTICAL:\n                context.prevAttr = (prevView !== stackView) ? Attribute.BOTTOM : Attribute.TOP;\n                context.curAttr = Attribute.TOP;\n                break;\n            case Orientation.ZINDEX:\n                context.prevAttr = Attribute.ZINDEX;\n                context.curAttr = Attribute.ZINDEX;\n                context.relation.constant = (prevView !== stackView) ? 'default' : 0;\n                break;\n        }\n        context.constraints.push({\n            view1: prevView,\n            attr1: context.prevAttr,\n            relation: context.relation.relation,\n            view2: name,\n            attr2: context.curAttr,\n            priority: context.relation.priority\n        });\n    }\n    context.prevViews = [name];\n}\n\n/**\n * Helper function that inserts proportional spacers (-12%-).\n * @private\n */\nfunction _processProportionalSpacer(context, stackView) {\n    context.proportionalSpacerIndex = context.proportionalSpacerIndex || 1;\n    const name = '_-' + context.lineIndex + ':' + context.proportionalSpacerIndex + '-';\n    context.proportionalSpacerIndex++;\n    context.constraints.push({\n        view1: name,\n        attr1: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n        relation: context.relation.relation || Relation.EQU,\n        view2: context.relation.view, // or relative to the stackView... food for thought\n        attr2: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n        priority: context.relation.priority,\n        multiplier: context.relation.multiplier\n    });\n    context.relation.multiplier = undefined;\n\n    // Add constraint\n    for (var i = 0; i < context.prevViews.length; i++) {\n        const prevView = context.prevViews[i];\n        switch (context.orientation) {\n            case Orientation.HORIZONTAL:\n                context.prevAttr = (prevView !== stackView) ? Attribute.RIGHT : Attribute.LEFT;\n                context.curAttr = Attribute.LEFT;\n                break;\n            case Orientation.VERTICAL:\n                context.prevAttr = (prevView !== stackView) ? Attribute.BOTTOM : Attribute.TOP;\n                context.curAttr = Attribute.TOP;\n                break;\n            case Orientation.ZINDEX:\n                context.prevAttr = Attribute.ZINDEX;\n                context.curAttr = Attribute.ZINDEX;\n                context.relation.constant = (prevView !== stackView) ? 'default' : 0;\n                break;\n        }\n        context.constraints.push({\n            view1: prevView,\n            attr1: context.prevAttr,\n            relation: context.relation.relation,\n            view2: name,\n            attr2: context.curAttr,\n            priority: context.relation.priority\n        });\n    }\n    context.prevViews = [name];\n}\n\n/**\n * In case of a stack-view, set constraints for opposite orientations\n * @private\n */\nfunction _processStackView(context, name, subView) {\n    let viewName;\n    for (var orientation = 1; orientation <= 4; orientation *= 2) {\n        if ((subView.orientations & orientation) &&\n            (subView.stack.orientation !== orientation) &&\n            !(subView.stack.processedOrientations & orientation)) {\n            subView.stack.processedOrientations = subView.stack.processedOrientations | orientation;\n            viewName = viewName || {\n                name: name,\n                type: 'stack'\n            };\n            for (var i = 0, j = subView.stack.subViews.length; i < j; i++) {\n                if (orientation === Orientation.ZINDEX) {\n                    context.constraints.push({\n                        view1: viewName,\n                        attr1: Attribute.ZINDEX,\n                        relation: Relation.EQU,\n                        view2: subView.stack.subViews[i],\n                        attr2: Attribute.ZINDEX\n                    });\n                }\n                else {\n                    context.constraints.push({\n                        view1: viewName,\n                        attr1: (orientation === Orientation.VERTICAL) ? Attribute.HEIGHT : Attribute.WIDTH,\n                        relation: Relation.EQU,\n                        view2: subView.stack.subViews[i],\n                        attr2: (orientation === Orientation.VERTICAL) ? Attribute.HEIGHT : Attribute.WIDTH\n                    });\n                    context.constraints.push({\n                        view1: viewName,\n                        attr1: (orientation === Orientation.VERTICAL) ? Attribute.TOP : Attribute.LEFT,\n                        relation: Relation.EQU,\n                        view2: subView.stack.subViews[i],\n                        attr2: (orientation === Orientation.VERTICAL) ? Attribute.TOP : Attribute.LEFT\n                    });\n                }\n            }\n        }\n    }\n}\n\n/**\n * Recursive helper function converts a view-name and a range to a series\n * of view-names (e.g. [child1, child2, child3, ...]).\n * @private\n */\nfunction _getRange(name, range) {\n    if (range === true) {\n        range = name.match(/\\.\\.\\d+$/);\n        if (range) {\n            name = name.substring(0, name.length - range[0].length);\n            range = parseInt(range[0].substring(2));\n        }\n    }\n    if (!range) {\n        return [name];\n    }\n    var start = name.match(/\\d+$/);\n    var res = [];\n    var i;\n    if (start) {\n        name = name.substring(0, name.length - start[0].length);\n        for (i = parseInt(start); i <= range; i++) {\n            res.push(name + i);\n        }\n    }\n    else {\n        res.push(name);\n        for (i = 2; i <= range; i++) {\n            res.push(name + i);\n        }\n    }\n    return res;\n}\n\n/**\n * Recursive helper function that processes the cascaded data.\n * @private\n */\nfunction _processCascade(context, cascade, parentItem) {\n    const stackView = parentItem ? parentItem.view : null;\n    const subViews = [];\n    let curViews = [];\n    let subView;\n    if (stackView) {\n        cascade.push({view: stackView});\n        curViews.push(stackView);\n    }\n    for (var i = 0; i < cascade.length; i++) {\n        let item = cascade[i];\n        if ((!Array.isArray(item) && item.hasOwnProperty('view')) ||\n            (Array.isArray(item) && item[0].view && !item[0].relation)) {\n            const items = Array.isArray(item) ? item : [item];\n            for (var z = 0; z < items.length; z++) {\n                item = items[z];\n                const viewRange = (item === ',') ? [] : item.view ? _getRange(item.view, item.range) : [null];\n                for (var r = 0; r < viewRange.length; r++) {\n                    const curView = viewRange[r];\n                    curViews.push(curView);\n\n                    //\n                    // Add this view to the collection of subViews\n                    //\n                    if (curView !== stackView) {\n                        subViews.push(curView);\n                        subView = context.subViews[curView];\n                        if (!subView) {\n                            subView = {orientations: 0};\n                            context.subViews[curView] = subView;\n                        }\n                        subView.orientations = subView.orientations | context.orientation;\n                        if (subView.stack) {\n                            _processStackView(context, curView, subView);\n                        }\n                    }\n\n                    //\n                    // Process the relationship between this and the previous views\n                    //\n                    if ((context.prevViews !== undefined) && (curView !== undefined) && context.relation) {\n                        if (context.relation.relation !== 'none') {\n                            for (var p = 0; p < context.prevViews.length; p++) {\n                                const prevView = context.prevViews[p];\n                                switch (context.orientation) {\n                                    case Orientation.HORIZONTAL:\n                                        context.prevAttr = (prevView !== stackView) ? Attribute.RIGHT : Attribute.LEFT;\n                                        context.curAttr = (curView !== stackView) ? Attribute.LEFT : Attribute.RIGHT;\n                                        break;\n                                    case Orientation.VERTICAL:\n                                        context.prevAttr = (prevView !== stackView) ? Attribute.BOTTOM : Attribute.TOP;\n                                        context.curAttr = (curView !== stackView) ? Attribute.TOP : Attribute.BOTTOM;\n                                        break;\n                                    case Orientation.ZINDEX:\n                                        context.prevAttr = Attribute.ZINDEX;\n                                        context.curAttr = Attribute.ZINDEX;\n                                        context.relation.constant = !prevView ? 0 : (context.relation.constant || 'default');\n                                        break;\n                                }\n                                context.constraints.push({\n                                    view1: prevView,\n                                    attr1: context.prevAttr,\n                                    relation: context.relation.relation,\n                                    view2: curView,\n                                    attr2: context.curAttr,\n                                    multiplier: context.relation.multiplier,\n                                    constant: ((context.relation.constant === 'default') || !context.relation.constant) ? context.relation.constant : -context.relation.constant,\n                                    priority: context.relation.priority\n                                });\n                            }\n                        }\n                    }\n\n                    //\n                    // Process view size constraints\n                    //\n                    const constraints = item.constraints;\n                    if (constraints) {\n                        for (var n = 0; n < constraints.length; n++) {\n                            context.prevAttr = context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT;\n                            context.curAttr = (constraints[n].view || constraints[n].multiplier) ?\n                                    (constraints[n].attribute || context.prevAttr) :\n                                    (constraints[n].variable ? Attribute.VARIABLE : Attribute.CONST);\n                            context.constraints.push({\n                                view1: curView,\n                                attr1: context.prevAttr,\n                                relation: constraints[n].relation,\n                                view2: constraints[n].view,\n                                attr2: context.curAttr,\n                                multiplier: constraints[n].multiplier,\n                                constant: constraints[n].constant,\n                                priority: constraints[n].priority\n                            });\n                        }\n                    }\n\n                    //\n                    // Process cascaded data (child stack-views)\n                    //\n                    if (item.cascade) {\n                        _processCascade(context, item.cascade, item);\n                    }\n                }\n            }\n        }\n        else if (item !== ',') {\n            context.prevViews = curViews;\n            curViews = [];\n            context.relation = item[0];\n            if (context.prevViews !== undefined) {\n                if (context.relation.equalSpacing) {\n                    _processEqualSpacer(context, stackView);\n                }\n                if (context.relation.multiplier) {\n                    _processProportionalSpacer(context, stackView);\n                }\n            }\n        }\n    }\n\n    if (stackView) {\n        subView = context.subViews[stackView];\n        if (!subView) {\n            subView = {orientations: context.orientation};\n            context.subViews[stackView] = subView;\n        }\n        else if (subView.stack) {\n            const err = new Error('A stack named \"' + stackView + '\" has already been created');\n            err.column = parentItem.$parserOffset + 1;\n            throw err;\n        }\n        subView.stack = {\n            orientation: context.orientation,\n            processedOrientations: context.orientation,\n            subViews: subViews\n        };\n        _processStackView(context, stackView, subView);\n    }\n}\n\nconst metaInfoCategories = [\n    'viewport',\n    'spacing',\n    'colors',\n    'shapes',\n    'widths',\n    'heights'\n];\n\n/**\n * VisualFormat\n *\n * @namespace VisualFormat\n */\nclass VisualFormat {\n\n    /**\n     * Parses a single line of vfl into an array of constraint definitions.\n     *\n     * When the visual-format could not be succesfully parsed an exception is thrown containing\n     * additional info about the parse error and column position.\n     *\n     * @param {String} visualFormat Visual format string (cannot contain line-endings!).\n     * @param {Object} [options] Configuration options.\n     * @param {Boolean} [options.extended] When set to true uses the extended syntax (default: false).\n     * @param {String} [options.outFormat] Output format (`constraints` or `raw`) (default: `constraints`).\n     * @param {Number} [options.lineIndex] Line-index used when auto generating equal-spacing constraints.\n     * @return {Array} Array of constraint definitions.\n     */\n    static parseLine(visualFormat, options) {\n        if ((visualFormat.length === 0) ||\n            (options && options.extended && (visualFormat.indexOf('//') === 0))) {\n            return [];\n        }\n        const res = (options && options.extended) ? parserExt.parse(visualFormat) : parser.parse(visualFormat);\n        if (options && options.outFormat === 'raw') {\n            return [res];\n        }\n        let context = {\n            constraints: [],\n            lineIndex: (options ? options.lineIndex : undefined) || 1,\n            subViews: (options ? options.subViews : undefined) || {}\n        };\n        if (res.type === 'attribute') {\n            for (let n = 0; n < res.attributes.length; n++) {\n                const attr = res.attributes[n];\n                for (let m = 0; m < attr.predicates.length; m++) {\n                    const predicate = attr.predicates[m];\n                    context.constraints.push({\n                      view1: res.view,\n                      attr1: attr.attr,\n                      relation: predicate.relation,\n                      view2: predicate.view,\n                      attr2: predicate.attribute || attr.attr,\n                      multiplier: predicate.multiplier,\n                      constant: predicate.constant,\n                      priority: predicate.priority\n                    });\n                }\n            }\n        } else {\n          switch (res.orientation) {\n            case 'horizontal':\n              context.orientation = Orientation.HORIZONTAL;\n              context.horizontal = true;\n              _processCascade(context, res.cascade, null);\n              break;\n            case 'vertical':\n              context.orientation = Orientation.VERTICAL;\n              _processCascade(context, res.cascade, null);\n              break;\n            case 'horzvert':\n              context.orientation = Orientation.HORIZONTAL;\n              context.horizontal = true;\n              _processCascade(context, res.cascade, null);\n              context = {\n                constraints: context.constraints,\n                lineIndex: context.lineIndex,\n                subViews: context.subViews,\n                orientation: Orientation.VERTICAL\n              };\n              _processCascade(context, res.cascade, null);\n              break;\n            case 'zIndex':\n              context.orientation = Orientation.ZINDEX;\n              _processCascade(context, res.cascade, null);\n              break;\n          }\n        }\n        return context.constraints;\n    }\n\n    /**\n     * Parses one or more visual format strings into an array of constraint definitions.\n     *\n     * When the visual-format could not be succesfully parsed an exception is thrown containing\n     * additional info about the parse error and column position.\n     *\n     * @param {String|Array} visualFormat One or more visual format strings.\n     * @param {Object} [options] Configuration options.\n     * @param {Boolean} [options.extended] When set to true uses the extended syntax (default: false).\n     * @param {Boolean} [options.strict] When set to false trims any leading/trailing spaces and ignores empty lines (default: true).\n     * @param {String} [options.lineSeparator] String that defines the end of a line (default `\\n`).\n     * @param {String} [options.outFormat] Output format (`constraints` or `raw`) (default: `constraints`).\n     * @return {Array} Array of constraint definitions.\n     */\n    static parse(visualFormat, options) {\n        const lineSeparator = (options && options.lineSeparator) ? options.lineSeparator : '\\n';\n        if (!Array.isArray(visualFormat) && (visualFormat.indexOf(lineSeparator) < 0)) {\n            try {\n                return this.parseLine(visualFormat, options);\n            }\n            catch (err) {\n                err.source = visualFormat;\n                throw err;\n            }\n        }\n\n        // Decompose visual-format into an array of strings, and within those strings\n        // search for line-endings, and treat each line as a seperate visual-format.\n        visualFormat = Array.isArray(visualFormat) ? visualFormat : [visualFormat];\n        let lines;\n        let constraints = [];\n        let lineIndex = 0;\n        let line;\n        const parseOptions = {\n            lineIndex: lineIndex,\n            extended: (options && options.extended),\n            strict: (options && (options.strict !== undefined)) ? options.strict : true,\n            outFormat: options ? options.outFormat : undefined,\n            subViews: {}\n        };\n        try {\n            for (var i = 0; i < visualFormat.length; i++) {\n                lines = visualFormat[i].split(lineSeparator);\n                for (var j = 0; j < lines.length; j++) {\n                    line = lines[j];\n                    lineIndex++;\n                    parseOptions.lineIndex = lineIndex;\n                    if (!parseOptions.strict) {\n                        line = line.trim();\n                    }\n                    if (parseOptions.strict || line.length) {\n                        constraints = constraints.concat(this.parseLine(line, parseOptions));\n                    }\n                }\n            }\n        }\n        catch (err) {\n            err.source = line;\n            err.line = lineIndex;\n            throw err;\n        }\n        return constraints;\n    }\n\n    /**\n     * Parses meta information from the comments in the VFL.\n     *\n     * Additional meta information can be specified in the comments\n     * for previewing and rendering purposes. For instance, the view-port\n     * aspect-ratio, sub-view widths and colors, can be specified. The\n     * following example renders three colored circles in the visual-format editor:\n     *\n     * ```vfl\n     * //viewport aspect-ratio:3/1 max-height:300\n     * //colors red:#FF0000 green:#00FF00 blue:#0000FF\n     * //shapes red:circle green:circle blue:circle\n     * H:|-[row:[red(green,blue)]-[green]-[blue]]-|\n     * V:|[row]|\n     * ```\n     *\n     * Supported categories and properties:\n     *\n     * |Category|Property|Example|\n     * |--------|--------|-------|\n     * |`viewport`|`aspect-ratio:{width}/{height}`|`//viewport aspect-ratio:16/9`|\n     * ||`width:[{number}/intrinsic]`|`//viewport width:10`|\n     * ||`height:[{number}/intrinsic]`|`//viewport height:intrinsic`|\n     * ||`min-width:{number}`|\n     * ||`max-width:{number}`|\n     * ||`min-height:{number}`|\n     * ||`max-height:{number}`|\n     * |`spacing`|`[{number}/array]`|`//spacing:8` or `//spacing:[10, 20, 5]`|\n     * |`widths`|`{view-name}:[{number}/intrinsic]`|`//widths subview1:100`|\n     * |`heights`|`{view-name}:[{number}/intrinsic]`|`//heights subview1:intrinsic`|\n     * |`colors`|`{view-name}:{color}`|`//colors redview:#FF0000 blueview:#00FF00`|\n     * |`shapes`|`{view-name}:[circle/square]`|`//shapes avatar:circle`|\n     *\n     * @param {String|Array} visualFormat One or more visual format strings.\n     * @param {Object} [options] Configuration options.\n     * @param {String} [options.lineSeparator] String that defines the end of a line (default `\\n`).\n     * @param {String} [options.prefix] When specified, also processes the categories using that prefix (e.g. \"-dev-viewport max-height:10\").\n     * @return {Object} meta-info\n     */\n    static parseMetaInfo(visualFormat, options) {\n        const lineSeparator = (options && options.lineSeparator) ? options.lineSeparator : '\\n';\n        const prefix = options ? options.prefix : undefined;\n        visualFormat = Array.isArray(visualFormat) ? visualFormat : [visualFormat];\n        const metaInfo = {};\n        var key;\n        for (var k = 0; k < visualFormat.length; k++) {\n            const lines = visualFormat[k].split(lineSeparator);\n            for (var i = 0; i < lines.length; i++) {\n                const line = lines[i];\n                for (var c = 0; c < metaInfoCategories.length; c++) {\n                    for (var s = 0; s < (prefix ? 2 : 1); s++) {\n                        const category = metaInfoCategories[c];\n                        const prefixedCategory = ((s === 0) ? '' : prefix) + category;\n                        if (line.indexOf('//' + prefixedCategory + ' ') === 0) {\n                            const items = line.substring(3 + prefixedCategory.length).split(' ');\n                            for (var j = 0; j < items.length; j++) {\n                                metaInfo[category] = metaInfo[category] || {};\n                                const item = items[j].split(':');\n                                const names = _getRange(item[0], true);\n                                for (var r = 0; r < names.length; r++) {\n                                    metaInfo[category][names[r]] = (item.length > 1) ? item[1] : '';\n                                }\n                            }\n                        }\n                        else if (line.indexOf('//' + prefixedCategory + ':') === 0) {\n                            metaInfo[category] = line.substring(3 + prefixedCategory.length);\n                        }\n                    }\n                }\n            }\n        }\n        if (metaInfo.viewport) {\n            const viewport = metaInfo.viewport;\n            var aspectRatio = viewport['aspect-ratio'];\n            if (aspectRatio) {\n                aspectRatio = aspectRatio.split('/');\n                viewport['aspect-ratio'] = parseInt(aspectRatio[0]) / parseInt(aspectRatio[1]);\n            }\n            if (viewport.height !== undefined) {\n                viewport.height = (viewport.height === 'intrinsic') ? true : parseInt(viewport.height);\n            }\n            if (viewport.width !== undefined) {\n                viewport.width = (viewport.width === 'intrinsic') ? true : parseInt(viewport.width);\n            }\n            if (viewport['max-height'] !== undefined) {\n                viewport['max-height'] = parseInt(viewport['max-height']);\n            }\n            if (viewport['max-width'] !== undefined) {\n                viewport['max-width'] = parseInt(viewport['max-width']);\n            }\n            if (viewport['min-height'] !== undefined) {\n                viewport['min-height'] = parseInt(viewport['min-height']);\n            }\n            if (viewport['min-width'] !== undefined) {\n                viewport['min-width'] = parseInt(viewport['min-width']);\n            }\n        }\n        if (metaInfo.widths) {\n            for (key in metaInfo.widths) {\n                const width = (metaInfo.widths[key] === 'intrinsic') ? true : parseInt(metaInfo.widths[key]);\n                metaInfo.widths[key] = width;\n                if ((width === undefined) || isNaN(width)) {\n                    delete metaInfo.widths[key];\n                }\n            }\n        }\n        if (metaInfo.heights) {\n            for (key in metaInfo.heights) {\n                const height = (metaInfo.heights[key] === 'intrinsic') ? true : parseInt(metaInfo.heights[key]);\n                metaInfo.heights[key] = height;\n                if ((height === undefined) || isNaN(height)) {\n                    delete metaInfo.heights[key];\n                }\n            }\n        }\n        if (metaInfo.spacing) {\n            const value = JSON.parse(metaInfo.spacing);\n            metaInfo.spacing = value;\n            if (Array.isArray(value)){\n              for (var sIdx = 0, len = value.length; sIdx < len; sIdx++) {\n                if (isNaN(value[sIdx])){\n                  delete metaInfo.spacing;\n                  break;\n                }\n              }\n            } else if (value === undefined || isNaN(value)){\n              delete metaInfo.spacing;\n            }\n        }\n        return metaInfo;\n    }\n}\n\nexport default VisualFormat;\n","/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nexport function createMap(compare) {\n    return new IndexedMap();\n}\nvar IndexedMap = /** @class */ (function () {\n    function IndexedMap() {\n        this.index = {};\n        this.array = [];\n    }\n    /**\n     * Returns the number of items in the array.\n     */\n    IndexedMap.prototype.size = function () {\n        return this.array.length;\n    };\n    /**\n     * Returns true if the array is empty.\n     */\n    IndexedMap.prototype.empty = function () {\n        return this.array.length === 0;\n    };\n    /**\n     * Returns the item at the given array index.\n     *\n     * @param index The integer index of the desired item.\n     */\n    IndexedMap.prototype.itemAt = function (index) {\n        return this.array[index];\n    };\n    /**\n     * Returns true if the key is in the array, false otherwise.\n     *\n     * @param key The key to locate in the array.\n     */\n    IndexedMap.prototype.contains = function (key) {\n        return this.index[key.id()] !== undefined;\n    };\n    /**\n     * Returns the pair associated with the given key, or undefined.\n     *\n     * @param key The key to locate in the array.\n     */\n    IndexedMap.prototype.find = function (key) {\n        var i = this.index[key.id()];\n        return i === undefined ? undefined : this.array[i];\n    };\n    /**\n     * Returns the pair associated with the key if it exists.\n     *\n     * If the key does not exist, a new pair will be created and\n     * inserted using the value created by the given factory.\n     *\n     * @param key The key to locate in the array.\n     * @param factory The function which creates the default value.\n     */\n    IndexedMap.prototype.setDefault = function (key, factory) {\n        var i = this.index[key.id()];\n        if (i === undefined) {\n            var pair = new Pair(key, factory());\n            this.index[key.id()] = this.array.length;\n            this.array.push(pair);\n            return pair;\n        }\n        else {\n            return this.array[i];\n        }\n    };\n    /**\n     * Insert the pair into the array and return the pair.\n     *\n     * This will overwrite any existing entry in the array.\n     *\n     * @param key The key portion of the pair.\n     * @param value The value portion of the pair.\n     */\n    IndexedMap.prototype.insert = function (key, value) {\n        var pair = new Pair(key, value);\n        var i = this.index[key.id()];\n        if (i === undefined) {\n            this.index[key.id()] = this.array.length;\n            this.array.push(pair);\n        }\n        else {\n            this.array[i] = pair;\n        }\n        return pair;\n    };\n    /**\n     * Removes and returns the pair for the given key, or undefined.\n     *\n     * @param key The key to remove from the map.\n     */\n    IndexedMap.prototype.erase = function (key) {\n        var i = this.index[key.id()];\n        if (i === undefined) {\n            return undefined;\n        }\n        this.index[key.id()] = undefined;\n        var pair = this.array[i];\n        var last = this.array.pop();\n        if (pair !== last) {\n            this.array[i] = last;\n            this.index[last.first.id()] = i;\n        }\n        return pair;\n    };\n    /**\n     * Create a copy of this associative array.\n     */\n    IndexedMap.prototype.copy = function () {\n        var copy = new IndexedMap();\n        for (var i = 0; i < this.array.length; i++) {\n            var pair = this.array[i].copy();\n            copy.array[i] = pair;\n            copy.index[pair.first.id()] = i;\n        }\n        return copy;\n    };\n    return IndexedMap;\n}());\n/**\n * A class which defines a generic pair object.\n * @private\n */\n// tslint:disable: max-classes-per-file\nvar Pair = /** @class */ (function () {\n    /**\n     * Construct a new Pair object.\n     *\n     * @param first The first item of the pair.\n     * @param second The second item of the pair.\n     */\n    function Pair(first, second) {\n        this.first = first;\n        this.second = second;\n    }\n    /**\n     * Create a copy of the pair.\n     */\n    Pair.prototype.copy = function () { return new Pair(this.first, this.second); };\n    return Pair;\n}());\n","/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { Expression } from \"./expression\";\n/**\n * The primary user constraint variable.\n *\n * @class\n * @param {String} [name=\"\"] The name to associated with the variable.\n */\nvar Variable = /** @class */ (function () {\n    function Variable(name) {\n        if (name === void 0) { name = \"\"; }\n        this._value = 0.0;\n        this._context = null;\n        this._id = VarId++;\n        this._name = name;\n    }\n    /**\n     * A static variable comparison function.\n     * @private\n     */\n    Variable.Compare = function (a, b) {\n        return a.id() - b.id();\n    };\n    /**\n     * Returns the unique id number of the variable.\n     * @private\n     */\n    Variable.prototype.id = function () {\n        return this._id;\n    };\n    /**\n     * Returns the name of the variable.\n     *\n     * @return {String} name of the variable\n     */\n    Variable.prototype.name = function () {\n        return this._name;\n    };\n    /**\n     * Set the name of the variable.\n     *\n     * @param {String} name Name of the variable\n     */\n    Variable.prototype.setName = function (name) {\n        this._name = name;\n    };\n    /**\n     * Returns the user context object of the variable.\n     * @private\n     */\n    Variable.prototype.context = function () {\n        return this._context;\n    };\n    /**\n     * Set the user context object of the variable.\n     * @private\n     */\n    Variable.prototype.setContext = function (context) {\n        this._context = context;\n    };\n    /**\n     * Returns the value of the variable.\n     *\n     * @return {Number} Calculated value\n     */\n    Variable.prototype.value = function () {\n        return this._value;\n    };\n    /**\n     * Set the value of the variable.\n     * @private\n     */\n    Variable.prototype.setValue = function (value) {\n        this._value = value;\n    };\n    /**\n     * Creates a new Expression by adding a number, variable or expression\n     * to the variable.\n     *\n     * @param {Number|Variable|Expression} value Value to add.\n     * @return {Expression} expression\n     */\n    Variable.prototype.plus = function (value) {\n        return new Expression(this, value);\n    };\n    /**\n     * Creates a new Expression by substracting a number, variable or expression\n     * from the variable.\n     *\n     * @param {Number|Variable|Expression} value Value to substract.\n     * @return {Expression} expression\n     */\n    Variable.prototype.minus = function (value) {\n        return new Expression(this, typeof value === \"number\" ? -value : [-1, value]);\n    };\n    /**\n     * Creates a new Expression by multiplying with a fixed number.\n     *\n     * @param {Number} coefficient Coefficient to multiply with.\n     * @return {Expression} expression\n     */\n    Variable.prototype.multiply = function (coefficient) {\n        return new Expression([coefficient, this]);\n    };\n    /**\n     * Creates a new Expression by dividing with a fixed number.\n     *\n     * @param {Number} coefficient Coefficient to divide by.\n     * @return {Expression} expression\n     */\n    Variable.prototype.divide = function (coefficient) {\n        return new Expression([1 / coefficient, this]);\n    };\n    /**\n     * Returns the JSON representation of the variable.\n     * @private\n     */\n    Variable.prototype.toJSON = function () {\n        return {\n            name: this._name,\n            value: this._value,\n        };\n    };\n    Variable.prototype.toString = function () {\n        return this._context + \"[\" + this._name + \":\" + this._value + \"]\";\n    };\n    return Variable;\n}());\nexport { Variable };\n/**\n * The internal variable id counter.\n * @private\n */\nvar VarId = 0;\n","/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { createMap } from \"./maptype\";\nimport { Variable } from \"./variable\";\n/**\n * An expression of variable terms and a constant.\n *\n * The constructor accepts an arbitrary number of parameters,\n * each of which must be one of the following types:\n *  - number\n *  - Variable\n *  - Expression\n *  - 2-tuple of [number, Variable|Expression]\n *\n * The parameters are summed. The tuples are multiplied.\n *\n * @class\n * @param {...(number|Variable|Expression|Array)} args\n */\nvar Expression = /** @class */ (function () {\n    function Expression() {\n        var parsed = parseArgs(arguments);\n        this._terms = parsed.terms;\n        this._constant = parsed.constant;\n    }\n    /**\n     * Returns the mapping of terms in the expression.\n     *\n     * This *must* be treated as const.\n     * @private\n     */\n    Expression.prototype.terms = function () {\n        return this._terms;\n    };\n    /**\n     * Returns the constant of the expression.\n     * @private\n     */\n    Expression.prototype.constant = function () {\n        return this._constant;\n    };\n    /**\n     * Returns the computed value of the expression.\n     *\n     * @private\n     * @return {Number} computed value of the expression\n     */\n    Expression.prototype.value = function () {\n        var result = this._constant;\n        for (var i = 0, n = this._terms.size(); i < n; i++) {\n            var pair = this._terms.itemAt(i);\n            result += pair.first.value() * pair.second;\n        }\n        return result;\n    };\n    /**\n     * Creates a new Expression by adding a number, variable or expression\n     * to the expression.\n     *\n     * @param {Number|Variable|Expression} value Value to add.\n     * @return {Expression} expression\n     */\n    Expression.prototype.plus = function (value) {\n        return new Expression(this, value);\n    };\n    /**\n     * Creates a new Expression by substracting a number, variable or expression\n     * from the expression.\n     *\n     * @param {Number|Variable|Expression} value Value to substract.\n     * @return {Expression} expression\n     */\n    Expression.prototype.minus = function (value) {\n        return new Expression(this, typeof value === \"number\" ? -value : [-1, value]);\n    };\n    /**\n     * Creates a new Expression by multiplying with a fixed number.\n     *\n     * @param {Number} coefficient Coefficient to multiply with.\n     * @return {Expression} expression\n     */\n    Expression.prototype.multiply = function (coefficient) {\n        return new Expression([coefficient, this]);\n    };\n    /**\n     * Creates a new Expression by dividing with a fixed number.\n     *\n     * @param {Number} coefficient Coefficient to divide by.\n     * @return {Expression} expression\n     */\n    Expression.prototype.divide = function (coefficient) {\n        return new Expression([1 / coefficient, this]);\n    };\n    Expression.prototype.isConstant = function () {\n        return this._terms.size() == 0;\n    };\n    Expression.prototype.toString = function () {\n        var result = this._terms.array.map(function (pair, idx) {\n            return (pair.second + \"*\" + pair.first.toString());\n        }).join(\" + \");\n        if (!this.isConstant() && this._constant !== 0) {\n            result += \" + \";\n        }\n        result += this._constant;\n        return result;\n    };\n    return Expression;\n}());\nexport { Expression };\n/**\n * An internal argument parsing function.\n * @private\n */\nfunction parseArgs(args) {\n    var constant = 0.0;\n    var factory = function () { return 0.0; };\n    var terms = createMap(Variable.Compare);\n    for (var i = 0, n = args.length; i < n; ++i) {\n        var item = args[i];\n        if (typeof item === \"number\") {\n            constant += item;\n        }\n        else if (item instanceof Variable) {\n            terms.setDefault(item, factory).second += 1.0;\n        }\n        else if (item instanceof Expression) {\n            constant += item.constant();\n            var terms2 = item.terms();\n            for (var j = 0, k = terms2.size(); j < k; j++) {\n                var termPair = terms2.itemAt(j);\n                terms.setDefault(termPair.first, factory).second += termPair.second;\n            }\n        }\n        else if (item instanceof Array) {\n            if (item.length !== 2) {\n                throw new Error(\"array must have length 2\");\n            }\n            var value = item[0];\n            var value2 = item[1];\n            if (typeof value !== \"number\") {\n                throw new Error(\"array item 0 must be a number\");\n            }\n            if (value2 instanceof Variable) {\n                terms.setDefault(value2, factory).second += value;\n            }\n            else if (value2 instanceof Expression) {\n                constant += (value2.constant() * value);\n                var terms2 = value2.terms();\n                for (var j = 0, k = terms2.size(); j < k; j++) {\n                    var termPair = terms2.itemAt(j);\n                    terms.setDefault(termPair.first, factory).second += (termPair.second * value);\n                }\n            }\n            else {\n                throw new Error(\"array item 1 must be a variable or expression\");\n            }\n        }\n        else {\n            throw new Error(\"invalid Expression argument: \" + item);\n        }\n    }\n    return { terms: terms, constant: constant };\n}\n","/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * @class Strength\n */\nvar Strength = /** @class */ (function () {\n    function Strength() {\n    }\n    /**\n     * Create a new symbolic strength.\n     *\n     * @param {Number} a strong\n     * @param {Number} b medium\n     * @param {Number} c weak\n     * @param {Number} [w] weight\n     * @return {Number} strength\n    */\n    Strength.create = function (a, b, c, w) {\n        if (w === void 0) { w = 1.0; }\n        var result = 0.0;\n        result += Math.max(0.0, Math.min(1000.0, a * w)) * 1000000.0;\n        result += Math.max(0.0, Math.min(1000.0, b * w)) * 1000.0;\n        result += Math.max(0.0, Math.min(1000.0, c * w));\n        return result;\n    };\n    /**\n     * Clip a symbolic strength to the allowed min and max.\n     * @private\n     */\n    Strength.clip = function (value) {\n        return Math.max(0.0, Math.min(Strength.required, value));\n    };\n    /**\n     * The 'required' symbolic strength.\n     */\n    Strength.required = Strength.create(1000.0, 1000.0, 1000.0);\n    /**\n     * The 'strong' symbolic strength.\n     */\n    Strength.strong = Strength.create(1.0, 0.0, 0.0);\n    /**\n     * The 'medium' symbolic strength.\n     */\n    Strength.medium = Strength.create(0.0, 1.0, 0.0);\n    /**\n     * The 'weak' symbolic strength.\n     */\n    Strength.weak = Strength.create(0.0, 0.0, 1.0);\n    return Strength;\n}());\nexport { Strength };\n","/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { Expression } from \"./expression\";\nimport { Strength } from \"./strength\";\n/**\n * An enum defining the linear constraint operators.\n *\n * |Value|Operator|Description|\n * |----|-----|-----|\n * |`Le`|<=|Less than equal|\n * |`Ge`|>=|Greater than equal|\n * |`Eq`|==|Equal|\n *\n * @enum {Number}\n */\nexport var Operator;\n(function (Operator) {\n    Operator[Operator[\"Le\"] = 0] = \"Le\";\n    Operator[Operator[\"Ge\"] = 1] = \"Ge\";\n    Operator[Operator[\"Eq\"] = 2] = \"Eq\";\n})(Operator || (Operator = {}));\n/**\n * A linear constraint equation.\n *\n * A constraint equation is composed of an expression, an operator,\n * and a strength. The RHS of the equation is implicitly zero.\n *\n * @class\n * @param {Expression} expression The constraint expression (LHS).\n * @param {Operator} operator The equation operator.\n * @param {Expression} [rhs] Right hand side of the expression.\n * @param {Number} [strength=Strength.required] The strength of the constraint.\n */\nvar Constraint = /** @class */ (function () {\n    function Constraint(expression, operator, rhs, strength) {\n        if (strength === void 0) { strength = Strength.required; }\n        this._id = CnId++;\n        this._operator = operator;\n        this._strength = Strength.clip(strength);\n        if ((rhs === undefined) && (expression instanceof Expression)) {\n            this._expression = expression;\n        }\n        else {\n            this._expression = expression.minus(rhs);\n        }\n    }\n    /**\n     * A static constraint comparison function.\n     * @private\n     */\n    Constraint.Compare = function (a, b) {\n        return a.id() - b.id();\n    };\n    /**\n     * Returns the unique id number of the constraint.\n     * @private\n     */\n    Constraint.prototype.id = function () {\n        return this._id;\n    };\n    /**\n     * Returns the expression of the constraint.\n     *\n     * @return {Expression} expression\n     */\n    Constraint.prototype.expression = function () {\n        return this._expression;\n    };\n    /**\n     * Returns the relational operator of the constraint.\n     *\n     * @return {Operator} linear constraint operator\n     */\n    Constraint.prototype.op = function () {\n        return this._operator;\n    };\n    /**\n     * Returns the strength of the constraint.\n     *\n     * @return {Number} strength\n     */\n    Constraint.prototype.strength = function () {\n        return this._strength;\n    };\n    Constraint.prototype.toString = function () {\n        return this._expression.toString() + \" \" + [\"<=\", \">=\", \"=\"][this._operator] + \" 0 (\" + this._strength.toString() + \")\";\n    };\n    return Constraint;\n}());\nexport { Constraint };\n/**\n * The internal constraint id counter.\n * @private\n */\nvar CnId = 0;\n","/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { Constraint, Operator } from \"./constraint\";\nimport { Expression } from \"./expression\";\nimport { createMap } from \"./maptype\";\nimport { Strength } from \"./strength\";\nimport { Variable } from \"./variable\";\n/**\n * The constraint solver class.\n *\n * @class\n */\nvar Solver = /** @class */ (function () {\n    /**\n     * Construct a new Solver.\n     */\n    function Solver() {\n        this._cnMap = createCnMap();\n        this._rowMap = createRowMap();\n        this._varMap = createVarMap();\n        this._editMap = createEditMap();\n        this._infeasibleRows = [];\n        this._objective = new Row();\n        this._artificial = null;\n        this._idTick = 0;\n    }\n    /**\n     * Creates and add a constraint to the solver.\n     *\n     * @param {Expression|Variable} lhs Left hand side of the expression\n     * @param {Operator} operator Operator\n     * @param {Expression|Variable|Number} rhs Right hand side of the expression\n     * @param {Number} [strength=Strength.required] Strength\n     */\n    Solver.prototype.createConstraint = function (lhs, operator, rhs, strength) {\n        if (strength === void 0) { strength = Strength.required; }\n        var cn = new Constraint(lhs, operator, rhs, strength);\n        this.addConstraint(cn);\n        return cn;\n    };\n    /**\n     * Add a constraint to the solver.\n     *\n     * @param {Constraint} constraint Constraint to add to the solver\n     */\n    Solver.prototype.addConstraint = function (constraint) {\n        var cnPair = this._cnMap.find(constraint);\n        if (cnPair !== undefined) {\n            throw new Error(\"duplicate constraint\");\n        }\n        // Creating a row causes symbols to be reserved for the variables\n        // in the constraint. If this method exits with an exception,\n        // then its possible those variables will linger in the var map.\n        // Since its likely that those variables will be used in other\n        // constraints and since exceptional conditions are uncommon,\n        // i'm not too worried about aggressive cleanup of the var map.\n        var data = this._createRow(constraint);\n        var row = data.row;\n        var tag = data.tag;\n        var subject = this._chooseSubject(row, tag);\n        // If chooseSubject couldnt find a valid entering symbol, one\n        // last option is available if the entire row is composed of\n        // dummy variables. If the constant of the row is zero, then\n        // this represents redundant constraints and the new dummy\n        // marker can enter the basis. If the constant is non-zero,\n        // then it represents an unsatisfiable constraint.\n        if (subject.type() === SymbolType.Invalid && row.allDummies()) {\n            if (!nearZero(row.constant())) {\n                throw new Error(\"unsatisfiable constraint\");\n            }\n            else {\n                subject = tag.marker;\n            }\n        }\n        // If an entering symbol still isn't found, then the row must\n        // be added using an artificial variable. If that fails, then\n        // the row represents an unsatisfiable constraint.\n        if (subject.type() === SymbolType.Invalid) {\n            if (!this._addWithArtificialVariable(row)) {\n                throw new Error(\"unsatisfiable constraint\");\n            }\n        }\n        else {\n            row.solveFor(subject);\n            this._substitute(subject, row);\n            this._rowMap.insert(subject, row);\n        }\n        this._cnMap.insert(constraint, tag);\n        // Optimizing after each constraint is added performs less\n        // aggregate work due to a smaller average system size. It\n        // also ensures the solver remains in a consistent state.\n        this._optimize(this._objective);\n    };\n    /**\n     * Remove a constraint from the solver.\n     *\n     * @param {Constraint} constraint Constraint to remove from the solver\n     */\n    Solver.prototype.removeConstraint = function (constraint) {\n        var cnPair = this._cnMap.erase(constraint);\n        if (cnPair === undefined) {\n            throw new Error(\"unknown constraint\");\n        }\n        // Remove the error effects from the objective function\n        // *before* pivoting, or substitutions into the objective\n        // will lead to incorrect solver results.\n        this._removeConstraintEffects(constraint, cnPair.second);\n        // If the marker is basic, simply drop the row. Otherwise,\n        // pivot the marker into the basis and then drop the row.\n        var marker = cnPair.second.marker;\n        var rowPair = this._rowMap.erase(marker);\n        if (rowPair === undefined) {\n            var leaving = this._getMarkerLeavingSymbol(marker);\n            if (leaving.type() === SymbolType.Invalid) {\n                throw new Error(\"failed to find leaving row\");\n            }\n            rowPair = this._rowMap.erase(leaving);\n            rowPair.second.solveForEx(leaving, marker);\n            this._substitute(marker, rowPair.second);\n        }\n        // Optimizing after each constraint is removed ensures that the\n        // solver remains consistent. It makes the solver api easier to\n        // use at a small tradeoff for speed.\n        this._optimize(this._objective);\n    };\n    /**\n     * Test whether the solver contains the constraint.\n     *\n     * @param {Constraint} constraint Constraint to test for\n     * @return {Bool} true or false\n     */\n    Solver.prototype.hasConstraint = function (constraint) {\n        return this._cnMap.contains(constraint);\n    };\n    /**\n     * Add an edit variable to the solver.\n     *\n     * @param {Variable} variable Edit variable to add to the solver\n     * @param {Number} strength Strength, should be less than `Strength.required`\n     */\n    Solver.prototype.addEditVariable = function (variable, strength) {\n        var editPair = this._editMap.find(variable);\n        if (editPair !== undefined) {\n            throw new Error(\"duplicate edit variable\");\n        }\n        strength = Strength.clip(strength);\n        if (strength === Strength.required) {\n            throw new Error(\"bad required strength\");\n        }\n        var expr = new Expression(variable);\n        var cn = new Constraint(expr, Operator.Eq, undefined, strength);\n        this.addConstraint(cn);\n        var tag = this._cnMap.find(cn).second;\n        var info = { tag: tag, constraint: cn, constant: 0.0 };\n        this._editMap.insert(variable, info);\n    };\n    /**\n     * Remove an edit variable from the solver.\n     *\n     * @param {Variable} variable Edit variable to remove from the solver\n     */\n    Solver.prototype.removeEditVariable = function (variable) {\n        var editPair = this._editMap.erase(variable);\n        if (editPair === undefined) {\n            throw new Error(\"unknown edit variable\");\n        }\n        this.removeConstraint(editPair.second.constraint);\n    };\n    /**\n     * Test whether the solver contains the edit variable.\n     *\n     * @param {Variable} variable Edit variable to test for\n     * @return {Bool} true or false\n     */\n    Solver.prototype.hasEditVariable = function (variable) {\n        return this._editMap.contains(variable);\n    };\n    /**\n     * Suggest the value of an edit variable.\n     *\n     * @param {Variable} variable Edit variable to suggest a value for\n     * @param {Number} value Suggested value\n     */\n    Solver.prototype.suggestValue = function (variable, value) {\n        var editPair = this._editMap.find(variable);\n        if (editPair === undefined) {\n            throw new Error(\"unknown edit variable\");\n        }\n        var rows = this._rowMap;\n        var info = editPair.second;\n        var delta = value - info.constant;\n        info.constant = value;\n        // Check first if the positive error variable is basic.\n        var marker = info.tag.marker;\n        var rowPair = rows.find(marker);\n        if (rowPair !== undefined) {\n            if (rowPair.second.add(-delta) < 0.0) {\n                this._infeasibleRows.push(marker);\n            }\n            this._dualOptimize();\n            return;\n        }\n        // Check next if the negative error variable is basic.\n        var other = info.tag.other;\n        rowPair = rows.find(other);\n        if (rowPair !== undefined) {\n            if (rowPair.second.add(delta) < 0.0) {\n                this._infeasibleRows.push(other);\n            }\n            this._dualOptimize();\n            return;\n        }\n        // Otherwise update each row where the error variables exist.\n        for (var i = 0, n = rows.size(); i < n; ++i) {\n            var rowPair_1 = rows.itemAt(i);\n            var row = rowPair_1.second;\n            var coeff = row.coefficientFor(marker);\n            if (coeff !== 0.0 && row.add(delta * coeff) < 0.0 &&\n                rowPair_1.first.type() !== SymbolType.External) {\n                this._infeasibleRows.push(rowPair_1.first);\n            }\n        }\n        this._dualOptimize();\n    };\n    /**\n     * Update the values of the variables.\n     */\n    Solver.prototype.updateVariables = function () {\n        var vars = this._varMap;\n        var rows = this._rowMap;\n        for (var i = 0, n = vars.size(); i < n; ++i) {\n            var pair = vars.itemAt(i);\n            var rowPair = rows.find(pair.second);\n            if (rowPair !== undefined) {\n                pair.first.setValue(rowPair.second.constant());\n            }\n            else {\n                pair.first.setValue(0.0);\n            }\n        }\n    };\n    /**\n     * Get the symbol for the given variable.\n     *\n     * If a symbol does not exist for the variable, one will be created.\n     * @private\n     */\n    Solver.prototype._getVarSymbol = function (variable) {\n        var _this = this;\n        var factory = function () { return _this._makeSymbol(SymbolType.External); };\n        return this._varMap.setDefault(variable, factory).second;\n    };\n    /**\n     * Create a new Row object for the given constraint.\n     *\n     * The terms in the constraint will be converted to cells in the row.\n     * Any term in the constraint with a coefficient of zero is ignored.\n     * This method uses the `_getVarSymbol` method to get the symbol for\n     * the variables added to the row. If the symbol for a given cell\n     * variable is basic, the cell variable will be substituted with the\n     * basic row.\n     *\n     * The necessary slack and error variables will be added to the row.\n     * If the constant for the row is negative, the sign for the row\n     * will be inverted so the constant becomes positive.\n     *\n     * Returns the created Row and the tag for tracking the constraint.\n     * @private\n     */\n    Solver.prototype._createRow = function (constraint) {\n        var expr = constraint.expression();\n        var row = new Row(expr.constant());\n        // Substitute the current basic variables into the row.\n        var terms = expr.terms();\n        for (var i = 0, n = terms.size(); i < n; ++i) {\n            var termPair = terms.itemAt(i);\n            if (!nearZero(termPair.second)) {\n                var symbol = this._getVarSymbol(termPair.first);\n                var basicPair = this._rowMap.find(symbol);\n                if (basicPair !== undefined) {\n                    row.insertRow(basicPair.second, termPair.second);\n                }\n                else {\n                    row.insertSymbol(symbol, termPair.second);\n                }\n            }\n        }\n        // Add the necessary slack, error, and dummy variables.\n        var objective = this._objective;\n        var strength = constraint.strength();\n        var tag = { marker: INVALID_SYMBOL, other: INVALID_SYMBOL };\n        switch (constraint.op()) {\n            case Operator.Le:\n            case Operator.Ge:\n                {\n                    var coeff = constraint.op() === Operator.Le ? 1.0 : -1.0;\n                    var slack = this._makeSymbol(SymbolType.Slack);\n                    tag.marker = slack;\n                    row.insertSymbol(slack, coeff);\n                    if (strength < Strength.required) {\n                        var error = this._makeSymbol(SymbolType.Error);\n                        tag.other = error;\n                        row.insertSymbol(error, -coeff);\n                        objective.insertSymbol(error, strength);\n                    }\n                    break;\n                }\n            case Operator.Eq:\n                {\n                    if (strength < Strength.required) {\n                        var errplus = this._makeSymbol(SymbolType.Error);\n                        var errminus = this._makeSymbol(SymbolType.Error);\n                        tag.marker = errplus;\n                        tag.other = errminus;\n                        row.insertSymbol(errplus, -1.0); // v = eplus - eminus\n                        row.insertSymbol(errminus, 1.0); // v - eplus + eminus = 0\n                        objective.insertSymbol(errplus, strength);\n                        objective.insertSymbol(errminus, strength);\n                    }\n                    else {\n                        var dummy = this._makeSymbol(SymbolType.Dummy);\n                        tag.marker = dummy;\n                        row.insertSymbol(dummy);\n                    }\n                    break;\n                }\n        }\n        // Ensure the row has a positive constant.\n        if (row.constant() < 0.0) {\n            row.reverseSign();\n        }\n        return { row: row, tag: tag };\n    };\n    /**\n     * Choose the subject for solving for the row.\n     *\n     * This method will choose the best subject for using as the solve\n     * target for the row. An invalid symbol will be returned if there\n     * is no valid target.\n     *\n     * The symbols are chosen according to the following precedence:\n     *\n     * 1) The first symbol representing an external variable.\n     * 2) A negative slack or error tag variable.\n     *\n     * If a subject cannot be found, an invalid symbol will be returned.\n     *\n     * @private\n     */\n    Solver.prototype._chooseSubject = function (row, tag) {\n        var cells = row.cells();\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            if (pair.first.type() === SymbolType.External) {\n                return pair.first;\n            }\n        }\n        var type = tag.marker.type();\n        if (type === SymbolType.Slack || type === SymbolType.Error) {\n            if (row.coefficientFor(tag.marker) < 0.0) {\n                return tag.marker;\n            }\n        }\n        type = tag.other.type();\n        if (type === SymbolType.Slack || type === SymbolType.Error) {\n            if (row.coefficientFor(tag.other) < 0.0) {\n                return tag.other;\n            }\n        }\n        return INVALID_SYMBOL;\n    };\n    /**\n     * Add the row to the tableau using an artificial variable.\n     *\n     * This will return false if the constraint cannot be satisfied.\n     *\n     * @private\n     */\n    Solver.prototype._addWithArtificialVariable = function (row) {\n        // Create and add the artificial variable to the tableau.\n        var art = this._makeSymbol(SymbolType.Slack);\n        this._rowMap.insert(art, row.copy());\n        this._artificial = row.copy();\n        // Optimize the artificial objective. This is successful\n        // only if the artificial objective is optimized to zero.\n        this._optimize(this._artificial);\n        var success = nearZero(this._artificial.constant());\n        this._artificial = null;\n        // If the artificial variable is basic, pivot the row so that\n        // it becomes non-basic. If the row is constant, exit early.\n        var pair = this._rowMap.erase(art);\n        if (pair !== undefined) {\n            var basicRow = pair.second;\n            if (basicRow.isConstant()) {\n                return success;\n            }\n            var entering = this._anyPivotableSymbol(basicRow);\n            if (entering.type() === SymbolType.Invalid) {\n                return false; // unsatisfiable (will this ever happen?)\n            }\n            basicRow.solveForEx(art, entering);\n            this._substitute(entering, basicRow);\n            this._rowMap.insert(entering, basicRow);\n        }\n        // Remove the artificial variable from the tableau.\n        var rows = this._rowMap;\n        for (var i = 0, n = rows.size(); i < n; ++i) {\n            rows.itemAt(i).second.removeSymbol(art);\n        }\n        this._objective.removeSymbol(art);\n        return success;\n    };\n    /**\n     * Substitute the parametric symbol with the given row.\n     *\n     * This method will substitute all instances of the parametric symbol\n     * in the tableau and the objective function with the given row.\n     *\n     * @private\n     */\n    Solver.prototype._substitute = function (symbol, row) {\n        var rows = this._rowMap;\n        for (var i = 0, n = rows.size(); i < n; ++i) {\n            var pair = rows.itemAt(i);\n            pair.second.substitute(symbol, row);\n            if (pair.second.constant() < 0.0 &&\n                pair.first.type() !== SymbolType.External) {\n                this._infeasibleRows.push(pair.first);\n            }\n        }\n        this._objective.substitute(symbol, row);\n        if (this._artificial) {\n            this._artificial.substitute(symbol, row);\n        }\n    };\n    /**\n     * Optimize the system for the given objective function.\n     *\n     * This method performs iterations of Phase 2 of the simplex method\n     * until the objective function reaches a minimum.\n     *\n     * @private\n     */\n    Solver.prototype._optimize = function (objective) {\n        while (true) {\n            var entering = this._getEnteringSymbol(objective);\n            if (entering.type() === SymbolType.Invalid) {\n                return;\n            }\n            var leaving = this._getLeavingSymbol(entering);\n            if (leaving.type() === SymbolType.Invalid) {\n                throw new Error(\"the objective is unbounded\");\n            }\n            // pivot the entering symbol into the basis\n            var row = this._rowMap.erase(leaving).second;\n            row.solveForEx(leaving, entering);\n            this._substitute(entering, row);\n            this._rowMap.insert(entering, row);\n        }\n    };\n    /**\n     * Optimize the system using the dual of the simplex method.\n     *\n     * The current state of the system should be such that the objective\n     * function is optimal, but not feasible. This method will perform\n     * an iteration of the dual simplex method to make the solution both\n     * optimal and feasible.\n     *\n     * @private\n     */\n    Solver.prototype._dualOptimize = function () {\n        var rows = this._rowMap;\n        var infeasible = this._infeasibleRows;\n        while (infeasible.length !== 0) {\n            var leaving = infeasible.pop();\n            var pair = rows.find(leaving);\n            if (pair !== undefined && pair.second.constant() < 0.0) {\n                var entering = this._getDualEnteringSymbol(pair.second);\n                if (entering.type() === SymbolType.Invalid) {\n                    throw new Error(\"dual optimize failed\");\n                }\n                // pivot the entering symbol into the basis\n                var row = pair.second;\n                rows.erase(leaving);\n                row.solveForEx(leaving, entering);\n                this._substitute(entering, row);\n                rows.insert(entering, row);\n            }\n        }\n    };\n    /**\n     * Compute the entering variable for a pivot operation.\n     *\n     * This method will return first symbol in the objective function which\n     * is non-dummy and has a coefficient less than zero. If no symbol meets\n     * the criteria, it means the objective function is at a minimum, and an\n     * invalid symbol is returned.\n     *\n     * @private\n     */\n    Solver.prototype._getEnteringSymbol = function (objective) {\n        var cells = objective.cells();\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            var symbol = pair.first;\n            if (pair.second < 0.0 && symbol.type() !== SymbolType.Dummy) {\n                return symbol;\n            }\n        }\n        return INVALID_SYMBOL;\n    };\n    /**\n     * Compute the entering symbol for the dual optimize operation.\n     *\n     * This method will return the symbol in the row which has a positive\n     * coefficient and yields the minimum ratio for its respective symbol\n     * in the objective function. The provided row *must* be infeasible.\n     * If no symbol is found which meats the criteria, an invalid symbol\n     * is returned.\n     *\n     * @private\n     */\n    Solver.prototype._getDualEnteringSymbol = function (row) {\n        var ratio = Number.MAX_VALUE;\n        var entering = INVALID_SYMBOL;\n        var cells = row.cells();\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            var symbol = pair.first;\n            var c = pair.second;\n            if (c > 0.0 && symbol.type() !== SymbolType.Dummy) {\n                var coeff = this._objective.coefficientFor(symbol);\n                var r = coeff / c;\n                if (r < ratio) {\n                    ratio = r;\n                    entering = symbol;\n                }\n            }\n        }\n        return entering;\n    };\n    /**\n     * Compute the symbol for pivot exit row.\n     *\n     * This method will return the symbol for the exit row in the row\n     * map. If no appropriate exit symbol is found, an invalid symbol\n     * will be returned. This indicates that the objective function is\n     * unbounded.\n     *\n     * @private\n     */\n    Solver.prototype._getLeavingSymbol = function (entering) {\n        var ratio = Number.MAX_VALUE;\n        var found = INVALID_SYMBOL;\n        var rows = this._rowMap;\n        for (var i = 0, n = rows.size(); i < n; ++i) {\n            var pair = rows.itemAt(i);\n            var symbol = pair.first;\n            if (symbol.type() !== SymbolType.External) {\n                var row = pair.second;\n                var temp = row.coefficientFor(entering);\n                if (temp < 0.0) {\n                    var temp_ratio = -row.constant() / temp;\n                    if (temp_ratio < ratio) {\n                        ratio = temp_ratio;\n                        found = symbol;\n                    }\n                }\n            }\n        }\n        return found;\n    };\n    /**\n     * Compute the leaving symbol for a marker variable.\n     *\n     * This method will return a symbol corresponding to a basic row\n     * which holds the given marker variable. The row will be chosen\n     * according to the following precedence:\n     *\n     * 1) The row with a restricted basic varible and a negative coefficient\n     *    for the marker with the smallest ratio of -constant / coefficient.\n     *\n     * 2) The row with a restricted basic variable and the smallest ratio\n     *    of constant / coefficient.\n     *\n     * 3) The last unrestricted row which contains the marker.\n     *\n     * If the marker does not exist in any row, an invalid symbol will be\n     * returned. This indicates an internal solver error since the marker\n     * *should* exist somewhere in the tableau.\n     *\n     * @private\n     */\n    Solver.prototype._getMarkerLeavingSymbol = function (marker) {\n        var dmax = Number.MAX_VALUE;\n        var r1 = dmax;\n        var r2 = dmax;\n        var invalid = INVALID_SYMBOL;\n        var first = invalid;\n        var second = invalid;\n        var third = invalid;\n        var rows = this._rowMap;\n        for (var i = 0, n = rows.size(); i < n; ++i) {\n            var pair = rows.itemAt(i);\n            var row = pair.second;\n            var c = row.coefficientFor(marker);\n            if (c === 0.0) {\n                continue;\n            }\n            var symbol = pair.first;\n            if (symbol.type() === SymbolType.External) {\n                third = symbol;\n            }\n            else if (c < 0.0) {\n                var r = -row.constant() / c;\n                if (r < r1) {\n                    r1 = r;\n                    first = symbol;\n                }\n            }\n            else {\n                var r = row.constant() / c;\n                if (r < r2) {\n                    r2 = r;\n                    second = symbol;\n                }\n            }\n        }\n        if (first !== invalid) {\n            return first;\n        }\n        if (second !== invalid) {\n            return second;\n        }\n        return third;\n    };\n    /**\n     * Remove the effects of a constraint on the objective function.\n     *\n     * @private\n     */\n    Solver.prototype._removeConstraintEffects = function (cn, tag) {\n        if (tag.marker.type() === SymbolType.Error) {\n            this._removeMarkerEffects(tag.marker, cn.strength());\n        }\n        if (tag.other.type() === SymbolType.Error) {\n            this._removeMarkerEffects(tag.other, cn.strength());\n        }\n    };\n    /**\n     * Remove the effects of an error marker on the objective function.\n     *\n     * @private\n     */\n    Solver.prototype._removeMarkerEffects = function (marker, strength) {\n        var pair = this._rowMap.find(marker);\n        if (pair !== undefined) {\n            this._objective.insertRow(pair.second, -strength);\n        }\n        else {\n            this._objective.insertSymbol(marker, -strength);\n        }\n    };\n    /**\n     * Get the first Slack or Error symbol in the row.\n     *\n     * If no such symbol is present, an invalid symbol will be returned.\n     *\n     * @private\n     */\n    Solver.prototype._anyPivotableSymbol = function (row) {\n        var cells = row.cells();\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            var type = pair.first.type();\n            if (type === SymbolType.Slack || type === SymbolType.Error) {\n                return pair.first;\n            }\n        }\n        return INVALID_SYMBOL;\n    };\n    /**\n     * Returns a new Symbol of the given type.\n     *\n     * @private\n     */\n    Solver.prototype._makeSymbol = function (type) {\n        return new Symbol(type, this._idTick++);\n    };\n    return Solver;\n}());\nexport { Solver };\n/**\n * Test whether a value is approximately zero.\n * @private\n */\nfunction nearZero(value) {\n    var eps = 1.0e-8;\n    return value < 0.0 ? -value < eps : value < eps;\n}\n/**\n * An internal function for creating a constraint map.\n * @private\n */\nfunction createCnMap() {\n    return createMap(Constraint.Compare);\n}\n/**\n * An internal function for creating a row map.\n * @private\n */\nfunction createRowMap() {\n    return createMap(Symbol.Compare);\n}\n/**\n * An internal function for creating a variable map.\n * @private\n */\nfunction createVarMap() {\n    return createMap(Variable.Compare);\n}\n/**\n * An internal function for creating an edit map.\n * @private\n */\nfunction createEditMap() {\n    return createMap(Variable.Compare);\n}\n/**\n * An enum defining the available symbol types.\n * @private\n */\nvar SymbolType;\n(function (SymbolType) {\n    SymbolType[SymbolType[\"Invalid\"] = 0] = \"Invalid\";\n    SymbolType[SymbolType[\"External\"] = 1] = \"External\";\n    SymbolType[SymbolType[\"Slack\"] = 2] = \"Slack\";\n    SymbolType[SymbolType[\"Error\"] = 3] = \"Error\";\n    SymbolType[SymbolType[\"Dummy\"] = 4] = \"Dummy\";\n})(SymbolType || (SymbolType = {}));\n/**\n * An internal class representing a symbol in the solver.\n * @private\n */\nvar Symbol = /** @class */ (function () {\n    /**\n     * Construct a new Symbol\n     *\n     * @param [type] The type of the symbol.\n     * @param [id] The unique id number of the symbol.\n     */\n    function Symbol(type, id) {\n        this._id = id;\n        this._type = type;\n    }\n    /**\n     * The static Symbol comparison function.\n     */\n    Symbol.Compare = function (a, b) {\n        return a.id() - b.id();\n    };\n    /**\n     * Returns the unique id number of the symbol.\n     */\n    Symbol.prototype.id = function () {\n        return this._id;\n    };\n    /**\n     * Returns the type of the symbol.\n     */\n    Symbol.prototype.type = function () {\n        return this._type;\n    };\n    return Symbol;\n}());\n/**\n * A static invalid symbol\n * @private\n */\nvar INVALID_SYMBOL = new Symbol(SymbolType.Invalid, -1);\n/**\n * An internal row class used by the solver.\n * @private\n */\nvar Row = /** @class */ (function () {\n    /**\n     * Construct a new Row.\n     */\n    function Row(constant) {\n        if (constant === void 0) { constant = 0.0; }\n        this._cellMap = createMap(Symbol.Compare);\n        this._constant = constant;\n    }\n    /**\n     * Returns the mapping of symbols to coefficients.\n     */\n    Row.prototype.cells = function () {\n        return this._cellMap;\n    };\n    /**\n     * Returns the constant for the row.\n     */\n    Row.prototype.constant = function () {\n        return this._constant;\n    };\n    /**\n     * Returns true if the row is a constant value.\n     */\n    Row.prototype.isConstant = function () {\n        return this._cellMap.empty();\n    };\n    /**\n     * Returns true if the Row has all dummy symbols.\n     */\n    Row.prototype.allDummies = function () {\n        var cells = this._cellMap;\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            if (pair.first.type() !== SymbolType.Dummy) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Create a copy of the row.\n     */\n    Row.prototype.copy = function () {\n        var theCopy = new Row(this._constant);\n        theCopy._cellMap = this._cellMap.copy();\n        return theCopy;\n    };\n    /**\n     * Add a constant value to the row constant.\n     *\n     * Returns the new value of the constant.\n     */\n    Row.prototype.add = function (value) {\n        return this._constant += value;\n    };\n    /**\n     * Insert the symbol into the row with the given coefficient.\n     *\n     * If the symbol already exists in the row, the coefficient\n     * will be added to the existing coefficient. If the resulting\n     * coefficient is zero, the symbol will be removed from the row.\n     */\n    Row.prototype.insertSymbol = function (symbol, coefficient) {\n        if (coefficient === void 0) { coefficient = 1.0; }\n        var pair = this._cellMap.setDefault(symbol, function () { return 0.0; });\n        if (nearZero(pair.second += coefficient)) {\n            this._cellMap.erase(symbol);\n        }\n    };\n    /**\n     * Insert a row into this row with a given coefficient.\n     *\n     * The constant and the cells of the other row will be\n     * multiplied by the coefficient and added to this row. Any\n     * cell with a resulting coefficient of zero will be removed\n     * from the row.\n     */\n    Row.prototype.insertRow = function (other, coefficient) {\n        if (coefficient === void 0) { coefficient = 1.0; }\n        this._constant += other._constant * coefficient;\n        var cells = other._cellMap;\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            this.insertSymbol(pair.first, pair.second * coefficient);\n        }\n    };\n    /**\n     * Remove a symbol from the row.\n     */\n    Row.prototype.removeSymbol = function (symbol) {\n        this._cellMap.erase(symbol);\n    };\n    /**\n     * Reverse the sign of the constant and cells in the row.\n     */\n    Row.prototype.reverseSign = function () {\n        this._constant = -this._constant;\n        var cells = this._cellMap;\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            pair.second = -pair.second;\n        }\n    };\n    /**\n     * Solve the row for the given symbol.\n     *\n     * This method assumes the row is of the form\n     * a * x + b * y + c = 0 and (assuming solve for x) will modify\n     * the row to represent the right hand side of\n     * x = -b/a * y - c / a. The target symbol will be removed from\n     * the row, and the constant and other cells will be multiplied\n     * by the negative inverse of the target coefficient.\n     *\n     * The given symbol *must* exist in the row.\n     */\n    Row.prototype.solveFor = function (symbol) {\n        var cells = this._cellMap;\n        var pair = cells.erase(symbol);\n        var coeff = -1.0 / pair.second;\n        this._constant *= coeff;\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            cells.itemAt(i).second *= coeff;\n        }\n    };\n    /**\n     * Solve the row for the given symbols.\n     *\n     * This method assumes the row is of the form\n     * x = b * y + c and will solve the row such that\n     * y = x / b - c / b. The rhs symbol will be removed from the\n     * row, the lhs added, and the result divided by the negative\n     * inverse of the rhs coefficient.\n     *\n     * The lhs symbol *must not* exist in the row, and the rhs\n     * symbol must* exist in the row.\n     */\n    Row.prototype.solveForEx = function (lhs, rhs) {\n        this.insertSymbol(lhs, -1.0);\n        this.solveFor(rhs);\n    };\n    /**\n     * Returns the coefficient for the given symbol.\n     */\n    Row.prototype.coefficientFor = function (symbol) {\n        var pair = this._cellMap.find(symbol);\n        return pair !== undefined ? pair.second : 0.0;\n    };\n    /**\n     * Substitute a symbol with the data from another row.\n     *\n     * Given a row of the form a * x + b and a substitution of the\n     * form x = 3 * y + c the row will be updated to reflect the\n     * expression 3 * a * y + a * c + b.\n     *\n     * If the symbol does not exist in the row, this is a no-op.\n     */\n    Row.prototype.substitute = function (symbol, row) {\n        var pair = this._cellMap.erase(symbol);\n        if (pair !== undefined) {\n            this.insertRow(row, pair.second);\n        }\n    };\n    return Row;\n}());\n","// #if process.env.CASSOWARYJS\n//     import c from 'cassowary/bin/c';\n// #endif\n\n// #if !process.env.CASSOWARYJS\n    import * as kiwi from 'kiwi.js';\n// #endif\nimport Attribute from './Attribute';\n\n/**\n * A SubView is automatically generated when constraints are added to a View.\n *\n * @namespace SubView\n */\nclass SubView {\n    constructor(options) {\n        this._name = options.name;\n        this._type = options.type;\n        this._solver = options.solver;\n        this._attr = {};\n        if (!options.name) {\n            // #if process.env.CASSOWARYJS\n//                 this._attr[Attribute.LEFT] = new c.Variable();\n//                 this._solver.addConstraint(new c.StayConstraint(this._attr[Attribute.LEFT], c.Strength.required));\n//                 this._attr[Attribute.TOP] = new c.Variable();\n//                 this._solver.addConstraint(new c.StayConstraint(this._attr[Attribute.TOP], c.Strength.required));\n//                 this._attr[Attribute.ZINDEX] = new c.Variable();\n//                 this._solver.addConstraint(new c.StayConstraint(this._attr[Attribute.ZINDEX], c.Strength.required));\n            // #endif\n\n            // #if !process.env.CASSOWARYJS\n                this._attr[Attribute.LEFT] = new kiwi.Variable();\n                this._solver.addConstraint(new kiwi.Constraint(this._attr[Attribute.LEFT], kiwi.Operator.Eq, 0));\n                this._attr[Attribute.TOP] = new kiwi.Variable();\n                this._solver.addConstraint(new kiwi.Constraint(this._attr[Attribute.TOP], kiwi.Operator.Eq, 0));\n                this._attr[Attribute.ZINDEX] = new kiwi.Variable();\n                this._solver.addConstraint(new kiwi.Constraint(this._attr[Attribute.ZINDEX], kiwi.Operator.Eq, 0));\n            // #endif\n        }\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            left: this.left,\n            top: this.top,\n            width: this.width,\n            height: this.height\n        };\n    }\n    toString() {\n        JSON.stringify(this.toJSON(), undefined, 2);\n    }\n\n    /**\n     * Name of the sub-view.\n     * @readonly\n     * @type {String}\n     */\n    get name() {\n        return this._name;\n    }\n\n    /**\n     * Left value (`Attribute.LEFT`).\n     * @readonly\n     * @type {Number}\n     */\n    get left() {\n        return this._getAttrValue(Attribute.LEFT);\n    }\n\n    /**\n     * Right value (`Attribute.RIGHT`).\n     * @readonly\n     * @type {Number}\n     */\n    get right() {\n        return this._getAttrValue(Attribute.RIGHT);\n    }\n\n    /**\n     * Width value (`Attribute.WIDTH`).\n     * @type {Number}\n     */\n    get width() {\n        return this._getAttrValue(Attribute.WIDTH);\n    }\n\n    /**\n     * Height value (`Attribute.HEIGHT`).\n     * @readonly\n     * @type {Number}\n     */\n    get height() {\n        return this._getAttrValue(Attribute.HEIGHT);\n    }\n\n    /**\n     * Intrinsic width of the sub-view.\n     *\n     * Use this property to explicitely set the width of the sub-view, e.g.:\n     * ```javascript\n     * var view = new AutoLayout.View(AutoLayout.VisualFormat.parse('|[child1][child2]|'), {\n     *   width: 500\n     * });\n     * view.subViews.child1.intrinsicWidth = 100;\n     * console.log('child2 width: ' + view.subViews.child2.width); // 400\n     * ```\n     *\n     * @type {Number}\n     */\n    get intrinsicWidth() {\n        return this._intrinsicWidth;\n    }\n    set intrinsicWidth(value) {\n        if ((value !== undefined) && (value !== this._intrinsicWidth)) {\n            const attr = this._getAttr(Attribute.WIDTH);\n            if (this._intrinsicWidth === undefined) {\n                // #if process.env.CASSOWARYJS\n//                     this._solver.addEditVar(attr, new c.Strength('required', this._name ? 998 : 999, 1000, 1000));\n                // #endif\n\n                // #if !process.env.CASSOWARYJS\n                    this._solver.addEditVariable(attr, kiwi.Strength.create(this._name ? 998 : 999, 1000, 1000));\n                // #endif\n            }\n            this._intrinsicWidth = value;\n            this._solver.suggestValue(attr, value);\n            // #if process.env.CASSOWARYJS\n//                 this._solver.resolve();\n            // #endif\n\n            // #if !process.env.CASSOWARYJS\n                this._solver.updateVariables();\n            // #endif\n        }\n    }\n\n    /**\n     * Intrinsic height of the sub-view.\n     *\n     * See `intrinsicWidth`.\n     *\n     * @type {Number}\n     */\n    get intrinsicHeight() {\n        return this._intrinsicHeight;\n    }\n    set intrinsicHeight(value) {\n        if ((value !== undefined) && (value !== this._intrinsicHeight)) {\n            const attr = this._getAttr(Attribute.HEIGHT);\n            if (this._intrinsicHeight === undefined) {\n                // #if process.env.CASSOWARYJS\n//                     this._solver.addEditVar(attr, new c.Strength('required', this._name ? 998 : 999, 1000, 1000));\n                // #endif\n\n                // #if !process.env.CASSOWARYJS\n                    this._solver.addEditVariable(attr, kiwi.Strength.create(this._name ? 998 : 999, 1000, 1000));\n                // #endif\n            }\n            this._intrinsicHeight = value;\n            this._solver.suggestValue(attr, value);\n\n            // #if process.env.CASSOWARYJS\n//                 this._solver.resolve();\n            // #endif\n\n            // #if !process.env.CASSOWARYJS\n                this._solver.updateVariables();\n            // #endif\n        }\n    }\n\n    /**\n     * Top value (`Attribute.TOP`).\n     * @readonly\n     * @type {Number}\n     */\n    get top() {\n        return this._getAttrValue(Attribute.TOP);\n    }\n\n    /**\n     * Bottom value (`Attribute.BOTTOM`).\n     * @readonly\n     * @type {Number}\n     */\n    get bottom() {\n        return this._getAttrValue(Attribute.BOTTOM);\n    }\n\n    /**\n     * Horizontal center (`Attribute.CENTERX`).\n     * @readonly\n     * @type {Number}\n     */\n    get centerX() {\n        return this._getAttrValue(Attribute.CENTERX);\n    }\n\n    /**\n     * Vertical center (`Attribute.CENTERY`).\n     * @readonly\n     * @type {Number}\n     */\n    get centerY() {\n        return this._getAttrValue(Attribute.CENTERY);\n    }\n\n    /**\n     * Z-index (`Attribute.ZINDEX`).\n     * @readonly\n     * @type {Number}\n     */\n    get zIndex() {\n        return this._getAttrValue(Attribute.ZINDEX);\n    }\n\n    /**\n     * Returns the type of the sub-view.\n     * @readonly\n     * @type {String}\n     */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * Gets the value of one of the attributes.\n     *\n     * @param {String|Attribute} attr Attribute name (e.g. 'right', 'centerY', Attribute.TOP).\n     * @return {Number} value or `undefined`\n     */\n    getValue(attr) {\n        return this._attr[attr] ? this._attr[attr].value() : undefined;\n    }\n\n    /**\n     * @private\n     */\n    _getAttr(attr) {\n        if (this._attr[attr]) {\n            return this._attr[attr];\n        }\n        // #if process.env.CASSOWARYJS\n//             this._attr[attr] = new c.Variable();\n        // #endif\n\n        // #if !process.env.CASSOWARYJS\n            this._attr[attr] = new kiwi.Variable();\n        // #endif\n\n        switch (attr) {\n            case Attribute.RIGHT:\n                this._getAttr(Attribute.LEFT);\n                this._getAttr(Attribute.WIDTH);\n                // #if process.env.CASSOWARYJS\n//                     this._solver.addConstraint(new c.Equation(this._attr[attr], c.plus(this._attr[Attribute.LEFT], this._attr[Attribute.WIDTH])));\n                // #endif\n\n                // #if !process.env.CASSOWARYJS\n                    this._solver.addConstraint(new kiwi.Constraint(this._attr[attr], kiwi.Operator.Eq, this._attr[Attribute.LEFT].plus(this._attr[Attribute.WIDTH])));\n                // #endif\n                break;\n            case Attribute.BOTTOM:\n                this._getAttr(Attribute.TOP);\n                this._getAttr(Attribute.HEIGHT);\n                // #if process.env.CASSOWARYJS\n//                     this._solver.addConstraint(new c.Equation(this._attr[attr], c.plus(this._attr[Attribute.TOP], this._attr[Attribute.HEIGHT])));\n                // #endif\n\n                // #if !process.env.CASSOWARYJS\n                    this._solver.addConstraint(new kiwi.Constraint(this._attr[attr], kiwi.Operator.Eq, this._attr[Attribute.TOP].plus(this._attr[Attribute.HEIGHT])));\n                // #endif\n                break;\n            case Attribute.CENTERX:\n                this._getAttr(Attribute.LEFT);\n                this._getAttr(Attribute.WIDTH);\n                // #if process.env.CASSOWARYJS\n//                     this._solver.addConstraint(new c.Equation(this._attr[attr], c.plus(this._attr[Attribute.LEFT], c.divide(this._attr[Attribute.WIDTH], 2))));\n                // #endif\n\n                // #if !process.env.CASSOWARYJS\n                    this._solver.addConstraint(new kiwi.Constraint(this._attr[attr], kiwi.Operator.Eq, this._attr[Attribute.LEFT].plus(this._attr[Attribute.WIDTH].divide(2))));\n                // #endif\n                break;\n            case Attribute.CENTERY:\n                this._getAttr(Attribute.TOP);\n                this._getAttr(Attribute.HEIGHT);\n                // #if process.env.CASSOWARYJS\n//                     this._solver.addConstraint(new c.Equation(this._attr[attr], c.plus(this._attr[Attribute.TOP], c.divide(this._attr[Attribute.HEIGHT], 2))));\n                // #endif\n\n                // #if !process.env.CASSOWARYJS\n                    this._solver.addConstraint(new kiwi.Constraint(this._attr[attr], kiwi.Operator.Eq, this._attr[Attribute.TOP].plus(this._attr[Attribute.HEIGHT].divide(2))));\n                // #endif\n                break;\n        }\n        // #if !process.env.CASSOWARYJS\n            this._solver.updateVariables();\n        // #endif\n\n        return this._attr[attr];\n    }\n\n    /**\n     * @private\n     */\n    _getAttrValue(attr) {\n        let value;\n        // #if process.env.CASSOWARYJS\n//             value = this._getAttr(attr).value;\n        // #endif\n\n        // #if !process.env.CASSOWARYJS\n            value = this._getAttr(attr).value();\n        // #endif\n\n        return value;\n    }\n}\n\nexport default SubView;\n","// #if process.env.CASSOWARYJS\n//     import c from 'cassowary/bin/c';\n// #endif\n\n// #if !process.env.CASSOWARYJS\n    import * as kiwi from 'kiwi.js';\n// #endif\nimport Attribute from './Attribute';\nimport Relation from './Relation';\nimport SubView from './SubView';\n\nlet defaultPriorityStrength;\n// #if process.env.CASSOWARYJS\n//     defaultPriorityStrength =  new c.Strength('defaultPriority', 0, 1000, 1000);\n// #endif\n// #if !process.env.CASSOWARYJS\n    defaultPriorityStrength = kiwi.Strength.create(0, 1000, 1000);\n// #endif\n\nfunction _getConst(name, value) {\n    let vr;\n    // #if process.env.CASSOWARYJS\n//         vr = new c.Variable({value: value});\n//         this._solver.addConstraint(new c.StayConstraint(vr, c.Strength.required, 0));\n    // #endif\n\n    // #if !process.env.CASSOWARYJS\n        vr = new kiwi.Variable();\n        this._solver.addConstraint(new kiwi.Constraint(vr, kiwi.Operator.Eq, value));\n    // #endif\n\n    return vr;\n}\n\nfunction _getSubView(viewName) {\n    if (!viewName) {\n        return this._parentSubView;\n    }\n    else if (viewName.name) {\n        this._subViews[viewName.name] = this._subViews[viewName.name] || new SubView({\n            name: viewName.name,\n            solver: this._solver\n        });\n        this._subViews[viewName.name]._type = this._subViews[viewName.name]._type || viewName.type;\n        return this._subViews[viewName.name];\n    }\n    else {\n        this._subViews[viewName] = this._subViews[viewName] || new SubView({\n            name: viewName,\n            solver: this._solver\n        });\n        return this._subViews[viewName];\n    }\n}\n\nfunction _getSpacing(constraint) {\n    let index = 4;\n    if (!constraint.view1 && (constraint.attr1 === 'left')) {\n        index = 3;\n    }\n    else if (!constraint.view1 && (constraint.attr1 === 'top')) {\n        index = 0;\n    }\n    else if (!constraint.view2 && (constraint.attr2 === 'right')) {\n        index = 1;\n    }\n    else if (!constraint.view2 && (constraint.attr2 === 'bottom')) {\n        index = 2;\n    }\n    else {\n        switch (constraint.attr1) {\n            case 'left':\n            case 'right':\n            case 'centerX':\n            case 'leading':\n            case 'trailing':\n                index = 4;\n                break;\n            case 'zIndex':\n                index = 6;\n                break;\n            default:\n                index = 5;\n        }\n    }\n    this._spacingVars = this._spacingVars || new Array(7);\n    this._spacingExpr = this._spacingExpr || new Array(7);\n    if (!this._spacingVars[index]) {\n        // #if process.env.CASSOWARYJS\n//             this._spacingVars[index] = new c.Variable();\n//             this._solver.addEditVar(this._spacingVars[index]);\n//             this._spacingExpr[index] = c.minus(0, this._spacingVars[index]);\n        // #endif\n\n        // #if !process.env.CASSOWARYJS\n            this._spacingVars[index] = new kiwi.Variable();\n            this._solver.addEditVariable(this._spacingVars[index], kiwi.Strength.create(999, 1000, 1000));\n            this._spacingExpr[index] = this._spacingVars[index].multiply(-1);\n        // #endif\n        this._solver.suggestValue(this._spacingVars[index], this._spacing[index]);\n    }\n    return this._spacingExpr[index];\n}\n\nfunction _addConstraint(constraint) {\n    //this.constraints.push(constraint);\n    let relation;\n    const multiplier = (constraint.multiplier !== undefined) ? constraint.multiplier : 1;\n    let constant = (constraint.constant !== undefined) ? constraint.constant : 0;\n    if (constant === 'default') {\n        constant = _getSpacing.call(this, constraint);\n    }\n    const attr1 = _getSubView.call(this, constraint.view1)._getAttr(constraint.attr1);\n    let attr2, strength;\n    // #if process.env.CASSOWARYJS\n//         if (constraint.attr2 === Attribute.CONST) {\n//             attr2 = _getConst.call(this, undefined, constraint.constant);\n//         }\n//         else {\n//             attr2 = _getSubView.call(this, constraint.view2)._getAttr(constraint.attr2);\n//             if ((multiplier !== 1) && constant) {\n//                 attr2 = c.plus(c.times(attr2, multiplier), constant);\n//             }\n//             else if (constant) {\n//                 attr2 = c.plus(attr2, constant);\n//             }\n//             else if (multiplier !== 1) {\n//                 attr2 = c.times(attr2, multiplier);\n//             }\n//         }\n//         strength = ((constraint.priority !== undefined) && (constraint.priority < 1000)) ? new c.Strength('priority', 0, constraint.priority, 1000) : defaultPriorityStrength;\n//         switch (constraint.relation) {\n//             case Relation.EQU:\n//                 relation = new c.Equation(attr1, attr2, strength);\n//                 break;\n//             case Relation.GEQ:\n//                 relation = new c.Inequality(attr1, c.GEQ, attr2, strength);\n//                 break;\n//             case Relation.LEQ:\n//                 relation = new c.Inequality(attr1, c.LEQ, attr2, strength);\n//                 break;\n//             default:\n//                 throw 'Invalid relation specified: ' + constraint.relation;\n//         }\n    // #endif\n\n    // #if !process.env.CASSOWARYJS\n        if (constraint.attr2 === Attribute.CONST) {\n            attr2 = _getConst.call(this, undefined, constraint.constant);\n        }\n        else {\n            attr2 = _getSubView.call(this, constraint.view2)._getAttr(constraint.attr2);\n            if ((multiplier !== 1) && constant) {\n                attr2 = attr2.multiply(multiplier).plus(constant);\n            }\n            else if (constant) {\n                attr2 = attr2.plus(constant);\n            }\n            else if (multiplier !== 1) {\n                attr2 = attr2.multiply(multiplier);\n            }\n        }\n        strength = ((constraint.priority !== undefined) && (constraint.priority < 1000)) ? kiwi.Strength.create(0, constraint.priority, 1000) : defaultPriorityStrength;\n        switch (constraint.relation) {\n            case Relation.EQU:\n                relation = new kiwi.Constraint(attr1, kiwi.Operator.Eq, attr2, strength);\n                break;\n            case Relation.GEQ:\n                relation = new kiwi.Constraint(attr1, kiwi.Operator.Ge, attr2, strength);\n                break;\n            case Relation.LEQ:\n                relation = new kiwi.Constraint(attr1, kiwi.Operator.Le, attr2, strength);\n                break;\n            default:\n                throw 'Invalid relation specified: ' + constraint.relation;\n        }\n    // #endif\n    this._solver.addConstraint(relation);\n}\n\nfunction _compareSpacing(old, newz) {\n    if (old === newz) {\n        return true;\n    }\n    if (!old || !newz) {\n        return false;\n    }\n    for (var i = 0; i < 7; i++) {\n        if (old[i] !== newz[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * AutoLayoutJS API reference.\n *\n * ### Index\n *\n * |Entity|Type|Description|\n * |---|---|---|\n * |[AutoLayout](#autolayout)|`namespace`|Top level AutoLayout object.|\n * |[VisualFormat](#autolayoutvisualformat--object)|`namespace`|Parses VFL into constraints.|\n * |[View](#autolayoutview)|`class`|Main entity for adding & evaluating constraints.|\n * |[SubView](#autolayoutsubview--object)|`class`|SubView's are automatically created when constraints are added to views. They give access to the evaluated results.|\n * |[Attribute](#autolayoutattribute--enum)|`enum`|Attribute types that are supported when adding constraints.|\n * |[Relation](#autolayoutrelation--enum)|`enum`|Relationship types that are supported when adding constraints.|\n * |[Priority](#autolayoutpriority--enum)|`enum`|Default priority values for when adding constraints.|\n *\n * ### AutoLayout\n *\n * @module AutoLayout\n */\nclass View {\n\n    /**\n     * @class View\n     * @param {Object} [options] Configuration options.\n     * @param {Number} [options.width] Initial width of the view.\n     * @param {Number} [options.height] Initial height of the view.\n     * @param {Number|Object} [options.spacing] Spacing for the view (default: 8) (see `setSpacing`).\n     * @param {Array} [options.constraints] One or more constraint definitions (see `addConstraints`).\n     */\n    constructor(options) {\n        // #if process.env.CASSOWARYJS\n//             this._solver = new c.SimplexSolver();\n        // #endif\n\n        // #if !process.env.CASSOWARYJS\n            this._solver = new kiwi.Solver();\n        // #endif\n\n        this._subViews = {};\n        //this._spacing = undefined;\n        this._parentSubView = new SubView({\n            solver: this._solver\n        });\n        this.setSpacing((options && (options.spacing !== undefined)) ? options.spacing : 8);\n        //this.constraints = [];\n        if (options) {\n            if ((options.width !== undefined) || (options.height !== undefined)) {\n                this.setSize(options.width, options.height);\n            }\n            if (options.constraints) {\n                this.addConstraints(options.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the width and height of the view.\n     *\n     * @param {Number} width Width of the view.\n     * @param {Number} height Height of the view.\n     * @return {View} this\n     */\n    setSize(width, height /*, depth*/) {\n        this._parentSubView.intrinsicWidth = width;\n        this._parentSubView.intrinsicHeight = height;\n        return this;\n    }\n\n    /**\n     * Width that was set using `setSize`.\n     * @readonly\n     * @type {Number}\n     */\n    get width() {\n        return this._parentSubView.intrinsicWidth;\n    }\n\n    /**\n     * Height that was set using `setSize`.\n     * @readonly\n     * @type {Number}\n     */\n    get height() {\n        return this._parentSubView.intrinsicHeight;\n    }\n\n    /**\n     * Width that is calculated from the constraints and the `.intrinsicWidth` of\n     * the sub-views.\n     *\n     * When the width has been explicitely set using `setSize`, the fittingWidth\n     * will **always** be the same as the explicitely set width. To calculate the size\n     * based on the content, use:\n     * ```javascript\n     * var view = new AutoLayout.View({\n     *   constraints: VisualFormat.parse('|-[view1]-[view2]-'),\n     *   spacing: 20\n     * });\n     * view.subViews.view1.intrinsicWidth = 100;\n     * view.subViews.view2.intrinsicWidth = 100;\n     * console.log('fittingWidth: ' + view.fittingWidth); // 260\n     * ```\n     *\n     * @readonly\n     * @type {Number}\n     */\n    get fittingWidth() {\n        return this._parentSubView.width;\n    }\n\n    /**\n     * Height that is calculated from the constraints and the `.intrinsicHeight` of\n     * the sub-views.\n     *\n     * See `.fittingWidth`.\n     *\n     * @readonly\n     * @type {Number}\n     */\n    get fittingHeight() {\n        return this._parentSubView.height;\n    }\n\n    /**\n     * Sets the spacing for the view.\n     *\n     * The spacing can be set for 7 different variables:\n     * `top`, `right`, `bottom`, `left`, `width`, `height` and `zIndex`. The `left`-spacing is\n     * used when a spacer is used between the parent-view and a sub-view (e.g. `|-[subView]`).\n     * The same is true for the `right`, `top` and `bottom` spacers. The `width` and `height` are\n     * used for spacers in between sub-views (e.g. `[view1]-[view2]`).\n     *\n     * Instead of using the full spacing syntax, it is also possible to use shorthand notations:\n     *\n     * |Syntax|Type|Description|\n     * |---|---|---|\n     * |`[top, right, bottom, left, width, height, zIndex]`|Array(7)|Full syntax including z-index **(clockwise order)**.|\n     * |`[top, right, bottom, left, width, height]`|Array(6)|Full horizontal & vertical spacing syntax (no z-index) **(clockwise order)**.|\n     * |`[horizontal, vertical, zIndex]`|Array(3)|Horizontal = left, right, width, vertical = top, bottom, height.|\n     * |`[horizontal, vertical]`|Array(2)|Horizontal = left, right, width, vertical = top, bottom, height, z-index = 1.|\n     * |`spacing`|Number|Horizontal & vertical spacing are all the same, z-index = 1.|\n     *\n     * Examples:\n     * ```javascript\n     * view.setSpacing(10); // horizontal & vertical spacing 10\n     * view.setSpacing([10, 15, 2]); // horizontal spacing 10, vertical spacing 15, z-axis spacing 2\n     * view.setSpacing([10, 20, 10, 20, 5, 5]); // top, right, bottom, left, horizontal, vertical\n     * view.setSpacing([10, 20, 10, 20, 5, 5, 1]); // top, right, bottom, left, horizontal, vertical, z\n     * ```\n     *\n     * @param {Number|Array} spacing\n     * @return {View} this\n     */\n    setSpacing(spacing) {\n        // convert spacing into array: [top, right, bottom, left, horz, vert, z-index]\n        switch (Array.isArray(spacing) ? spacing.length : -1) {\n            case -1: spacing = [spacing, spacing, spacing, spacing, spacing, spacing, 1]; break;\n            case 1: spacing = [spacing[0], spacing[0], spacing[0], spacing[0], spacing[0], spacing[0], 1]; break;\n            case 2: spacing = [spacing[1], spacing[0], spacing[1], spacing[0], spacing[0], spacing[1], 1]; break;\n            case 3: spacing = [spacing[1], spacing[0], spacing[1], spacing[0], spacing[0], spacing[1], spacing[2]]; break;\n            case 6: spacing = [spacing[0], spacing[1], spacing[2], spacing[3], spacing[4], spacing[5], 1]; break;\n            case 7: break;\n            default: throw 'Invalid spacing syntax';\n        }\n        if (!_compareSpacing(this._spacing, spacing)) {\n            this._spacing = spacing;\n            // update spacing variables\n            if (this._spacingVars) {\n                for (var i = 0; i < this._spacingVars.length; i++) {\n                    if (this._spacingVars[i]) {\n                        this._solver.suggestValue(this._spacingVars[i], this._spacing[i]);\n                    }\n                }\n                // #if process.env.CASSOWARYJS\n//                     this._solver.resolve();\n                // #endif\n\n                // #if !process.env.CASSOWARYJS\n                    this._solver.updateVariables();\n                // #endif\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Adds a constraint definition.\n     *\n     * A constraint definition has the following format:\n     *\n     * ```javascript\n     * constraint: {\n     *   view1: {String},\n     *   attr1: {AutoLayout.Attribute},\n     *   relation: {AutoLayout.Relation},\n     *   view2: {String},\n     *   attr2: {AutoLayout.Attribute},\n     *   multiplier: {Number},\n     *   constant: {Number},\n     *   priority: {Number}(0..1000)\n     * }\n     * ```\n     * @param {Object} constraint Constraint definition.\n     * @return {View} this\n     */\n    addConstraint(constraint) {\n        _addConstraint.call(this, constraint);\n        // #if !process.env.CASSOWARYJS\n            this._solver.updateVariables();\n        // #endif\n        return this;\n    }\n\n    /**\n     * Adds one or more constraint definitions.\n     *\n     * A constraint definition has the following format:\n     *\n     * ```javascript\n     * constraint: {\n     *   view1: {String},\n     *   attr1: {AutoLayout.Attribute},\n     *   relation: {AutoLayout.Relation},\n     *   view2: {String},\n     *   attr2: {AutoLayout.Attribute},\n     *   multiplier: {Number},\n     *   constant: {Number},\n     *   priority: {Number}(0..1000)\n     * }\n     * ```\n     * @param {Array} constraints One or more constraint definitions.\n     * @return {View} this\n     */\n    addConstraints(constraints) {\n        for (var j = 0; j < constraints.length; j++) {\n            _addConstraint.call(this, constraints[j]);\n        }\n        // #if !process.env.CASSOWARYJS\n            this._solver.updateVariables();\n        // #endif\n        return this;\n    }\n\n    /**\n     * Dictionary of `SubView` objects that have been created when adding constraints.\n     * @readonly\n     * @type {Object.SubView}\n     */\n    get subViews() {\n        return this._subViews;\n    }\n\n    /**\n     * Checks whether the constraints incompletely specify the location\n     * of the subViews.\n     * @private\n     */\n    //get hasAmbiguousLayout() {\n        // Todo\n    //}\n}\n\nexport default View;\n","export {default as Attribute} from './Attribute';\nexport {default as Relation} from './Relation';\nexport {default as Priority} from './Priority';\nexport {default as VisualFormat} from './VisualFormat';\nexport {default as View} from './View';\nexport {default as SubView} from './SubView';\n//import DOM from './DOM';\n"],"sourceRoot":""}